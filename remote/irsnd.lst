   1               		.file	"irsnd.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 127               	irsnd_on:
 128               		.stabd	46,0,0
   1:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
   2:irsnd.c       ****  * @file irsnd.c
   3:irsnd.c       ****  *
   4:irsnd.c       ****  * Copyright (c) 2010-2019 Frank Meyer - frank(at)fli4l.de
   5:irsnd.c       ****  *
   6:irsnd.c       ****  * Supported AVR mikrocontrollers:
   7:irsnd.c       ****  *
   8:irsnd.c       ****  * ATtiny87,  ATtiny167
   9:irsnd.c       ****  * ATtiny45,  ATtiny85
  10:irsnd.c       ****  * ATtiny44   ATtiny84
  11:irsnd.c       ****  * ATtiny2313 ATtiny4313
  12:irsnd.c       ****  * ATmega8,   ATmega16,  ATmega32
  13:irsnd.c       ****  * ATmega162
  14:irsnd.c       ****  * ATmega164, ATmega324, ATmega644,  ATmega644P, ATmega1284, ATmega1284P
  15:irsnd.c       ****  * ATmega88,  ATmega88P, ATmega168,  ATmega168P, ATmega328P
  16:irsnd.c       ****  *
  17:irsnd.c       ****  * This program is free software; you can redistribute it and/or modify
  18:irsnd.c       ****  * it under the terms of the GNU General Public License as published by
  19:irsnd.c       ****  * the Free Software Foundation; either version 2 of the License, or
  20:irsnd.c       ****  * (at your option) any later version.
  21:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
  22:irsnd.c       ****  */
  23:irsnd.c       **** 
  24:irsnd.c       **** #include "irsnd.h"
  25:irsnd.c       **** 
  26:irsnd.c       **** #ifndef F_CPU
  27:irsnd.c       **** #  error F_CPU unkown
  28:irsnd.c       **** #endif
  29:irsnd.c       **** 
  30:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
  31:irsnd.c       ****  *  ATtiny pin definition of OC0A / OC0B
  32:irsnd.c       ****  *  ATmega pin definition of OC2 / OC2A / OC2B / OC0 / OC0A / OC0B
  33:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
  34:irsnd.c       ****  */
  35:irsnd.c       **** #if defined (__AVR_ATtiny44__) || defined (__AVR_ATtiny84__)        // ATtiny44/84 uses OC0A = PB2 
  36:irsnd.c       **** #  if IRSND_OCx == IRSND_OC0A                                       // OC0A
  37:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
  38:irsnd.c       **** #    define IRSND_BIT_NUMBER                        2
  39:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0B                                     // OC0B
  40:irsnd.c       **** #    define IRSND_PORT_LETTER                       A
  41:irsnd.c       **** #    define IRSND_BIT_NUMBER                        7
  42:irsnd.c       **** #  else
  43:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC0A or IRSND_OC0B in irsndconfig.h
  44:irsnd.c       **** #  endif // IRSND_OCx
  45:irsnd.c       **** 
  46:irsnd.c       **** #elif defined (__AVR_ATtiny45__) || defined (__AVR_ATtiny85__)      // ATtiny45/85 uses OC0A = PB0 
  47:irsnd.c       **** #  if IRSND_OCx == IRSND_OC0A                                       // OC0A
  48:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
  49:irsnd.c       **** #    define IRSND_BIT_NUMBER                        0
  50:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0B                                     // OC0B
  51:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
  52:irsnd.c       **** #    define IRSND_BIT_NUMBER                        1
  53:irsnd.c       **** #  else
  54:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC0A or IRSND_OC0B in irsndconfig.h
  55:irsnd.c       **** #  endif // IRSND_OCx
  56:irsnd.c       **** 
  57:irsnd.c       **** #elif defined (__AVR_ATtiny2313__) || defined (__AVR_ATtiny4313__)  // ATtiny2313/4313 uses OC0A = 
  58:irsnd.c       **** #  if IRSND_OCx == IRSND_OC0A                                       // OC0A
  59:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
  60:irsnd.c       **** #    define IRSND_BIT_NUMBER                        2
  61:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0B                                     // OC0B
  62:irsnd.c       **** #    define IRSND_PORT_LETTER                       D
  63:irsnd.c       **** #    define IRSND_BIT_NUMBER                        5
  64:irsnd.c       **** #  else
  65:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC0A or IRSND_OC0B in irsndconfig.h
  66:irsnd.c       **** #  endif // IRSND_OCx
  67:irsnd.c       **** 
  68:irsnd.c       **** #elif defined (__AVR_ATtiny87__) || defined (__AVR_ATtiny167__)     // ATtiny87/167 uses OC0A = PA2
  69:irsnd.c       **** #  if IRSND_OCx == IRSND_OC0A                                       // OC0A
  70:irsnd.c       **** #    define IRSND_PORT_LETTER                       A
  71:irsnd.c       **** #    define IRSND_BIT_NUMBER                        2
  72:irsnd.c       **** #  else
  73:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC0A in irsndconfig.h
  74:irsnd.c       **** #  endif // IRSND_OCx
  75:irsnd.c       **** 
  76:irsnd.c       **** #elif defined (__AVR_ATmega8__)                                     // ATmega8 uses only OC2 = PB3
  77:irsnd.c       **** #  if IRSND_OCx == IRSND_OC2                                        // OC2
  78:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
  79:irsnd.c       **** #    define IRSND_BIT_NUMBER                        3
  80:irsnd.c       **** #  else
  81:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC2 in irsndconfig.h
  82:irsnd.c       **** #  endif // IRSND_OCx
  83:irsnd.c       **** #elif defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)      // ATmega16|32 uses OC0 = PB3 o
  84:irsnd.c       **** #  if IRSND_OCx == IRSND_OC2                                        // OC2
  85:irsnd.c       **** #    define IRSND_PORT_LETTER                       D
  86:irsnd.c       **** #    define IRSND_BIT_NUMBER                        7
  87:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0                                      // OC0
  88:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
  89:irsnd.c       **** #    define IRSND_BIT_NUMBER                        3
  90:irsnd.c       **** #  else
  91:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC2 or IRSND_OC0 in irsndconfig.h
  92:irsnd.c       **** #  endif // IRSND_OCx
  93:irsnd.c       **** 
  94:irsnd.c       **** #elif defined (__AVR_ATmega162__)                                   // ATmega162 uses OC2 = PB1 or 
  95:irsnd.c       **** #  if IRSND_OCx == IRSND_OC2                                        // OC2
  96:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
  97:irsnd.c       **** #    define IRSND_BIT_NUMBER                        1
  98:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0                                      // OC0
  99:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
 100:irsnd.c       **** #    define IRSND_BIT_NUMBER                        0
 101:irsnd.c       **** #  else
 102:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC2 or IRSND_OC0 in irsndconfig.h
 103:irsnd.c       **** #  endif // IRSND_OCx
 104:irsnd.c       **** 
 105:irsnd.c       **** #elif defined (__AVR_ATmega164__)   \
 106:irsnd.c       ****    || defined (__AVR_ATmega324__)   \
 107:irsnd.c       ****    || defined (__AVR_ATmega644__)   \
 108:irsnd.c       ****    || defined (__AVR_ATmega644P__)  \
 109:irsnd.c       ****    || defined (__AVR_ATmega1284__)  \
 110:irsnd.c       ****    || defined (__AVR_ATmega1284P__)                                 // ATmega164|324|644|644P|1284 
 111:irsnd.c       **** #  if IRSND_OCx == IRSND_OC2A                                       // OC2A
 112:irsnd.c       **** #    define IRSND_PORT_LETTER                       D
 113:irsnd.c       **** #    define IRSND_BIT_NUMBER                        7
 114:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC2B                                     // OC2B
 115:irsnd.c       **** #    define IRSND_PORT_LETTER                       D
 116:irsnd.c       **** #    define IRSND_BIT_NUMBER                        6
 117:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0A                                     // OC0A
 118:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
 119:irsnd.c       **** #    define IRSND_BIT_NUMBER                        3
 120:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0B                                     // OC0B
 121:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
 122:irsnd.c       **** #    define IRSND_BIT_NUMBER                        4
 123:irsnd.c       **** #  else
 124:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC2A, IRSND_OC2B, IRSND_OC0A, or IRSND_OC0B in i
 125:irsnd.c       **** #  endif // IRSND_OCx
 126:irsnd.c       **** 
 127:irsnd.c       **** #elif defined (__AVR_ATmega48__)    \
 128:irsnd.c       ****    || defined (__AVR_ATmega88__)    \
 129:irsnd.c       ****    || defined (__AVR_ATmega88P__)   \
 130:irsnd.c       ****    || defined (__AVR_ATmega168__)   \
 131:irsnd.c       ****    || defined (__AVR_ATmega168P__)  \
 132:irsnd.c       ****    || defined (__AVR_ATmega328P__)                                  // ATmega48|88|168|168|328 uses
 133:irsnd.c       **** #  if IRSND_OCx == IRSND_OC2A                                       // OC2A
 134:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
 135:irsnd.c       **** #    define IRSND_BIT_NUMBER                        3
 136:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC2B                                     // OC2B
 137:irsnd.c       **** #    define IRSND_PORT_LETTER                       D
 138:irsnd.c       **** #    define IRSND_BIT_NUMBER                        3
 139:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0A                                     // OC0A
 140:irsnd.c       **** #    define IRSND_PORT_LETTER                       D
 141:irsnd.c       **** #    define IRSND_BIT_NUMBER                        6
 142:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC0B                                     // OC0B
 143:irsnd.c       **** #    define IRSND_PORT_LETTER                       D
 144:irsnd.c       **** #    define IRSND_BIT_NUMBER                        5
 145:irsnd.c       **** #  else
 146:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_OC2A, IRSND_OC2B, IRSND_OC0A, or IRSND_OC0B in i
 147:irsnd.c       **** #  endif // IRSND_OCx
 148:irsnd.c       **** 
 149:irsnd.c       **** #elif defined (__AVR_ATmega8515__)                                  // ATmega8515 uses OC0 = PB0 or
 150:irsnd.c       **** #  if IRSND_OCx == IRSND_OC0
 151:irsnd.c       **** #    define IRSND_PORT_LETTER                       B
 152:irsnd.c       **** #    define IRSND_BIT_NUMBER                        0
 153:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC1A
 154:irsnd.c       **** #    define IRSND_PORT_LETTER                       D
 155:irsnd.c       **** #    define IRSND_BIT_NUMBER                        5
 156:irsnd.c       **** #  elif IRSND_OCx == IRSND_OC1B
 157:irsnd.c       **** #    define IRSND_PORT_LETTER                       E
 158:irsnd.c       **** #    define IRSND_BIT_NUMBER                        2
 159:irsnd.c       **** #  endif // IRSND_OCx
 160:irsnd.c       **** 
 161:irsnd.c       **** #elif defined (__AVR_XMEGA__)                                       // ATxmega
 162:irsnd.c       **** #  if IRSND_OCx == IRSND_XMEGA_OC0A
 163:irsnd.c       **** #    define IRSND_BIT_NUMBER                        0
 164:irsnd.c       **** #  elif IRSND_OCx == IRSND_XMEGA_OC0B
 165:irsnd.c       **** #    define IRSND_BIT_NUMBER                        1
 166:irsnd.c       **** #  elif IRSND_OCx == IRSND_XMEGA_OC0C
 167:irsnd.c       **** #    define IRSND_BIT_NUMBER                        2
 168:irsnd.c       **** #  elif IRSND_OCx == IRSND_XMEGA_OC0D
 169:irsnd.c       **** #    define IRSND_BIT_NUMBER                        3
 170:irsnd.c       **** #  elif IRSND_OCx == IRSND_XMEGA_OC1A
 171:irsnd.c       **** #    define IRSND_BIT_NUMBER                        4
 172:irsnd.c       **** #  elif IRSND_OCx == IRSND_XMEGA_OC1B
 173:irsnd.c       **** #    define IRSND_BIT_NUMBER                        5
 174:irsnd.c       **** #  else
 175:irsnd.c       **** #    error Wrong value for IRSND_OCx, choose IRSND_XMEGA_OC0A, IRSND_XMEGA_OC0B, IRSND_XMEGA_OC0C, 
 176:irsnd.c       **** #  endif // IRSND_OCx
 177:irsnd.c       **** 
 178:irsnd.c       **** #elif defined (PIC_C18)                                                 // Microchip C18 compiler
 179:irsnd.c       ****     //Nothing here to do here -> See irsndconfig.h
 180:irsnd.c       **** #elif defined (ARM_STM32)                                               // STM32
 181:irsnd.c       ****     //Nothing here to do here -> See irsndconfig.h
 182:irsnd.c       **** #elif defined (ARM_STM32_HAL)                                           // STM32 with Hal Library
 183:irsnd.c       ****     //Nothing here to do here -> See irsndconfig.h
 184:irsnd.c       **** #elif defined (__xtensa__)                                              // ESP8266
 185:irsnd.c       ****     //Nothing here to do here -> See irsndconfig.h
 186:irsnd.c       **** 
 187:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
 188:irsnd.c       ****  * Macro digitalPinHasPWM bothers PIC_C18 compiler, but why?
 189:irsnd.c       ****  *
 190:irsnd.c       ****  * #elif defined (TEENSY_ARM_CORTEX_M4)                                // Teensy3
 191:irsnd.c       ****  * #  if !digitalPinHasPWM(IRSND_PIN)
 192:irsnd.c       ****  * #    error need pin with PWM output.
 193:irsnd.c       ****  * #  endif
 194:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
 195:irsnd.c       ****  */
 196:irsnd.c       **** #else
 197:irsnd.c       **** #  if !defined (unix) && !defined (WIN32)
 198:irsnd.c       **** #    error mikrocontroller not defined, please fill in definitions here.
 199:irsnd.c       **** #  endif // unix, WIN32
 200:irsnd.c       **** #endif // __AVR...
 201:irsnd.c       **** 
 202:irsnd.c       **** #if defined(__AVR_XMEGA__)
 203:irsnd.c       **** #  define _CONCAT(a,b)                              a##b
 204:irsnd.c       **** #  define CONCAT(a,b)                               _CONCAT(a,b)
 205:irsnd.c       **** #  define IRSND_PORT                                IRSND_PORT_PRE.OUT
 206:irsnd.c       **** #  define IRSND_DDR                                 IRSND_PORT_PRE.DIR
 207:irsnd.c       **** #  define IRSND_PIN                                 IRSND_PORT_PRE.IN
 208:irsnd.c       **** #  define IRSND_BIT                                 IRSND_BIT_NUMBER
 209:irsnd.c       **** #elif defined(ATMEL_AVR)
 210:irsnd.c       **** #  define _CONCAT(a,b)                              a##b
 211:irsnd.c       **** #  define CONCAT(a,b)                               _CONCAT(a,b)
 212:irsnd.c       **** #  define IRSND_PORT                                CONCAT(PORT, IRSND_PORT_LETTER)
 213:irsnd.c       **** #  define IRSND_DDR                                 CONCAT(DDR, IRSND_PORT_LETTER)
 214:irsnd.c       **** #  define IRSND_BIT                                 IRSND_BIT_NUMBER
 215:irsnd.c       **** #endif
 216:irsnd.c       **** 
 217:irsnd.c       **** #if IRSND_SUPPORT_NIKON_PROTOCOL == 1
 218:irsnd.c       ****     typedef uint16_t    IRSND_PAUSE_LEN;
 219:irsnd.c       **** #else
 220:irsnd.c       ****     typedef uint8_t     IRSND_PAUSE_LEN;
 221:irsnd.c       **** #endif
 222:irsnd.c       **** 
 223:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
 224:irsnd.c       ****  *  IR timings
 225:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
 226:irsnd.c       ****  */
 227:irsnd.c       **** #define SIRCS_START_BIT_PULSE_LEN               (uint8_t)(F_INTERRUPTS * SIRCS_START_BIT_PULSE_TIME
 228:irsnd.c       **** #define SIRCS_START_BIT_PAUSE_LEN               (uint8_t)(F_INTERRUPTS * SIRCS_START_BIT_PAUSE_TIME
 229:irsnd.c       **** #define SIRCS_1_PULSE_LEN                       (uint8_t)(F_INTERRUPTS * SIRCS_1_PULSE_TIME + 0.5)
 230:irsnd.c       **** #define SIRCS_0_PULSE_LEN                       (uint8_t)(F_INTERRUPTS * SIRCS_0_PULSE_TIME + 0.5)
 231:irsnd.c       **** #define SIRCS_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * SIRCS_PAUSE_TIME + 0.5)
 232:irsnd.c       **** #define SIRCS_AUTO_REPETITION_PAUSE_LEN         (uint16_t)(F_INTERRUPTS * SIRCS_AUTO_REPETITION_PAU
 233:irsnd.c       **** #define SIRCS_FRAME_REPEAT_PAUSE_LEN            (uint16_t)(F_INTERRUPTS * SIRCS_FRAME_REPEAT_PAUSE_
 234:irsnd.c       **** 
 235:irsnd.c       **** #define NEC_START_BIT_PULSE_LEN                 (uint8_t)(F_INTERRUPTS * NEC_START_BIT_PULSE_TIME +
 236:irsnd.c       **** #define NEC_START_BIT_PAUSE_LEN                 (uint8_t)(F_INTERRUPTS * NEC_START_BIT_PAUSE_TIME +
 237:irsnd.c       **** #define NEC_REPEAT_START_BIT_PAUSE_LEN          (uint8_t)(F_INTERRUPTS * NEC_REPEAT_START_BIT_PAUSE
 238:irsnd.c       **** #define NEC_PULSE_LEN                           (uint8_t)(F_INTERRUPTS * NEC_PULSE_TIME + 0.5)
 239:irsnd.c       **** #define NEC_1_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * NEC_1_PAUSE_TIME + 0.5)
 240:irsnd.c       **** #define NEC_0_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * NEC_0_PAUSE_TIME + 0.5)
 241:irsnd.c       **** #define NEC_FRAME_REPEAT_PAUSE_LEN              (uint16_t)(F_INTERRUPTS * NEC_FRAME_REPEAT_PAUSE_TI
 242:irsnd.c       **** 
 243:irsnd.c       **** #define SAMSUNG_START_BIT_PULSE_LEN             (uint8_t)(F_INTERRUPTS * SAMSUNG_START_BIT_PULSE_TI
 244:irsnd.c       **** #define SAMSUNG_START_BIT_PAUSE_LEN             (uint8_t)(F_INTERRUPTS * SAMSUNG_START_BIT_PAUSE_TI
 245:irsnd.c       **** #define SAMSUNG_PULSE_LEN                       (uint8_t)(F_INTERRUPTS * SAMSUNG_PULSE_TIME + 0.5)
 246:irsnd.c       **** #define SAMSUNG_1_PAUSE_LEN                     (uint8_t)(F_INTERRUPTS * SAMSUNG_1_PAUSE_TIME + 0.5
 247:irsnd.c       **** #define SAMSUNG_0_PAUSE_LEN                     (uint8_t)(F_INTERRUPTS * SAMSUNG_0_PAUSE_TIME + 0.5
 248:irsnd.c       **** #define SAMSUNG_FRAME_REPEAT_PAUSE_LEN          (uint16_t)(F_INTERRUPTS * SAMSUNG_FRAME_REPEAT_PAUS
 249:irsnd.c       **** 
 250:irsnd.c       **** #define SAMSUNG32_AUTO_REPETITION_PAUSE_LEN     (uint16_t)(F_INTERRUPTS * SAMSUNG32_AUTO_REPETITION
 251:irsnd.c       **** #define SAMSUNG32_FRAME_REPEAT_PAUSE_LEN        (uint16_t)(F_INTERRUPTS * SAMSUNG32_FRAME_REPEAT_PA
 252:irsnd.c       **** 
 253:irsnd.c       **** #define SAMSUNG48_AUTO_REPETITION_PAUSE_LEN     (uint16_t)(F_INTERRUPTS * SAMSUNG48_AUTO_REPETITION
 254:irsnd.c       **** #define SAMSUNG48_FRAME_REPEAT_PAUSE_LEN        (uint16_t)(F_INTERRUPTS * SAMSUNG48_FRAME_REPEAT_PA
 255:irsnd.c       **** 
 256:irsnd.c       **** #define MATSUSHITA_START_BIT_PULSE_LEN          (uint8_t)(F_INTERRUPTS * MATSUSHITA_START_BIT_PULSE
 257:irsnd.c       **** #define MATSUSHITA_START_BIT_PAUSE_LEN          (uint8_t)(F_INTERRUPTS * MATSUSHITA_START_BIT_PAUSE
 258:irsnd.c       **** #define MATSUSHITA_PULSE_LEN                    (uint8_t)(F_INTERRUPTS * MATSUSHITA_PULSE_TIME + 0.
 259:irsnd.c       **** #define MATSUSHITA_1_PAUSE_LEN                  (uint8_t)(F_INTERRUPTS * MATSUSHITA_1_PAUSE_TIME + 
 260:irsnd.c       **** #define MATSUSHITA_0_PAUSE_LEN                  (uint8_t)(F_INTERRUPTS * MATSUSHITA_0_PAUSE_TIME + 
 261:irsnd.c       **** #define MATSUSHITA_FRAME_REPEAT_PAUSE_LEN       (uint16_t)(F_INTERRUPTS * MATSUSHITA_FRAME_REPEAT_P
 262:irsnd.c       **** 
 263:irsnd.c       **** #define KASEIKYO_START_BIT_PULSE_LEN            (uint8_t)(F_INTERRUPTS * KASEIKYO_START_BIT_PULSE_T
 264:irsnd.c       **** #define KASEIKYO_START_BIT_PAUSE_LEN            (uint8_t)(F_INTERRUPTS * KASEIKYO_START_BIT_PAUSE_T
 265:irsnd.c       **** #define KASEIKYO_PULSE_LEN                      (uint8_t)(F_INTERRUPTS * KASEIKYO_PULSE_TIME + 0.5)
 266:irsnd.c       **** #define KASEIKYO_1_PAUSE_LEN                    (uint8_t)(F_INTERRUPTS * KASEIKYO_1_PAUSE_TIME + 0.
 267:irsnd.c       **** #define KASEIKYO_0_PAUSE_LEN                    (uint8_t)(F_INTERRUPTS * KASEIKYO_0_PAUSE_TIME + 0.
 268:irsnd.c       **** #define KASEIKYO_AUTO_REPETITION_PAUSE_LEN      (uint16_t)(F_INTERRUPTS * KASEIKYO_AUTO_REPETITION_
 269:irsnd.c       **** #define KASEIKYO_FRAME_REPEAT_PAUSE_LEN         (uint16_t)(F_INTERRUPTS * KASEIKYO_FRAME_REPEAT_PAU
 270:irsnd.c       **** 
 271:irsnd.c       **** #define PANASONIC_START_BIT_PULSE_LEN           (uint8_t)(F_INTERRUPTS * PANASONIC_START_BIT_PULSE_
 272:irsnd.c       **** #define PANASONIC_START_BIT_PAUSE_LEN           (uint8_t)(F_INTERRUPTS * PANASONIC_START_BIT_PAUSE_
 273:irsnd.c       **** #define PANASONIC_PULSE_LEN                     (uint8_t)(F_INTERRUPTS * PANASONIC_PULSE_TIME + 0.5
 274:irsnd.c       **** #define PANASONIC_1_PAUSE_LEN                   (uint8_t)(F_INTERRUPTS * PANASONIC_1_PAUSE_TIME + 0
 275:irsnd.c       **** #define PANASONIC_0_PAUSE_LEN                   (uint8_t)(F_INTERRUPTS * PANASONIC_0_PAUSE_TIME + 0
 276:irsnd.c       **** #define PANASONIC_AUTO_REPETITION_PAUSE_LEN     (uint16_t)(F_INTERRUPTS * PANASONIC_AUTO_REPETITION
 277:irsnd.c       **** #define PANASONIC_FRAME_REPEAT_PAUSE_LEN        (uint16_t)(F_INTERRUPTS * PANASONIC_FRAME_REPEAT_PA
 278:irsnd.c       **** 
 279:irsnd.c       **** #define MITSU_HEAVY_START_BIT_PULSE_LEN         (uint8_t)(F_INTERRUPTS * MITSU_HEAVY_START_BIT_PULS
 280:irsnd.c       **** #define MITSU_HEAVY_START_BIT_PAUSE_LEN         (uint8_t)(F_INTERRUPTS * MITSU_HEAVY_START_BIT_PAUS
 281:irsnd.c       **** #define MITSU_HEAVY_PULSE_LEN                   (uint8_t)(F_INTERRUPTS * MITSU_HEAVY_PULSE_TIME + 0
 282:irsnd.c       **** #define MITSU_HEAVY_1_PAUSE_LEN                 (uint8_t)(F_INTERRUPTS * MITSU_HEAVY_1_PAUSE_TIME +
 283:irsnd.c       **** #define MITSU_HEAVY_0_PAUSE_LEN                 (uint8_t)(F_INTERRUPTS * MITSU_HEAVY_0_PAUSE_TIME +
 284:irsnd.c       **** #define MITSU_HEAVY_FRAME_REPEAT_PAUSE_LEN      (uint16_t)(F_INTERRUPTS * MITSU_HEAVY_FRAME_REPEAT_
 285:irsnd.c       **** 
 286:irsnd.c       **** #define RECS80_START_BIT_PULSE_LEN              (uint8_t)(F_INTERRUPTS * RECS80_START_BIT_PULSE_TIM
 287:irsnd.c       **** #define RECS80_START_BIT_PAUSE_LEN              (uint8_t)(F_INTERRUPTS * RECS80_START_BIT_PAUSE_TIM
 288:irsnd.c       **** #define RECS80_PULSE_LEN                        (uint8_t)(F_INTERRUPTS * RECS80_PULSE_TIME + 0.5)
 289:irsnd.c       **** #define RECS80_1_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * RECS80_1_PAUSE_TIME + 0.5)
 290:irsnd.c       **** #define RECS80_0_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * RECS80_0_PAUSE_TIME + 0.5)
 291:irsnd.c       **** #define RECS80_FRAME_REPEAT_PAUSE_LEN           (uint16_t)(F_INTERRUPTS * RECS80_FRAME_REPEAT_PAUSE
 292:irsnd.c       **** 
 293:irsnd.c       **** #define RC5_START_BIT_LEN                       (uint8_t)(F_INTERRUPTS * RC5_BIT_TIME + 0.5)
 294:irsnd.c       **** #define RC5_BIT_LEN                             (uint8_t)(F_INTERRUPTS * RC5_BIT_TIME + 0.5)
 295:irsnd.c       **** #define RC5_FRAME_REPEAT_PAUSE_LEN              (uint16_t)(F_INTERRUPTS * RC5_FRAME_REPEAT_PAUSE_TI
 296:irsnd.c       **** 
 297:irsnd.c       **** #define RC6_START_BIT_PULSE_LEN                 (uint8_t)(F_INTERRUPTS * RC6_START_BIT_PULSE_TIME +
 298:irsnd.c       **** #define RC6_START_BIT_PAUSE_LEN                 (uint8_t)(F_INTERRUPTS * RC6_START_BIT_PAUSE_TIME +
 299:irsnd.c       **** #define RC6_BIT_LEN                             (uint8_t)(F_INTERRUPTS * RC6_BIT_TIME + 0.5)
 300:irsnd.c       **** #define RC6_BIT_2_LEN                           (uint8_t)(F_INTERRUPTS * RC6_BIT_2_TIME + 0.5)
 301:irsnd.c       **** #define RC6_BIT_3_LEN                           (uint8_t)(F_INTERRUPTS * RC6_BIT_3_TIME + 0.5)
 302:irsnd.c       **** #define RC6_FRAME_REPEAT_PAUSE_LEN              (uint16_t)(F_INTERRUPTS * RC6_FRAME_REPEAT_PAUSE_TI
 303:irsnd.c       **** 
 304:irsnd.c       **** #define DENON_PULSE_LEN                         (uint8_t)(F_INTERRUPTS * DENON_PULSE_TIME + 0.5)
 305:irsnd.c       **** #define DENON_1_PAUSE_LEN                       (uint8_t)(F_INTERRUPTS * DENON_1_PAUSE_TIME + 0.5)
 306:irsnd.c       **** #define DENON_0_PAUSE_LEN                       (uint8_t)(F_INTERRUPTS * DENON_0_PAUSE_TIME + 0.5)
 307:irsnd.c       **** #define DENON_AUTO_REPETITION_PAUSE_LEN         (uint16_t)(F_INTERRUPTS * DENON_AUTO_REPETITION_PAU
 308:irsnd.c       **** #define DENON_FRAME_REPEAT_PAUSE_LEN            (uint16_t)(F_INTERRUPTS * DENON_FRAME_REPEAT_PAUSE_
 309:irsnd.c       **** 
 310:irsnd.c       **** #define THOMSON_PULSE_LEN                       (uint8_t)(F_INTERRUPTS * THOMSON_PULSE_TIME + 0.5)
 311:irsnd.c       **** #define THOMSON_1_PAUSE_LEN                     (uint8_t)(F_INTERRUPTS * THOMSON_1_PAUSE_TIME + 0.5
 312:irsnd.c       **** #define THOMSON_0_PAUSE_LEN                     (uint8_t)(F_INTERRUPTS * THOMSON_0_PAUSE_TIME + 0.5
 313:irsnd.c       **** #define THOMSON_AUTO_REPETITION_PAUSE_LEN       (uint16_t)(F_INTERRUPTS * THOMSON_AUTO_REPETITION_P
 314:irsnd.c       **** #define THOMSON_FRAME_REPEAT_PAUSE_LEN          (uint16_t)(F_INTERRUPTS * THOMSON_FRAME_REPEAT_PAUS
 315:irsnd.c       **** 
 316:irsnd.c       **** #define RECS80EXT_START_BIT_PULSE_LEN           (uint8_t)(F_INTERRUPTS * RECS80EXT_START_BIT_PULSE_
 317:irsnd.c       **** #define RECS80EXT_START_BIT_PAUSE_LEN           (uint8_t)(F_INTERRUPTS * RECS80EXT_START_BIT_PAUSE_
 318:irsnd.c       **** #define RECS80EXT_PULSE_LEN                     (uint8_t)(F_INTERRUPTS * RECS80EXT_PULSE_TIME + 0.5
 319:irsnd.c       **** #define RECS80EXT_1_PAUSE_LEN                   (uint8_t)(F_INTERRUPTS * RECS80EXT_1_PAUSE_TIME + 0
 320:irsnd.c       **** #define RECS80EXT_0_PAUSE_LEN                   (uint8_t)(F_INTERRUPTS * RECS80EXT_0_PAUSE_TIME + 0
 321:irsnd.c       **** #define RECS80EXT_FRAME_REPEAT_PAUSE_LEN        (uint16_t)(F_INTERRUPTS * RECS80EXT_FRAME_REPEAT_PA
 322:irsnd.c       **** 
 323:irsnd.c       **** #define TELEFUNKEN_START_BIT_PULSE_LEN          (uint8_t)(F_INTERRUPTS * TELEFUNKEN_START_BIT_PULSE
 324:irsnd.c       **** #define TELEFUNKEN_START_BIT_PAUSE_LEN          (uint8_t)(F_INTERRUPTS * TELEFUNKEN_START_BIT_PAUSE
 325:irsnd.c       **** #define TELEFUNKEN_PULSE_LEN                    (uint8_t)(F_INTERRUPTS * TELEFUNKEN_PULSE_TIME + 0.
 326:irsnd.c       **** #define TELEFUNKEN_1_PAUSE_LEN                  (uint8_t)(F_INTERRUPTS * TELEFUNKEN_1_PAUSE_TIME + 
 327:irsnd.c       **** #define TELEFUNKEN_0_PAUSE_LEN                  (uint8_t)(F_INTERRUPTS * TELEFUNKEN_0_PAUSE_TIME + 
 328:irsnd.c       **** #define TELEFUNKEN_AUTO_REPETITION_PAUSE_LEN    (uint16_t)(F_INTERRUPTS * TELEFUNKEN_AUTO_REPETITIO
 329:irsnd.c       **** #define TELEFUNKEN_FRAME_REPEAT_PAUSE_LEN       (uint16_t)(F_INTERRUPTS * TELEFUNKEN_FRAME_REPEAT_P
 330:irsnd.c       **** 
 331:irsnd.c       **** #define BOSE_START_BIT_PULSE_LEN                (uint8_t)(F_INTERRUPTS * BOSE_START_BIT_PULSE_TIME 
 332:irsnd.c       **** #define BOSE_START_BIT_PAUSE_LEN                (uint8_t)(F_INTERRUPTS * BOSE_START_BIT_PAUSE_TIME 
 333:irsnd.c       **** #define BOSE_PULSE_LEN                          (uint8_t)(F_INTERRUPTS * BOSE_PULSE_TIME + 0.5)
 334:irsnd.c       **** #define BOSE_1_PAUSE_LEN                        (uint8_t)(F_INTERRUPTS * BOSE_1_PAUSE_TIME + 0.5)
 335:irsnd.c       **** #define BOSE_0_PAUSE_LEN                        (uint8_t)(F_INTERRUPTS * BOSE_0_PAUSE_TIME + 0.5)
 336:irsnd.c       **** #define BOSE_AUTO_REPETITION_PAUSE_LEN          (uint16_t)(F_INTERRUPTS * BOSE_AUTO_REPETITION_PAUS
 337:irsnd.c       **** #define BOSE_FRAME_REPEAT_PAUSE_LEN             (uint16_t)(F_INTERRUPTS * BOSE_FRAME_REPEAT_PAUSE_T
 338:irsnd.c       **** 
 339:irsnd.c       **** #define NUBERT_START_BIT_PULSE_LEN              (uint8_t)(F_INTERRUPTS * NUBERT_START_BIT_PULSE_TIM
 340:irsnd.c       **** #define NUBERT_START_BIT_PAUSE_LEN              (uint8_t)(F_INTERRUPTS * NUBERT_START_BIT_PAUSE_TIM
 341:irsnd.c       **** #define NUBERT_1_PULSE_LEN                      (uint8_t)(F_INTERRUPTS * NUBERT_1_PULSE_TIME + 0.5)
 342:irsnd.c       **** #define NUBERT_1_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * NUBERT_1_PAUSE_TIME + 0.5)
 343:irsnd.c       **** #define NUBERT_0_PULSE_LEN                      (uint8_t)(F_INTERRUPTS * NUBERT_0_PULSE_TIME + 0.5)
 344:irsnd.c       **** #define NUBERT_0_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * NUBERT_0_PAUSE_TIME + 0.5)
 345:irsnd.c       **** #define NUBERT_AUTO_REPETITION_PAUSE_LEN        (uint16_t)(F_INTERRUPTS * NUBERT_AUTO_REPETITION_PA
 346:irsnd.c       **** #define NUBERT_FRAME_REPEAT_PAUSE_LEN           (uint16_t)(F_INTERRUPTS * NUBERT_FRAME_REPEAT_PAUSE
 347:irsnd.c       **** 
 348:irsnd.c       **** #define FAN_START_BIT_PULSE_LEN                 (uint8_t)(F_INTERRUPTS * FAN_START_BIT_PULSE_TIME +
 349:irsnd.c       **** #define FAN_START_BIT_PAUSE_LEN                 (uint8_t)(F_INTERRUPTS * FAN_START_BIT_PAUSE_TIME +
 350:irsnd.c       **** #define FAN_1_PULSE_LEN                         (uint8_t)(F_INTERRUPTS * FAN_1_PULSE_TIME + 0.5)
 351:irsnd.c       **** #define FAN_1_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * FAN_1_PAUSE_TIME + 0.5)
 352:irsnd.c       **** #define FAN_0_PULSE_LEN                         (uint8_t)(F_INTERRUPTS * FAN_0_PULSE_TIME + 0.5)
 353:irsnd.c       **** #define FAN_0_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * FAN_0_PAUSE_TIME + 0.5)
 354:irsnd.c       **** #define FAN_AUTO_REPETITION_PAUSE_LEN           (uint16_t)(F_INTERRUPTS * FAN_AUTO_REPETITION_PAUSE
 355:irsnd.c       **** #define FAN_FRAME_REPEAT_PAUSE_LEN              (uint16_t)(F_INTERRUPTS * FAN_FRAME_REPEAT_PAUSE_TI
 356:irsnd.c       **** 
 357:irsnd.c       **** #define SPEAKER_START_BIT_PULSE_LEN             (uint8_t)(F_INTERRUPTS * SPEAKER_START_BIT_PULSE_TI
 358:irsnd.c       **** #define SPEAKER_START_BIT_PAUSE_LEN             (uint8_t)(F_INTERRUPTS * SPEAKER_START_BIT_PAUSE_TI
 359:irsnd.c       **** #define SPEAKER_1_PULSE_LEN                     (uint8_t)(F_INTERRUPTS * SPEAKER_1_PULSE_TIME + 0.5
 360:irsnd.c       **** #define SPEAKER_1_PAUSE_LEN                     (uint8_t)(F_INTERRUPTS * SPEAKER_1_PAUSE_TIME + 0.5
 361:irsnd.c       **** #define SPEAKER_0_PULSE_LEN                     (uint8_t)(F_INTERRUPTS * SPEAKER_0_PULSE_TIME + 0.5
 362:irsnd.c       **** #define SPEAKER_0_PAUSE_LEN                     (uint8_t)(F_INTERRUPTS * SPEAKER_0_PAUSE_TIME + 0.5
 363:irsnd.c       **** #define SPEAKER_AUTO_REPETITION_PAUSE_LEN       (uint16_t)(F_INTERRUPTS * SPEAKER_AUTO_REPETITION_P
 364:irsnd.c       **** #define SPEAKER_FRAME_REPEAT_PAUSE_LEN          (uint16_t)(F_INTERRUPTS * SPEAKER_FRAME_REPEAT_PAUS
 365:irsnd.c       **** 
 366:irsnd.c       **** #define BANG_OLUFSEN_START_BIT1_PULSE_LEN       (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_START_BIT1_PU
 367:irsnd.c       **** #define BANG_OLUFSEN_START_BIT1_PAUSE_LEN       (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_START_BIT1_PA
 368:irsnd.c       **** #define BANG_OLUFSEN_START_BIT2_PULSE_LEN       (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_START_BIT2_PU
 369:irsnd.c       **** #define BANG_OLUFSEN_START_BIT2_PAUSE_LEN       (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_START_BIT2_PA
 370:irsnd.c       **** #define BANG_OLUFSEN_START_BIT3_PULSE_LEN       (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_START_BIT3_PU
 371:irsnd.c       **** #define BANG_OLUFSEN_START_BIT3_PAUSE_LEN       (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_START_BIT3_PA
 372:irsnd.c       **** #define BANG_OLUFSEN_PULSE_LEN                  (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_PULSE_TIME + 
 373:irsnd.c       **** #define BANG_OLUFSEN_1_PAUSE_LEN                (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_1_PAUSE_TIME 
 374:irsnd.c       **** #define BANG_OLUFSEN_0_PAUSE_LEN                (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_0_PAUSE_TIME 
 375:irsnd.c       **** #define BANG_OLUFSEN_R_PAUSE_LEN                (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_R_PAUSE_TIME 
 376:irsnd.c       **** #define BANG_OLUFSEN_TRAILER_BIT_PAUSE_LEN      (uint8_t)(F_INTERRUPTS * BANG_OLUFSEN_TRAILER_BIT_P
 377:irsnd.c       **** #define BANG_OLUFSEN_FRAME_REPEAT_PAUSE_LEN     (uint16_t)(F_INTERRUPTS * BANG_OLUFSEN_FRAME_REPEAT
 378:irsnd.c       **** 
 379:irsnd.c       **** #define GRUNDIG_NOKIA_IR60_PRE_PAUSE_LEN        (uint8_t)(F_INTERRUPTS * GRUNDIG_NOKIA_IR60_PRE_PAU
 380:irsnd.c       **** #define GRUNDIG_NOKIA_IR60_BIT_LEN              (uint8_t)(F_INTERRUPTS * GRUNDIG_NOKIA_IR60_BIT_TIM
 381:irsnd.c       **** #define GRUNDIG_AUTO_REPETITION_PAUSE_LEN       (uint16_t)(F_INTERRUPTS * GRUNDIG_AUTO_REPETITION_P
 382:irsnd.c       **** #define NOKIA_AUTO_REPETITION_PAUSE_LEN         (uint16_t)(F_INTERRUPTS * NOKIA_AUTO_REPETITION_PAU
 383:irsnd.c       **** #define GRUNDIG_NOKIA_IR60_FRAME_REPEAT_PAUSE_LEN (uint16_t)(F_INTERRUPTS * GRUNDIG_NOKIA_IR60_FRAM
 384:irsnd.c       **** 
 385:irsnd.c       **** #define IR60_AUTO_REPETITION_PAUSE_LEN          (uint16_t)(F_INTERRUPTS * IR60_AUTO_REPETITION_PAUS
 386:irsnd.c       **** 
 387:irsnd.c       **** #define SIEMENS_START_BIT_LEN                   (uint8_t)(F_INTERRUPTS * SIEMENS_OR_RUWIDO_START_BI
 388:irsnd.c       **** #define SIEMENS_BIT_LEN                         (uint8_t)(F_INTERRUPTS * SIEMENS_OR_RUWIDO_BIT_PULS
 389:irsnd.c       **** #define SIEMENS_FRAME_REPEAT_PAUSE_LEN          (uint16_t)(F_INTERRUPTS * SIEMENS_OR_RUWIDO_FRAME_R
 390:irsnd.c       **** 
 391:irsnd.c       **** #define RUWIDO_START_BIT_PULSE_LEN              (uint8_t)(F_INTERRUPTS * SIEMENS_OR_RUWIDO_START_BI
 392:irsnd.c       **** #define RUWIDO_START_BIT_PAUSE_LEN              (uint8_t)(F_INTERRUPTS * SIEMENS_OR_RUWIDO_START_BI
 393:irsnd.c       **** #define RUWIDO_BIT_PULSE_LEN                    (uint8_t)(F_INTERRUPTS * SIEMENS_OR_RUWIDO_BIT_PULS
 394:irsnd.c       **** #define RUWIDO_BIT_PAUSE_LEN                    (uint8_t)(F_INTERRUPTS * SIEMENS_OR_RUWIDO_BIT_PAUS
 395:irsnd.c       **** #define RUWIDO_FRAME_REPEAT_PAUSE_LEN           (uint16_t)(F_INTERRUPTS * SIEMENS_OR_RUWIDO_FRAME_R
 396:irsnd.c       **** 
 397:irsnd.c       **** #ifdef PIC_C18                                  // PIC C18
 398:irsnd.c       **** #  define IRSND_FREQ_TYPE                       uint8_t
 399:irsnd.c       **** #  define IRSND_FREQ_30_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 30000  / 2 / Pre_Scaler
 400:irsnd.c       **** #  define IRSND_FREQ_32_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 32000  / 2 / Pre_Scaler
 401:irsnd.c       **** #  define IRSND_FREQ_36_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 36000  / 2 / Pre_Scaler
 402:irsnd.c       **** #  define IRSND_FREQ_38_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 38000  / 2 / Pre_Scaler
 403:irsnd.c       **** #  define IRSND_FREQ_40_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 40000  / 2 / Pre_Scaler
 404:irsnd.c       **** #  define IRSND_FREQ_56_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 56000  / 2 / Pre_Scaler
 405:irsnd.c       **** #  define IRSND_FREQ_455_KHZ                    (IRSND_FREQ_TYPE) ((F_CPU / 455000 / 2 / Pre_Scaler
 406:irsnd.c       **** #elif defined (ARM_STM32)                       // STM32
 407:irsnd.c       **** #  define IRSND_FREQ_TYPE                       uint32_t
 408:irsnd.c       **** #  define IRSND_FREQ_30_KHZ                     (IRSND_FREQ_TYPE) (30000)
 409:irsnd.c       **** #  define IRSND_FREQ_32_KHZ                     (IRSND_FREQ_TYPE) (32000)
 410:irsnd.c       **** #  define IRSND_FREQ_36_KHZ                     (IRSND_FREQ_TYPE) (36000)
 411:irsnd.c       **** #  define IRSND_FREQ_38_KHZ                     (IRSND_FREQ_TYPE) (38000)
 412:irsnd.c       **** #  define IRSND_FREQ_40_KHZ                     (IRSND_FREQ_TYPE) (40000)
 413:irsnd.c       **** #  define IRSND_FREQ_56_KHZ                     (IRSND_FREQ_TYPE) (56000)
 414:irsnd.c       **** #  define IRSND_FREQ_455_KHZ                    (IRSND_FREQ_TYPE) (455000)
 415:irsnd.c       **** #elif defined (ARM_STM32_HAL)                   // STM32 with Hal Library
 416:irsnd.c       **** #  define IRSND_FREQ_TYPE                       uint32_t
 417:irsnd.c       **** #  define IRSND_FREQ_30_KHZ                     (IRSND_FREQ_TYPE) (30000)
 418:irsnd.c       **** #  define IRSND_FREQ_32_KHZ                     (IRSND_FREQ_TYPE) (32000)
 419:irsnd.c       **** #  define IRSND_FREQ_36_KHZ                     (IRSND_FREQ_TYPE) (36000)
 420:irsnd.c       **** #  define IRSND_FREQ_38_KHZ                     (IRSND_FREQ_TYPE) (38000)
 421:irsnd.c       **** #  define IRSND_FREQ_40_KHZ                     (IRSND_FREQ_TYPE) (40000)
 422:irsnd.c       **** #  define IRSND_FREQ_56_KHZ                     (IRSND_FREQ_TYPE) (56000)
 423:irsnd.c       **** #  define IRSND_FREQ_455_KHZ                    (IRSND_FREQ_TYPE) (455000)
 424:irsnd.c       **** #elif defined (TEENSY_ARM_CORTEX_M4)            // TEENSY
 425:irsnd.c       **** #  define IRSND_FREQ_TYPE                       float
 426:irsnd.c       **** #  define IRSND_FREQ_30_KHZ                     (IRSND_FREQ_TYPE) (30000)
 427:irsnd.c       **** #  define IRSND_FREQ_32_KHZ                     (IRSND_FREQ_TYPE) (32000)
 428:irsnd.c       **** #  define IRSND_FREQ_36_KHZ                     (IRSND_FREQ_TYPE) (36000)
 429:irsnd.c       **** #  define IRSND_FREQ_38_KHZ                     (IRSND_FREQ_TYPE) (38000)
 430:irsnd.c       **** #  define IRSND_FREQ_40_KHZ                     (IRSND_FREQ_TYPE) (40000)
 431:irsnd.c       **** #  define IRSND_FREQ_56_KHZ                     (IRSND_FREQ_TYPE) (56000)
 432:irsnd.c       **** #  define IRSND_FREQ_455_KHZ                    (IRSND_FREQ_TYPE) (455000)
 433:irsnd.c       **** #elif defined (__xtensa__)                      // ESP8266
 434:irsnd.c       **** #  define IRSND_FREQ_TYPE                       float
 435:irsnd.c       **** #  define IRSND_FREQ_30_KHZ                     (IRSND_FREQ_TYPE) (30000)
 436:irsnd.c       **** #  define IRSND_FREQ_32_KHZ                     (IRSND_FREQ_TYPE) (32000)
 437:irsnd.c       **** #  define IRSND_FREQ_36_KHZ                     (IRSND_FREQ_TYPE) (36000)
 438:irsnd.c       **** #  define IRSND_FREQ_38_KHZ                     (IRSND_FREQ_TYPE) (38000)
 439:irsnd.c       **** #  define IRSND_FREQ_40_KHZ                     (IRSND_FREQ_TYPE) (40000)
 440:irsnd.c       **** #  define IRSND_FREQ_56_KHZ                     (IRSND_FREQ_TYPE) (56000)
 441:irsnd.c       **** #  define IRSND_FREQ_455_KHZ                    (IRSND_FREQ_TYPE) (455000)
 442:irsnd.c       **** #else                                           // AVR
 443:irsnd.c       **** #  if F_CPU >= 16000000L
 444:irsnd.c       **** #    define AVR_PRESCALER                       8
 445:irsnd.c       **** #  else
 446:irsnd.c       **** #    define AVR_PRESCALER                       1
 447:irsnd.c       **** #  endif
 448:irsnd.c       **** #  define IRSND_FREQ_TYPE                       uint8_t
 449:irsnd.c       **** #  define IRSND_FREQ_30_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 30000 / AVR_PRESCALER /
 450:irsnd.c       **** #  define IRSND_FREQ_32_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 32000 / AVR_PRESCALER /
 451:irsnd.c       **** #  define IRSND_FREQ_36_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 36000 / AVR_PRESCALER /
 452:irsnd.c       **** #  define IRSND_FREQ_38_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 38000 / AVR_PRESCALER /
 453:irsnd.c       **** #  define IRSND_FREQ_40_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 40000 / AVR_PRESCALER /
 454:irsnd.c       **** #  define IRSND_FREQ_56_KHZ                     (IRSND_FREQ_TYPE) ((F_CPU / 56000 / AVR_PRESCALER /
 455:irsnd.c       **** #  define IRSND_FREQ_455_KHZ                    (IRSND_FREQ_TYPE) ((F_CPU / 455000 / AVR_PRESCALER 
 456:irsnd.c       **** #endif
 457:irsnd.c       **** 
 458:irsnd.c       **** #define FDC_START_BIT_PULSE_LEN                 (uint8_t)(F_INTERRUPTS * FDC_START_BIT_PULSE_TIME +
 459:irsnd.c       **** #define FDC_START_BIT_PAUSE_LEN                 (uint8_t)(F_INTERRUPTS * FDC_START_BIT_PAUSE_TIME +
 460:irsnd.c       **** #define FDC_PULSE_LEN                           (uint8_t)(F_INTERRUPTS * FDC_PULSE_TIME + 0.5)
 461:irsnd.c       **** #define FDC_1_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * FDC_1_PAUSE_TIME + 0.5)
 462:irsnd.c       **** #define FDC_0_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * FDC_0_PAUSE_TIME + 0.5)
 463:irsnd.c       **** #define FDC_FRAME_REPEAT_PAUSE_LEN              (uint16_t)(F_INTERRUPTS * FDC_FRAME_REPEAT_PAUSE_TI
 464:irsnd.c       **** 
 465:irsnd.c       **** #define RCCAR_START_BIT_PULSE_LEN               (uint8_t)(F_INTERRUPTS * RCCAR_START_BIT_PULSE_TIME
 466:irsnd.c       **** #define RCCAR_START_BIT_PAUSE_LEN               (uint8_t)(F_INTERRUPTS * RCCAR_START_BIT_PAUSE_TIME
 467:irsnd.c       **** #define RCCAR_PULSE_LEN                         (uint8_t)(F_INTERRUPTS * RCCAR_PULSE_TIME + 0.5)
 468:irsnd.c       **** #define RCCAR_1_PAUSE_LEN                       (uint8_t)(F_INTERRUPTS * RCCAR_1_PAUSE_TIME + 0.5)
 469:irsnd.c       **** #define RCCAR_0_PAUSE_LEN                       (uint8_t)(F_INTERRUPTS * RCCAR_0_PAUSE_TIME + 0.5)
 470:irsnd.c       **** #define RCCAR_FRAME_REPEAT_PAUSE_LEN            (uint16_t)(F_INTERRUPTS * RCCAR_FRAME_REPEAT_PAUSE_
 471:irsnd.c       **** 
 472:irsnd.c       **** #define JVC_START_BIT_PULSE_LEN                 (uint8_t)(F_INTERRUPTS * JVC_START_BIT_PULSE_TIME +
 473:irsnd.c       **** #define JVC_START_BIT_PAUSE_LEN                 (uint8_t)(F_INTERRUPTS * JVC_START_BIT_PAUSE_TIME +
 474:irsnd.c       **** #define JVC_REPEAT_START_BIT_PAUSE_LEN          (uint8_t)(F_INTERRUPTS * JVC_REPEAT_START_BIT_PAUSE
 475:irsnd.c       **** #define JVC_PULSE_LEN                           (uint8_t)(F_INTERRUPTS * JVC_PULSE_TIME + 0.5)
 476:irsnd.c       **** #define JVC_1_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * JVC_1_PAUSE_TIME + 0.5)
 477:irsnd.c       **** #define JVC_0_PAUSE_LEN                         (uint8_t)(F_INTERRUPTS * JVC_0_PAUSE_TIME + 0.5)
 478:irsnd.c       **** #define JVC_FRAME_REPEAT_PAUSE_LEN              (uint16_t)(F_INTERRUPTS * JVC_FRAME_REPEAT_PAUSE_TI
 479:irsnd.c       **** 
 480:irsnd.c       **** #define NIKON_START_BIT_PULSE_LEN               (uint8_t)(F_INTERRUPTS * NIKON_START_BIT_PULSE_TIME
 481:irsnd.c       **** #define NIKON_START_BIT_PAUSE_LEN               (uint16_t)(F_INTERRUPTS * NIKON_START_BIT_PAUSE_TIM
 482:irsnd.c       **** #define NIKON_REPEAT_START_BIT_PAUSE_LEN        (uint8_t)(F_INTERRUPTS * NIKON_REPEAT_START_BIT_PAU
 483:irsnd.c       **** #define NIKON_PULSE_LEN                         (uint8_t)(F_INTERRUPTS * NIKON_PULSE_TIME + 0.5)
 484:irsnd.c       **** #define NIKON_1_PAUSE_LEN                       (uint8_t)(F_INTERRUPTS * NIKON_1_PAUSE_TIME + 0.5)
 485:irsnd.c       **** #define NIKON_0_PAUSE_LEN                       (uint8_t)(F_INTERRUPTS * NIKON_0_PAUSE_TIME + 0.5)
 486:irsnd.c       **** #define NIKON_FRAME_REPEAT_PAUSE_LEN            (uint16_t)(F_INTERRUPTS * NIKON_FRAME_REPEAT_PAUSE_
 487:irsnd.c       **** 
 488:irsnd.c       **** #define LEGO_START_BIT_PULSE_LEN                (uint8_t)(F_INTERRUPTS * LEGO_START_BIT_PULSE_TIME 
 489:irsnd.c       **** #define LEGO_START_BIT_PAUSE_LEN                (uint8_t)(F_INTERRUPTS * LEGO_START_BIT_PAUSE_TIME 
 490:irsnd.c       **** #define LEGO_REPEAT_START_BIT_PAUSE_LEN         (uint8_t)(F_INTERRUPTS * LEGO_REPEAT_START_BIT_PAUS
 491:irsnd.c       **** #define LEGO_PULSE_LEN                          (uint8_t)(F_INTERRUPTS * LEGO_PULSE_TIME + 0.5)
 492:irsnd.c       **** #define LEGO_1_PAUSE_LEN                        (uint8_t)(F_INTERRUPTS * LEGO_1_PAUSE_TIME + 0.5)
 493:irsnd.c       **** #define LEGO_0_PAUSE_LEN                        (uint8_t)(F_INTERRUPTS * LEGO_0_PAUSE_TIME + 0.5)
 494:irsnd.c       **** #define LEGO_FRAME_REPEAT_PAUSE_LEN             (uint16_t)(F_INTERRUPTS * LEGO_FRAME_REPEAT_PAUSE_T
 495:irsnd.c       **** 
 496:irsnd.c       **** #define IRMP16_START_BIT_PULSE_LEN              (uint8_t)(F_INTERRUPTS * IRMP16_START_BIT_PULSE_TIM
 497:irsnd.c       **** #define IRMP16_START_BIT_PAUSE_LEN              (uint8_t)(F_INTERRUPTS * IRMP16_START_BIT_PAUSE_TIM
 498:irsnd.c       **** #define IRMP16_REPEAT_START_BIT_PAUSE_LEN       (uint8_t)(F_INTERRUPTS * IRMP16_REPEAT_START_BIT_PA
 499:irsnd.c       **** #define IRMP16_PULSE_LEN                        (uint8_t)(F_INTERRUPTS * IRMP16_PULSE_TIME + 0.5)
 500:irsnd.c       **** #define IRMP16_1_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * IRMP16_1_PAUSE_TIME + 0.5)
 501:irsnd.c       **** #define IRMP16_0_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * IRMP16_0_PAUSE_TIME + 0.5)
 502:irsnd.c       **** #define IRMP16_FRAME_REPEAT_PAUSE_LEN           (uint16_t)(F_INTERRUPTS * IRMP16_FRAME_REPEAT_PAUSE
 503:irsnd.c       **** 
 504:irsnd.c       **** #define A1TVBOX_START_BIT_PULSE_LEN             (uint8_t)(F_INTERRUPTS * A1TVBOX_START_BIT_PULSE_TI
 505:irsnd.c       **** #define A1TVBOX_START_BIT_PAUSE_LEN             (uint8_t)(F_INTERRUPTS * A1TVBOX_START_BIT_PAUSE_TI
 506:irsnd.c       **** #define A1TVBOX_BIT_PULSE_LEN                   (uint8_t)(F_INTERRUPTS * A1TVBOX_BIT_PULSE_TIME + 0
 507:irsnd.c       **** #define A1TVBOX_BIT_PAUSE_LEN                   (uint8_t)(F_INTERRUPTS * A1TVBOX_BIT_PAUSE_TIME + 0
 508:irsnd.c       **** #define A1TVBOX_FRAME_REPEAT_PAUSE_LEN          (uint16_t)(F_INTERRUPTS * A1TVBOX_FRAME_REPEAT_PAUS
 509:irsnd.c       **** #define A1TVBOX_FRAME_REPEAT_PAUSE_LEN          (uint16_t)(F_INTERRUPTS * A1TVBOX_FRAME_REPEAT_PAUS
 510:irsnd.c       **** 
 511:irsnd.c       **** #define ROOMBA_START_BIT_PULSE_LEN              (uint8_t)(F_INTERRUPTS * ROOMBA_START_BIT_PULSE_TIM
 512:irsnd.c       **** #define ROOMBA_START_BIT_PAUSE_LEN              (uint8_t)(F_INTERRUPTS * ROOMBA_START_BIT_PAUSE_TIM
 513:irsnd.c       **** #define ROOMBA_1_PULSE_LEN                      (uint8_t)(F_INTERRUPTS * ROOMBA_1_PULSE_TIME + 0.5)
 514:irsnd.c       **** #define ROOMBA_0_PULSE_LEN                      (uint8_t)(F_INTERRUPTS * ROOMBA_0_PULSE_TIME + 0.5)
 515:irsnd.c       **** #define ROOMBA_1_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * ROOMBA_1_PAUSE_TIME + 0.5)
 516:irsnd.c       **** #define ROOMBA_0_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * ROOMBA_0_PAUSE_TIME + 0.5)
 517:irsnd.c       **** #define ROOMBA_FRAME_REPEAT_PAUSE_LEN           (uint16_t)(F_INTERRUPTS * ROOMBA_FRAME_REPEAT_PAUSE
 518:irsnd.c       **** 
 519:irsnd.c       **** #define PENTAX_START_BIT_PULSE_LEN              (uint8_t)(F_INTERRUPTS * PENTAX_START_BIT_PULSE_TIM
 520:irsnd.c       **** #define PENTAX_START_BIT_PAUSE_LEN              (uint8_t)(F_INTERRUPTS * PENTAX_START_BIT_PAUSE_TIM
 521:irsnd.c       **** #define PENTAX_REPEAT_START_BIT_PAUSE_LEN       (uint8_t)(F_INTERRUPTS * PENTAX_REPEAT_START_BIT_PA
 522:irsnd.c       **** #define PENTAX_PULSE_LEN                        (uint8_t)(F_INTERRUPTS * PENTAX_PULSE_TIME + 0.5)
 523:irsnd.c       **** #define PENTAX_1_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * PENTAX_1_PAUSE_TIME + 0.5)
 524:irsnd.c       **** #define PENTAX_0_PAUSE_LEN                      (uint8_t)(F_INTERRUPTS * PENTAX_0_PAUSE_TIME + 0.5)
 525:irsnd.c       **** #define PENTAX_FRAME_REPEAT_PAUSE_LEN           (uint16_t)(F_INTERRUPTS * PENTAX_FRAME_REPEAT_PAUSE
 526:irsnd.c       **** 
 527:irsnd.c       **** #define ACP24_START_BIT_PULSE_LEN               (uint8_t)(F_INTERRUPTS * ACP24_START_BIT_PULSE_TIME
 528:irsnd.c       **** #define ACP24_START_BIT_PAUSE_LEN               (uint8_t)(F_INTERRUPTS * ACP24_START_BIT_PAUSE_TIME
 529:irsnd.c       **** #define ACP24_REPEAT_START_BIT_PAUSE_LEN        (uint8_t)(F_INTERRUPTS * ACP24_REPEAT_START_BIT_PAU
 530:irsnd.c       **** #define ACP24_PULSE_LEN                         (uint8_t)(F_INTERRUPTS * ACP24_PULSE_TIME + 0.5)
 531:irsnd.c       **** #define ACP24_1_PAUSE_LEN                       (uint8_t)(F_INTERRUPTS * ACP24_1_PAUSE_TIME + 0.5)
 532:irsnd.c       **** #define ACP24_0_PAUSE_LEN                       (uint8_t)(F_INTERRUPTS * ACP24_0_PAUSE_TIME + 0.5)
 533:irsnd.c       **** #define ACP24_FRAME_REPEAT_PAUSE_LEN            (uint16_t)(F_INTERRUPTS * ACP24_FRAME_REPEAT_PAUSE_
 534:irsnd.c       **** 
 535:irsnd.c       **** static volatile uint8_t                         irsnd_busy = 0;
 536:irsnd.c       **** static volatile uint8_t                         irsnd_protocol = 0;
 537:irsnd.c       **** static volatile uint8_t                         irsnd_buffer[11] = {0};
 538:irsnd.c       **** static volatile uint8_t                         irsnd_repeat = 0;
 539:irsnd.c       **** static volatile uint8_t                         irsnd_is_on = FALSE;
 540:irsnd.c       **** 
 541:irsnd.c       **** #if IRSND_USE_CALLBACK == 1
 542:irsnd.c       **** static void                                     (*irsnd_callback_ptr) (uint8_t);
 543:irsnd.c       **** #endif // IRSND_USE_CALLBACK == 1
 544:irsnd.c       **** 
 545:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
 546:irsnd.c       ****  *  Switch PWM on
 547:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
 548:irsnd.c       ****  */
 549:irsnd.c       **** static void
 550:irsnd.c       **** irsnd_on (void)
 551:irsnd.c       **** {
 130               	.LM0:
 131               	.LFBB1:
 132               	/* prologue: function */
 133               	/* frame size = 0 */
 134               	/* stack size = 0 */
 135               	.L__stack_usage = 0
 552:irsnd.c       ****     if (! irsnd_is_on)
 137               	.LM1:
 138 0000 8091 0000 		lds r24,irsnd_is_on
 140               	.LM2:
 141 0004 8111      		cpse r24,__zero_reg__
 142 0006 00C0      		rjmp .L1
 143               	.LBB9:
 144               	.LBB10:
 553:irsnd.c       ****     {
 554:irsnd.c       **** #ifndef ANALYZE
 555:irsnd.c       **** #  if defined(PIC_C18)                                  // PIC C18
 556:irsnd.c       ****         PWMon();
 557:irsnd.c       ****         // IRSND_PIN = 0; // output mode -> enable PWM outout pin (0=PWM on, 1=PWM off)
 558:irsnd.c       **** 
 559:irsnd.c       **** #  elif defined (ARM_STM32)                             // STM32
 560:irsnd.c       ****         TIM_SelectOCxM(IRSND_TIMER, IRSND_TIMER_CHANNEL, TIM_OCMode_PWM1); // enable PWM as OC-mode
 561:irsnd.c       ****         TIM_CCxCmd(IRSND_TIMER, IRSND_TIMER_CHANNEL, TIM_CCx_Enable);      // enable OC-output (is 
 562:irsnd.c       ****         TIM_Cmd(IRSND_TIMER, ENABLE);                   // enable counter
 563:irsnd.c       **** 
 564:irsnd.c       **** #  elif defined (ARM_STM32_HAL)                         // STM32 with Hal Library
 565:irsnd.c       ****         HAL_TIM_PWM_Start(&IRSND_TIMER_HANDLER, IRSND_TIMER_CHANNEL_NUMBER);
 566:irsnd.c       **** 
 567:irsnd.c       **** #  elif defined (TEENSY_ARM_CORTEX_M4)                  // TEENSY
 568:irsnd.c       ****         analogWrite(IRSND_PIN, 33 * 255 / 100);         // pwm 33%
 569:irsnd.c       **** 
 570:irsnd.c       **** #  elif defined (__xtensa__)                            // ESP8266 (Arduino)
 571:irsnd.c       ****         analogWrite(IRSND_PIN, 33 * 1023 / 100);        // pwm 33%
 572:irsnd.c       **** 
 573:irsnd.c       **** #  elif defined (__AVR_XMEGA__)
 574:irsnd.c       **** #    if (IRSND_OCx == IRSND_XMEGA_OC0A)                                 // use OC0A
 575:irsnd.c       ****                 XMEGA_Timer.CTRLB |= (1<<TC0_CCAEN_bp);                 // Compare A
 576:irsnd.c       **** #    elif (IRSND_OCx == IRSND_XMEGA_OC0B)                               // use OC0B
 577:irsnd.c       ****                 XMEGA_Timer.CTRLB |= (1<<TC0_CCBEN_bp);                 // Compare B
 578:irsnd.c       **** #    elif IRSND_OCx == IRSND_XMEGA_OC0C                                 // use OC0C
 579:irsnd.c       ****                 XMEGA_Timer.CTRLB |= (1<<TC0_CCCEN_bp);                 // Compare C
 580:irsnd.c       **** #    elif IRSND_OCx == IRSND_XMEGA_OC0D                                 // use OC0D
 581:irsnd.c       ****                 XMEGA_Timer.CTRLB |= (1<<TC0_CCDEN_bp);                 // Compare D
 582:irsnd.c       **** #    elif IRSND_OCx == IRSND_XMEGA_OC1A                                 // use OC1A
 583:irsnd.c       ****                 XMEGA_Timer.CTRLB |= (1<<TC1_CCAEN_bp);                 // Compare A
 584:irsnd.c       **** #    elif IRSND_OCx == IRSND_XMEGA_OC1B                                 // use OC1B
 585:irsnd.c       ****                 XMEGA_Timer.CTRLB |= (1<<TC1_CCBEN_bp);                 // Compare B
 586:irsnd.c       **** #    else
 587:irsnd.c       **** #       error wrong value of IRSND_OCx
 588:irsnd.c       **** #    endif // IRSND_OCx
 589:irsnd.c       **** 
 590:irsnd.c       **** #  else                                                 // AVR
 591:irsnd.c       **** #    if   IRSND_OCx == IRSND_OC2                        // use OC2
 592:irsnd.c       ****         TCCR2 |= (1<<COM20)|(1<<WGM21);                 // toggle OC2 on compare match,  clear Time
 593:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC2A                       // use OC2A
 594:irsnd.c       ****         TCCR2A |= (1<<COM2A0)|(1<<WGM21);               // toggle OC2A on compare match, clear Time
 595:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC2B                       // use OC2B
 596:irsnd.c       ****         TCCR2A |= (1<<COM2B0)|(1<<WGM21);               // toggle OC2B on compare match, clear Time
 597:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0                        // use OC0
 598:irsnd.c       ****         TCCR0 |= (1<<COM00)|(1<<WGM01);                 // toggle OC0 on compare match,  clear Time
 599:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0A                       // use OC0A
 600:irsnd.c       ****         TCCR0A |= (1<<COM0A0)|(1<<WGM01);               // toggle OC0A on compare match, clear Time
 146               	.LM3:
 147 0008 80B7      		in r24,0x30
 148 000a 8264      		ori r24,lo8(66)
 149 000c 80BF      		out 0x30,r24
 601:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0B                       // use OC0B
 602:irsnd.c       ****         TCCR0A |= (1<<COM0B0)|(1<<WGM01);               // toggle OC0B on compare match, clear Time
 603:irsnd.c       **** #    else
 604:irsnd.c       **** #      error wrong value of IRSND_OCx
 605:irsnd.c       **** #    endif // IRSND_OCx
 606:irsnd.c       **** #  endif // C18
 607:irsnd.c       **** #endif // ANALYZE
 608:irsnd.c       **** 
 609:irsnd.c       **** #if IRSND_USE_CALLBACK == 1
 610:irsnd.c       ****         if (irsnd_callback_ptr)
 611:irsnd.c       ****         {
 612:irsnd.c       ****             (*irsnd_callback_ptr) (TRUE);
 613:irsnd.c       ****         }
 614:irsnd.c       **** #endif // IRSND_USE_CALLBACK == 1
 615:irsnd.c       **** 
 616:irsnd.c       ****         irsnd_is_on = TRUE;
 151               	.LM4:
 152 000e 81E0      		ldi r24,lo8(1)
 153 0010 8093 0000 		sts irsnd_is_on,r24
 154               	.L1:
 155               	/* epilogue start */
 156               	.LBE10:
 157               	.LBE9:
 617:irsnd.c       ****     }
 618:irsnd.c       **** }
 159               	.LM5:
 160 0014 0895      		ret
 162               	.Lscope1:
 164               		.stabd	78,0,0
 167               	irsnd_off:
 168               		.stabd	46,0,0
 619:irsnd.c       **** 
 620:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
 621:irsnd.c       ****  *  Switch PWM off
 622:irsnd.c       ****  *  @details  Switches PWM off
 623:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
 624:irsnd.c       ****  */
 625:irsnd.c       **** static void
 626:irsnd.c       **** irsnd_off (void)
 627:irsnd.c       **** {
 170               	.LM6:
 171               	.LFBB2:
 172               	/* prologue: function */
 173               	/* frame size = 0 */
 174               	/* stack size = 0 */
 175               	.L__stack_usage = 0
 628:irsnd.c       ****     if (irsnd_is_on)
 177               	.LM7:
 178 0016 8091 0000 		lds r24,irsnd_is_on
 180               	.LM8:
 181 001a 8823      		tst r24
 182 001c 01F0      		breq .L3
 183               	.LBB13:
 184               	.LBB14:
 629:irsnd.c       ****     {
 630:irsnd.c       **** #ifndef ANALYZE
 631:irsnd.c       **** 
 632:irsnd.c       **** #  if defined(PIC_C18)                                                                  // PIC C18
 633:irsnd.c       ****         PWMoff();
 634:irsnd.c       ****         // IRSND_PIN = 1; //input mode -> disbale PWM output pin (0=PWM on, 1=PWM off)
 635:irsnd.c       **** 
 636:irsnd.c       **** #  elif defined (ARM_STM32)                                                             // STM32
 637:irsnd.c       ****         TIM_Cmd(IRSND_TIMER, DISABLE);                                                  // disable 
 638:irsnd.c       ****         TIM_SelectOCxM(IRSND_TIMER, IRSND_TIMER_CHANNEL, TIM_ForcedAction_InActive);    // force ou
 639:irsnd.c       ****         TIM_CCxCmd(IRSND_TIMER, IRSND_TIMER_CHANNEL, TIM_CCx_Enable);                   // enable O
 640:irsnd.c       ****         TIM_SetCounter(IRSND_TIMER, 0);                                                 // reset co
 641:irsnd.c       **** 
 642:irsnd.c       **** #  elif defined (ARM_STM32_HAL)                                                         // STM32
 643:irsnd.c       ****         HAL_TIM_PWM_Stop(&IRSND_TIMER_HANDLER, IRSND_TIMER_CHANNEL_NUMBER);
 644:irsnd.c       **** 
 645:irsnd.c       **** #  elif defined (TEENSY_ARM_CORTEX_M4)                                                  // TEENSY
 646:irsnd.c       ****         analogWrite(IRSND_PIN, 0);                                                      // pwm off,
 647:irsnd.c       **** 
 648:irsnd.c       **** #  elif defined (__xtensa__)                                                            // ESP8266
 649:irsnd.c       ****         analogWrite(IRSND_PIN, 0);                                                      // pwm off,
 650:irsnd.c       **** 
 651:irsnd.c       **** #  elif defined (__AVR_XMEGA__)
 652:irsnd.c       **** #    if (IRSND_OCx == IRSND_XMEGA_OC0A)                                                 // use OC0A
 653:irsnd.c       ****         XMEGA_Timer.CTRLB &= ~(1<<TC0_CCAEN_bp);                                        // Compare 
 654:irsnd.c       **** #    elif (IRSND_OCx == IRSND_XMEGA_OC0B)                                               // use OC0B
 655:irsnd.c       ****         XMEGA_Timer.CTRLB &= ~(1<<TC0_CCBEN_bp);                                        // Compare 
 656:irsnd.c       **** #    elif IRSND_OCx == IRSND_XMEGA_OC0C                                                 // use OC0C
 657:irsnd.c       ****         XMEGA_Timer.CTRLB &= ~(1<<TC0_CCCEN_bp);                                        // Compare 
 658:irsnd.c       **** #    elif IRSND_OCx == IRSND_XMEGA_OC0D                                                 // use OC0D
 659:irsnd.c       ****         XMEGA_Timer.CTRLB &= ~(1<<TC0_CCDEN_bp);                                        // Compare 
 660:irsnd.c       **** #    elif IRSND_OCx == IRSND_XMEGA_OC1A                                                 // use OC1A
 661:irsnd.c       ****                 XMEGA_Timer.CTRLB &= ~(1<<TC1_CCAEN_bp);                                // Compare 
 662:irsnd.c       **** #    elif IRSND_OCx == IRSND_XMEGA_OC1B                                                 // use OC1B
 663:irsnd.c       ****                 XMEGA_Timer.CTRLB &= ~(1<<TC1_CCBEN_bp);                                // Compare 
 664:irsnd.c       **** #    else
 665:irsnd.c       **** #       error wrong value of IRSND_OCx
 666:irsnd.c       **** #    endif // IRSND_OCx
 667:irsnd.c       **** 
 668:irsnd.c       **** #  else //AVR
 669:irsnd.c       **** 
 670:irsnd.c       **** #    if   IRSND_OCx == IRSND_OC2                        // use OC2
 671:irsnd.c       ****         TCCR2 &= ~(1<<COM20);                           // normal port operation, OC2 disconnected.
 672:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC2A                       // use OC2A
 673:irsnd.c       ****         TCCR2A &= ~(1<<COM2A0);                         // normal port operation, OC2A disconnected
 674:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC2B                       // use OC2B
 675:irsnd.c       ****         TCCR2A &= ~(1<<COM2B0);                         // normal port operation, OC2B disconnected
 676:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0                        // use OC0
 677:irsnd.c       ****         TCCR0 &= ~(1<<COM00);                           // normal port operation, OC0 disconnected.
 678:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0A                       // use OC0A
 679:irsnd.c       ****         TCCR0A &= ~(1<<COM0A0);                         // normal port operation, OC0A disconnected
 186               	.LM9:
 187 001e 80B7      		in r24,0x30
 188 0020 8F7B      		andi r24,lo8(-65)
 189 0022 80BF      		out 0x30,r24
 680:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0B                       // use OC0B
 681:irsnd.c       ****         TCCR0A &= ~(1<<COM0B0);                         // normal port operation, OC0B disconnected
 682:irsnd.c       **** #    else
 683:irsnd.c       **** #      error wrong value of IRSND_OCx
 684:irsnd.c       **** #    endif // IRSND_OCx
 685:irsnd.c       ****         IRSND_PORT  &= ~(1<<IRSND_BIT);                 // set IRSND_BIT to low
 191               	.LM10:
 192 0024 C298      		cbi 0x18,2
 686:irsnd.c       **** #  endif //C18
 687:irsnd.c       **** #endif // ANALYZE
 688:irsnd.c       **** 
 689:irsnd.c       **** #if IRSND_USE_CALLBACK == 1
 690:irsnd.c       ****         if (irsnd_callback_ptr)
 691:irsnd.c       ****         {
 692:irsnd.c       ****            (*irsnd_callback_ptr) (FALSE);
 693:irsnd.c       ****         }
 694:irsnd.c       **** #endif // IRSND_USE_CALLBACK == 1
 695:irsnd.c       **** 
 696:irsnd.c       ****         irsnd_is_on = FALSE;
 194               	.LM11:
 195 0026 1092 0000 		sts irsnd_is_on,__zero_reg__
 196               	.L3:
 197               	/* epilogue start */
 198               	.LBE14:
 199               	.LBE13:
 697:irsnd.c       ****     }
 698:irsnd.c       **** }
 201               	.LM12:
 202 002a 0895      		ret
 204               	.Lscope2:
 206               		.stabd	78,0,0
 208               	.global	irsnd_init
 210               	irsnd_init:
 211               		.stabd	46,0,0
 699:irsnd.c       **** 
 700:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
 701:irsnd.c       ****  *  Set PWM frequency
 702:irsnd.c       ****  *  @details  sets pwm frequency
 703:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
 704:irsnd.c       ****  */
 705:irsnd.c       **** #if defined(__12F1840)
 706:irsnd.c       **** extern void pwm_init(uint16_t freq);
 707:irsnd.c       **** #include <stdio.h>
 708:irsnd.c       **** #endif
 709:irsnd.c       **** 
 710:irsnd.c       **** static void
 711:irsnd.c       **** irsnd_set_freq (IRSND_FREQ_TYPE freq)
 712:irsnd.c       **** {
 713:irsnd.c       **** #ifndef ANALYZE
 714:irsnd.c       **** #  if defined(PIC_C18)                                                                      // PIC 
 715:irsnd.c       **** #    if defined(__12F1840)                                                                  // XC8
 716:irsnd.c       ****         TRISA2=0;
 717:irsnd.c       ****         PR2=freq;
 718:irsnd.c       ****         CCP1M0=1;
 719:irsnd.c       ****         CCP1M1=1;
 720:irsnd.c       ****         CCP1M2=1;
 721:irsnd.c       ****         CCP1M3=1;
 722:irsnd.c       ****         DC1B0=1;
 723:irsnd.c       ****         DC1B1=0;
 724:irsnd.c       ****         CCPR1L = 0b01101001;
 725:irsnd.c       ****         TMR2IF = 0;
 726:irsnd.c       ****         TMR2ON=1;
 727:irsnd.c       ****         CCP1CON &=(~0b0011); // p 197 "active high"
 728:irsnd.c       **** #    else                                                                                   // PIC 
 729:irsnd.c       ****         OpenPWM(freq);
 730:irsnd.c       ****         SetDCPWM( (uint16_t) (freq * 2) + 1); // freq*2 = Duty cycles 50%
 731:irsnd.c       **** #    endif
 732:irsnd.c       ****         PWMoff();
 733:irsnd.c       **** #  elif defined (ARM_STM32)                                                                 // STM3
 734:irsnd.c       ****         static uint32_t      TimeBaseFreq = 0;
 735:irsnd.c       **** 
 736:irsnd.c       ****         if (TimeBaseFreq == 0)
 737:irsnd.c       ****         {
 738:irsnd.c       ****             RCC_ClocksTypeDef        RCC_ClocksStructure;
 739:irsnd.c       ****             /* Get system clocks and store timer clock in variable */
 740:irsnd.c       ****             RCC_GetClocksFreq(&RCC_ClocksStructure);
 741:irsnd.c       **** #    if ((IRSND_TIMER_NUMBER >= 2) && (IRSND_TIMER_NUMBER <= 5)) || ((IRSND_TIMER_NUMBER >= 12) && 
 742:irsnd.c       ****             if (RCC_ClocksStructure.PCLK1_Frequency == RCC_ClocksStructure.HCLK_Frequency)
 743:irsnd.c       ****             {
 744:irsnd.c       ****                TimeBaseFreq = RCC_ClocksStructure.PCLK1_Frequency;
 745:irsnd.c       ****             }
 746:irsnd.c       ****             else
 747:irsnd.c       ****             {
 748:irsnd.c       ****                TimeBaseFreq = RCC_ClocksStructure.PCLK1_Frequency * 2;
 749:irsnd.c       ****             }
 750:irsnd.c       **** #    else
 751:irsnd.c       ****             if (RCC_ClocksStructure.PCLK2_Frequency == RCC_ClocksStructure.HCLK_Frequency)
 752:irsnd.c       ****             {
 753:irsnd.c       ****                TimeBaseFreq = RCC_ClocksStructure.PCLK2_Frequency;
 754:irsnd.c       ****             }
 755:irsnd.c       ****             else
 756:irsnd.c       ****             {
 757:irsnd.c       ****                TimeBaseFreq = RCC_ClocksStructure.PCLK2_Frequency * 2;
 758:irsnd.c       ****             }
 759:irsnd.c       **** #    endif
 760:irsnd.c       ****         }
 761:irsnd.c       **** 
 762:irsnd.c       ****         freq = TimeBaseFreq/freq;
 763:irsnd.c       **** 
 764:irsnd.c       ****         /* Set frequency */
 765:irsnd.c       ****         TIM_SetAutoreload(IRSND_TIMER, freq - 1);
 766:irsnd.c       ****         /* Set duty cycle */
 767:irsnd.c       ****         TIM_SetCompare1(IRSND_TIMER, (freq + 1) / 2);
 768:irsnd.c       **** 
 769:irsnd.c       **** #  elif defined (ARM_STM32_HAL)                                                            // STM32
 770:irsnd.c       **** 
 771:irsnd.c       ****         TIM_MasterConfigTypeDef sMasterConfig;
 772:irsnd.c       ****         TIM_OC_InitTypeDef sConfigOC;
 773:irsnd.c       **** 
 774:irsnd.c       ****         uint32_t uwPrescalerValue = (uint32_t) ((IRSND_TIMER_SPEED_APBX) / (freq*10)) - 1; //1kHz
 775:irsnd.c       **** 
 776:irsnd.c       ****         //IRSND_TIMER_HANDLER.Instance = TIM2;
 777:irsnd.c       ****         IRSND_TIMER_HANDLER.Init.Prescaler = uwPrescalerValue;
 778:irsnd.c       ****         IRSND_TIMER_HANDLER.Init.CounterMode = TIM_COUNTERMODE_UP;
 779:irsnd.c       ****         IRSND_TIMER_HANDLER.Init.Period = 10 -1;
 780:irsnd.c       ****         IRSND_TIMER_HANDLER.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 781:irsnd.c       ****         IRSND_TIMER_HANDLER.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 782:irsnd.c       **** 
 783:irsnd.c       ****         if (HAL_TIM_PWM_Init(&IRSND_TIMER_HANDLER) != HAL_OK)
 784:irsnd.c       ****         {
 785:irsnd.c       ****             _Error_Handler(__FILE__, __LINE__);
 786:irsnd.c       ****         }
 787:irsnd.c       **** 
 788:irsnd.c       ****         sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 789:irsnd.c       ****         sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 790:irsnd.c       **** 
 791:irsnd.c       ****         if (HAL_TIMEx_MasterConfigSynchronization(&IRSND_TIMER_HANDLER, &sMasterConfig) != HAL_OK)
 792:irsnd.c       ****         {
 793:irsnd.c       ****             _Error_Handler(__FILE__, __LINE__);
 794:irsnd.c       ****         }
 795:irsnd.c       **** 
 796:irsnd.c       ****         sConfigOC.OCMode = TIM_OCMODE_PWM1;
 797:irsnd.c       ****         sConfigOC.Pulse = IRSND_TIMER_HANDLER.Init.Period / 2;
 798:irsnd.c       ****         sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 799:irsnd.c       ****         sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800:irsnd.c       **** 
 801:irsnd.c       ****         if (HAL_TIM_PWM_ConfigChannel(&IRSND_TIMER_HANDLER, &sConfigOC, IRSND_TIMER_CHANNEL_NUMBER 
 802:irsnd.c       ****         {
 803:irsnd.c       ****             _Error_Handler(__FILE__, __LINE__);
 804:irsnd.c       ****         }
 805:irsnd.c       **** 
 806:irsnd.c       **** #  elif defined (TEENSY_ARM_CORTEX_M4)
 807:irsnd.c       ****         analogWriteResolution(8);                                                           // 8 bi
 808:irsnd.c       ****         analogWriteFrequency(IRSND_PIN, freq);
 809:irsnd.c       ****         analogWrite(IRSND_PIN, 0);                                                          // pwm 
 810:irsnd.c       **** 
 811:irsnd.c       **** #elif defined (__xtensa__)
 812:irsnd.c       ****         // analogWriteRange(255);
 813:irsnd.c       ****         analogWriteFreq(freq);
 814:irsnd.c       ****         analogWrite(IRSND_PIN, 0);                                                          // pwm 
 815:irsnd.c       **** 
 816:irsnd.c       **** #  elif defined (__AVR_XMEGA__)
 817:irsnd.c       ****         XMEGA_Timer.CCA = freq;
 818:irsnd.c       **** 
 819:irsnd.c       **** #  else                                                                                     // AVR
 820:irsnd.c       **** 
 821:irsnd.c       **** #    if IRSND_OCx == IRSND_OC2
 822:irsnd.c       ****         OCR2 = freq;                                                                        // use 
 823:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC2A                                                           // use 
 824:irsnd.c       ****         OCR2A = freq;                                                                       // use 
 825:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC2B                                                           // use 
 826:irsnd.c       ****         OCR2A = freq;                                                                       // use 
 827:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0                                                            // use 
 828:irsnd.c       ****         OCR0 = freq;                                                                        // use 
 829:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0A                                                           // use 
 830:irsnd.c       ****         OCR0A = freq;                                                                       // use 
 831:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0B                                                           // use 
 832:irsnd.c       ****         OCR0A = freq;                                                                       // use 
 833:irsnd.c       **** #    else
 834:irsnd.c       **** #      error wrong value of IRSND_OCx
 835:irsnd.c       **** #    endif
 836:irsnd.c       **** #  endif //PIC_C18
 837:irsnd.c       **** #endif // ANALYZE
 838:irsnd.c       **** }
 839:irsnd.c       **** 
 840:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
 841:irsnd.c       ****  *  Initialize the PWM
 842:irsnd.c       ****  *  @details  Configures 0CR0A, 0CR0B and 0CR2B as PWM channels
 843:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
 844:irsnd.c       ****  */
 845:irsnd.c       **** void
 846:irsnd.c       **** irsnd_init (void)
 847:irsnd.c       **** {
 213               	.LM13:
 214               	.LFBB3:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 0 */
 218               	.L__stack_usage = 0
 848:irsnd.c       **** #ifndef ANALYZE
 849:irsnd.c       **** #  if defined(PIC_C18)                                                      // PIC C18 or XC8 compi
 850:irsnd.c       **** #    if ! defined(__12F1840)                                                // only C18:
 851:irsnd.c       ****         OpenTimer;
 852:irsnd.c       **** #    endif
 853:irsnd.c       ****         irsnd_set_freq (IRSND_FREQ_36_KHZ);                                 // default frequency
 854:irsnd.c       ****         IRSND_PIN = 0;                                                      // set IO to outout
 855:irsnd.c       ****         PWMoff();
 856:irsnd.c       **** #  elif defined (ARM_STM32)                                                 // STM32
 857:irsnd.c       ****         GPIO_InitTypeDef            GPIO_InitStructure;
 858:irsnd.c       ****         TIM_TimeBaseInitTypeDef     TIM_TimeBaseStructure;
 859:irsnd.c       ****         TIM_OCInitTypeDef           TIM_OCInitStructure;
 860:irsnd.c       **** 
 861:irsnd.c       ****        /* GPIOx clock enable */
 862:irsnd.c       **** #    if defined (ARM_STM32L1XX)
 863:irsnd.c       ****         RCC_AHBPeriphClockCmd(IRSND_PORT_RCC, ENABLE);
 864:irsnd.c       **** #    elif defined (ARM_STM32F10X)
 865:irsnd.c       ****         RCC_APB2PeriphClockCmd(IRSND_PORT_RCC, ENABLE);
 866:irsnd.c       ****         // RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE); // only in case of remapping, not n
 867:irsnd.c       **** #    elif defined (ARM_STM32F4XX)
 868:irsnd.c       ****         RCC_AHB1PeriphClockCmd(IRSND_PORT_RCC, ENABLE);
 869:irsnd.c       **** #    endif
 870:irsnd.c       **** 
 871:irsnd.c       ****         /* GPIO Configuration */
 872:irsnd.c       ****         GPIO_InitStructure.GPIO_Pin = IRSND_BIT;
 873:irsnd.c       **** #    if defined (ARM_STM32L1XX) || defined (ARM_STM32F4XX)
 874:irsnd.c       ****         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 875:irsnd.c       ****         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 876:irsnd.c       ****         GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 877:irsnd.c       ****         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 878:irsnd.c       ****         GPIO_Init(IRSND_PORT, &GPIO_InitStructure);
 879:irsnd.c       ****         GPIO_PinAFConfig(IRSND_PORT, (uint8_t)IRSND_BIT_NUMBER, IRSND_GPIO_AF);
 880:irsnd.c       **** #    elif defined (ARM_STM32F10X)
 881:irsnd.c       ****         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 882:irsnd.c       ****         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 883:irsnd.c       ****         GPIO_Init(IRSND_PORT, &GPIO_InitStructure);
 884:irsnd.c       ****         // GPIO_PinRemapConfig(GPIO_*Remap*_TIM[IRSND_TIMER_NUMBER], ENABLE); // only in case of re
 885:irsnd.c       **** #    endif
 886:irsnd.c       **** 
 887:irsnd.c       ****         /* TIMx clock enable */
 888:irsnd.c       **** #    if ((IRSND_TIMER_NUMBER >= 2) && (IRSND_TIMER_NUMBER <= 5)) || ((IRSND_TIMER_NUMBER >= 12) && 
 889:irsnd.c       ****         RCC_APB1PeriphClockCmd(IRSND_TIMER_RCC, ENABLE);
 890:irsnd.c       **** #    else
 891:irsnd.c       ****         RCC_APB2PeriphClockCmd(IRSND_TIMER_RCC, ENABLE);
 892:irsnd.c       **** #    endif
 893:irsnd.c       **** 
 894:irsnd.c       ****         /* Time base configuration */
 895:irsnd.c       ****         TIM_TimeBaseStructure.TIM_Period = -1;     // set dummy value (don't set to 0), will be ini
 896:irsnd.c       ****         TIM_TimeBaseStructure.TIM_Prescaler = 0;
 897:irsnd.c       ****         TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 898:irsnd.c       ****         TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 899:irsnd.c       ****         TIM_TimeBaseInit(IRSND_TIMER, &TIM_TimeBaseStructure);
 900:irsnd.c       **** 
 901:irsnd.c       ****         /* PWM1 Mode configuration */
 902:irsnd.c       ****         TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 903:irsnd.c       ****         TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 904:irsnd.c       ****         TIM_OCInitStructure.TIM_Pulse = 0;         // will be initialized later
 905:irsnd.c       ****         TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 906:irsnd.c       ****         TIM_OC1Init(IRSND_TIMER, &TIM_OCInitStructure);
 907:irsnd.c       **** 
 908:irsnd.c       ****         /* Preload configuration */
 909:irsnd.c       ****         TIM_ARRPreloadConfig(IRSND_TIMER, ENABLE);
 910:irsnd.c       ****         TIM_OC1PreloadConfig(IRSND_TIMER, TIM_OCPreload_Enable);
 911:irsnd.c       **** 
 912:irsnd.c       ****         irsnd_set_freq (IRSND_FREQ_36_KHZ);                                         // set default 
 913:irsnd.c       **** 
 914:irsnd.c       **** #  elif defined (ARM_STM32_HAL)
 915:irsnd.c       ****         irsnd_set_freq (IRSND_FREQ_36_KHZ);                                         // default freq
 916:irsnd.c       **** 
 917:irsnd.c       **** #  elif defined (TEENSY_ARM_CORTEX_M4)
 918:irsnd.c       ****         if (!digitalPinHasPWM(IRSND_PIN))
 919:irsnd.c       ****         {
 920:irsnd.c       ****             return;
 921:irsnd.c       ****         }
 922:irsnd.c       **** 
 923:irsnd.c       **** #  elif defined (__xtensa__)
 924:irsnd.c       ****         pinMode(IRSND_PIN, OUTPUT);
 925:irsnd.c       ****         irsnd_set_freq (IRSND_FREQ_36_KHZ);
 926:irsnd.c       **** 
 927:irsnd.c       **** #  elif defined (__AVR_XMEGA__)
 928:irsnd.c       ****         IRSND_PORT &= ~(1<<IRSND_BIT);                                              // set IRSND_BI
 929:irsnd.c       ****         IRSND_DDR |= (1<<IRSND_BIT);                                                // set IRSND_BI
 930:irsnd.c       **** 
 931:irsnd.c       ****         XMEGA_Timer.PER = 0xFFFF; //Topwert
 932:irsnd.c       ****         XMEGA_Timer.CTRLB |= TC_WGMODE_FRQ_gc; //Modus: Frequenz entspricht CTC
 933:irsnd.c       **** 
 934:irsnd.c       **** #    if AVR_PRESCALER == 8
 935:irsnd.c       ****         XMEGA_Timer.CTRLA |= TC_CLKSEL_DIV8_gc;                                     // start Timer 
 936:irsnd.c       **** #    else
 937:irsnd.c       ****         XMEGA_Timer.CTRLA |= TC_CLKSEL_DIV1_gc;                                     // start Timer 
 938:irsnd.c       **** #    endif
 939:irsnd.c       **** 
 940:irsnd.c       **** # else                                                                              // AVR
 941:irsnd.c       ****         IRSND_PORT &= ~(1<<IRSND_BIT);                                              // set IRSND_BI
 220               	.LM14:
 221 002c C298      		cbi 0x18,2
 942:irsnd.c       ****         IRSND_DDR |= (1<<IRSND_BIT);                                                // set IRSND_BI
 223               	.LM15:
 224 002e BA9A      		sbi 0x17,2
 943:irsnd.c       **** 
 944:irsnd.c       **** #    if   IRSND_OCx == IRSND_OC2                                                    // use OC2
 945:irsnd.c       ****         TCCR2 = (1<<WGM21);                                                         // CTC mode
 946:irsnd.c       **** #       if AVR_PRESCALER == 8
 947:irsnd.c       ****           TCCR2 |= (1<<CS21);                                                       // start Timer 
 948:irsnd.c       **** #       else
 949:irsnd.c       ****           TCCR2 |= (1<<CS20);                                                       // start Timer 
 950:irsnd.c       **** #       endif
 951:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC2A || IRSND_OCx == IRSND_OC2B                        // use OC2A or 
 952:irsnd.c       ****         TCCR2A = (1<<WGM21);                                                        // CTC mode
 953:irsnd.c       **** #       if AVR_PRESCALER == 8
 954:irsnd.c       ****           TCCR2B = (1<<CS21);                                                       // start Timer 
 955:irsnd.c       **** #       else
 956:irsnd.c       ****           TCCR2B = (1<<CS20);                                                       // start Timer 
 957:irsnd.c       **** #       endif
 958:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0                                                    // use OC0
 959:irsnd.c       ****         TCCR0 = (1<<WGM01);                                                         // CTC mode
 960:irsnd.c       **** #       if AVR_PRESCALER == 8
 961:irsnd.c       ****           TCCR0 |= (1<<CS01);                                                       // start Timer 
 962:irsnd.c       **** #       else
 963:irsnd.c       ****           TCCR0 |= (1<<CS00);                                                       // start Timer 
 964:irsnd.c       **** #       endif
 965:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0A || IRSND_OCx == IRSND_OC0B                        // use OC0A or 
 966:irsnd.c       ****         TCCR0A = (1<<WGM01);                                                        // CTC mode
 226               	.LM16:
 227 0030 82E0      		ldi r24,lo8(2)
 228 0032 80BF      		out 0x30,r24
 967:irsnd.c       **** #       if AVR_PRESCALER == 8
 968:irsnd.c       ****           TCCR0B = (1<<CS01);                                                       // start Timer 
 969:irsnd.c       **** #       else
 970:irsnd.c       ****           TCCR0B = (1<<CS00);                                                       // start Timer 
 230               	.LM17:
 231 0034 81E0      		ldi r24,lo8(1)
 232 0036 83BF      		out 0x33,r24
 233               	.LBB15:
 234               	.LBB16:
 830:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0B                                                           // use 
 236               	.LM18:
 237 0038 85E6      		ldi r24,lo8(101)
 238 003a 86BF      		out 0x36,r24
 239               	/* epilogue start */
 240               	.LBE16:
 241               	.LBE15:
 971:irsnd.c       **** #       endif
 972:irsnd.c       **** #    else
 973:irsnd.c       **** #      error wrong value of IRSND_OCx
 974:irsnd.c       **** #    endif
 975:irsnd.c       ****         irsnd_set_freq (IRSND_FREQ_36_KHZ);                                         // default freq
 976:irsnd.c       **** #  endif //PIC_C18
 977:irsnd.c       **** #endif // ANALYZE
 978:irsnd.c       **** }
 243               	.LM19:
 244 003c 0895      		ret
 246               	.Lscope3:
 248               		.stabd	78,0,0
 250               	.global	irsnd_is_busy
 252               	irsnd_is_busy:
 253               		.stabd	46,0,0
 979:irsnd.c       **** 
 980:irsnd.c       **** #if IRSND_USE_CALLBACK == 1
 981:irsnd.c       **** void
 982:irsnd.c       **** irsnd_set_callback_ptr (void (*cb)(uint8_t))
 983:irsnd.c       **** {
 984:irsnd.c       ****     irsnd_callback_ptr = cb;
 985:irsnd.c       **** }
 986:irsnd.c       **** #endif // IRSND_USE_CALLBACK == 1
 987:irsnd.c       **** 
 988:irsnd.c       **** uint8_t
 989:irsnd.c       **** irsnd_is_busy (void)
 990:irsnd.c       **** {
 255               	.LM20:
 256               	.LFBB4:
 257               	/* prologue: function */
 258               	/* frame size = 0 */
 259               	/* stack size = 0 */
 260               	.L__stack_usage = 0
 991:irsnd.c       ****     return irsnd_busy;
 262               	.LM21:
 263 003e 8091 0000 		lds r24,irsnd_busy
 264               	/* epilogue start */
 992:irsnd.c       **** }
 266               	.LM22:
 267 0042 0895      		ret
 269               	.Lscope4:
 271               		.stabd	78,0,0
 275               	.global	irsnd_send_data
 277               	irsnd_send_data:
 278               		.stabd	46,0,0
 993:irsnd.c       **** 
 994:irsnd.c       **** static uint16_t
 995:irsnd.c       **** bitsrevervse (uint16_t x, uint8_t len)
 996:irsnd.c       **** {
 997:irsnd.c       ****     uint16_t    xx = 0;
 998:irsnd.c       **** 
 999:irsnd.c       ****     while(len)
1000:irsnd.c       ****     {
1001:irsnd.c       ****         xx <<= 1;
1002:irsnd.c       ****         if (x & 1)
1003:irsnd.c       ****         {
1004:irsnd.c       ****             xx |= 1;
1005:irsnd.c       ****         }
1006:irsnd.c       ****         x >>= 1;
1007:irsnd.c       ****         len--;
1008:irsnd.c       ****     }
1009:irsnd.c       ****     return xx;
1010:irsnd.c       **** }
1011:irsnd.c       **** 
1012:irsnd.c       **** 
1013:irsnd.c       **** #if IRSND_SUPPORT_SIRCS_PROTOCOL == 1
1014:irsnd.c       **** static uint8_t  sircs_additional_bitlen;
1015:irsnd.c       **** #endif // IRSND_SUPPORT_SIRCS_PROTOCOL == 1
1016:irsnd.c       **** 
1017:irsnd.c       **** uint8_t
1018:irsnd.c       **** irsnd_send_data (IRMP_DATA * irmp_data_p, uint8_t do_wait)
1019:irsnd.c       **** {
 280               	.LM23:
 281               	.LFBB5:
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284               	/* stack size = 0 */
 285               	.L__stack_usage = 0
 286 0044 FC01      		movw r30,r24
 287 0046 862F      		mov r24,r22
1020:irsnd.c       **** #if IRSND_SUPPORT_RECS80_PROTOCOL == 1
1021:irsnd.c       ****     static uint8_t  toggle_bit_recs80;
1022:irsnd.c       **** #endif
1023:irsnd.c       **** #if IRSND_SUPPORT_RECS80EXT_PROTOCOL == 1
1024:irsnd.c       ****     static uint8_t  toggle_bit_recs80ext;
1025:irsnd.c       **** #endif
1026:irsnd.c       **** #if IRSND_SUPPORT_RC5_PROTOCOL == 1
1027:irsnd.c       ****     static uint8_t  toggle_bit_rc5;
1028:irsnd.c       **** #endif
1029:irsnd.c       **** #if IRSND_SUPPORT_RC6_PROTOCOL == 1 || IRSND_SUPPORT_RC6A_PROTOCOL == 1
1030:irsnd.c       ****     static uint8_t  toggle_bit_rc6;
1031:irsnd.c       **** #endif
1032:irsnd.c       **** #if IRSND_SUPPORT_THOMSON_PROTOCOL == 1
1033:irsnd.c       ****     static uint8_t  toggle_bit_thomson;
1034:irsnd.c       **** #endif
1035:irsnd.c       ****     uint16_t        address;
1036:irsnd.c       ****     uint16_t        command;
1037:irsnd.c       **** 
1038:irsnd.c       ****     if (do_wait)
 289               	.LM24:
 290 0048 6623      		tst r22
 291 004a 01F0      		breq .L11
 292               	.L12:
1039:irsnd.c       ****     {
1040:irsnd.c       ****         while (irsnd_busy)
 294               	.LM25:
 295 004c 8091 0000 		lds r24,irsnd_busy
 297               	.LM26:
 298 0050 8111      		cpse r24,__zero_reg__
 299 0052 00C0      		rjmp .L12
 300               	.L13:
1041:irsnd.c       ****         {
1042:irsnd.c       ****             // do nothing;
1043:irsnd.c       ****         }
1044:irsnd.c       ****     }
1045:irsnd.c       ****     else if (irsnd_busy)
1046:irsnd.c       ****     {
1047:irsnd.c       ****         return (FALSE);
1048:irsnd.c       ****     }
1049:irsnd.c       **** 
1050:irsnd.c       ****     irsnd_protocol  = irmp_data_p->protocol;
 302               	.LM27:
 303 0054 8081      		ld r24,Z
 305               	.LM28:
 306 0056 8093 0000 		sts irsnd_protocol,r24
1051:irsnd.c       ****     irsnd_repeat    = irmp_data_p->flags & IRSND_REPETITION_MASK;
 308               	.LM29:
 309 005a 8581      		ldd r24,Z+5
 310 005c 8F70      		andi r24,lo8(15)
 312               	.LM30:
 313 005e 8093 0000 		sts irsnd_repeat,r24
1052:irsnd.c       **** 
1053:irsnd.c       ****     switch (irsnd_protocol)
 315               	.LM31:
 316 0062 8091 0000 		lds r24,irsnd_protocol
 317 0066 8730      		cpi r24,lo8(7)
 318 0068 01F4      		brne .L15
1054:irsnd.c       ****     {
1055:irsnd.c       **** #if IRSND_SUPPORT_SIRCS_PROTOCOL == 1
1056:irsnd.c       ****         case IRMP_SIRCS_PROTOCOL:
1057:irsnd.c       ****         {
1058:irsnd.c       ****             // uint8_t  sircs_additional_command_len;
1059:irsnd.c       ****             uint8_t  sircs_additional_address_len;
1060:irsnd.c       **** 
1061:irsnd.c       ****             sircs_additional_bitlen = (irmp_data_p->address & 0xFF00) >> 8;                        
1062:irsnd.c       **** 
1063:irsnd.c       ****             if (sircs_additional_bitlen > 15 - SIRCS_MINIMUM_DATA_LEN)
1064:irsnd.c       ****             {
1065:irsnd.c       ****                 // sircs_additional_command_len = 15 - SIRCS_MINIMUM_DATA_LEN;
1066:irsnd.c       ****                 sircs_additional_address_len = sircs_additional_bitlen - (15 - SIRCS_MINIMUM_DATA_L
1067:irsnd.c       ****             }
1068:irsnd.c       ****             else
1069:irsnd.c       ****             {
1070:irsnd.c       ****                 // sircs_additional_command_len = sircs_additional_bitlen;
1071:irsnd.c       ****                 sircs_additional_address_len = 0;
1072:irsnd.c       ****             }
1073:irsnd.c       **** 
1074:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, 15);
1075:irsnd.c       **** 
1076:irsnd.c       ****             irsnd_buffer[0] = (command & 0x7F80) >> 7;                                             
1077:irsnd.c       ****             irsnd_buffer[1] = (command & 0x007F) << 1;                                             
1078:irsnd.c       **** 
1079:irsnd.c       ****             if (sircs_additional_address_len > 0)
1080:irsnd.c       ****             {
1081:irsnd.c       ****                 address = bitsrevervse (irmp_data_p->address, 5);
1082:irsnd.c       ****                 irsnd_buffer[1] |= (address & 0x0010) >> 4;
1083:irsnd.c       ****                 irsnd_buffer[2] =  (address & 0x000F) << 4;
1084:irsnd.c       ****             }
1085:irsnd.c       ****             irsnd_busy      = TRUE;
1086:irsnd.c       ****             break;
1087:irsnd.c       ****         }
1088:irsnd.c       **** #endif
1089:irsnd.c       **** #if IRSND_SUPPORT_NEC_PROTOCOL == 1
1090:irsnd.c       ****         case IRMP_APPLE_PROTOCOL:
1091:irsnd.c       ****         {
1092:irsnd.c       ****             command = irmp_data_p->command | (irmp_data_p->address << 8);                          
1093:irsnd.c       ****             address = 0x87EE;                                                                      
1094:irsnd.c       **** 
1095:irsnd.c       ****             address = bitsrevervse (address, NEC_ADDRESS_LEN);
1096:irsnd.c       ****             command = bitsrevervse (command, NEC_COMMAND_LEN);
1097:irsnd.c       **** 
1098:irsnd.c       ****             irsnd_protocol = IRMP_NEC_PROTOCOL;                                                    
1099:irsnd.c       **** 
1100:irsnd.c       ****             irsnd_buffer[0] = (address & 0xFF00) >> 8;                                             
1101:irsnd.c       ****             irsnd_buffer[1] = (address & 0x00FF);                                                  
1102:irsnd.c       ****             irsnd_buffer[2] = (command & 0xFF00) >> 8;                                             
1103:irsnd.c       ****             irsnd_buffer[3] = 0x8B;                                                                
1104:irsnd.c       ****             irsnd_busy      = TRUE;
1105:irsnd.c       ****             break;
1106:irsnd.c       ****         }
1107:irsnd.c       ****         case IRMP_NEC_PROTOCOL:
1108:irsnd.c       ****         {
1109:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, NEC_ADDRESS_LEN);
1110:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, NEC_COMMAND_LEN);
1111:irsnd.c       **** 
1112:irsnd.c       ****             irsnd_buffer[0] = (address & 0xFF00) >> 8;                                             
1113:irsnd.c       ****             irsnd_buffer[1] = (address & 0x00FF);                                                  
1114:irsnd.c       ****             irsnd_buffer[2] = (command & 0xFF00) >> 8;                                             
1115:irsnd.c       ****             irsnd_buffer[3] = ~((command & 0xFF00) >> 8);                                          
1116:irsnd.c       ****             irsnd_busy      = TRUE;
1117:irsnd.c       ****             break;
1118:irsnd.c       ****         }
1119:irsnd.c       ****         case IRMP_ONKYO_PROTOCOL:
1120:irsnd.c       ****         {
1121:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, NEC_ADDRESS_LEN);
1122:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, NEC_COMMAND_LEN);
1123:irsnd.c       **** 
1124:irsnd.c       ****             irsnd_buffer[0] = (address & 0xFF00) >> 8;                                             
1125:irsnd.c       ****             irsnd_buffer[1] = (address & 0x00FF);                                                  
1126:irsnd.c       ****             irsnd_buffer[2] = (command & 0xFF00) >> 8;                                             
1127:irsnd.c       ****             irsnd_buffer[3] = (command & 0x00FF);                                                  
1128:irsnd.c       ****             irsnd_busy      = TRUE;
1129:irsnd.c       ****             break;
1130:irsnd.c       ****         }
1131:irsnd.c       **** #endif
1132:irsnd.c       **** #if IRSND_SUPPORT_NEC16_PROTOCOL == 1
1133:irsnd.c       ****         case IRMP_NEC16_PROTOCOL:
1134:irsnd.c       ****         {
1135:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, NEC16_ADDRESS_LEN);
1136:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, NEC16_COMMAND_LEN);
1137:irsnd.c       **** 
1138:irsnd.c       ****             irsnd_buffer[0] = (address & 0x00FF);                                                  
1139:irsnd.c       ****             irsnd_buffer[1] = (command & 0x00FF);                                                  
1140:irsnd.c       ****             irsnd_busy      = TRUE;
1141:irsnd.c       ****             break;
1142:irsnd.c       ****         }
1143:irsnd.c       **** #endif
1144:irsnd.c       **** #if IRSND_SUPPORT_NEC42_PROTOCOL == 1
1145:irsnd.c       ****         case IRMP_NEC42_PROTOCOL:
1146:irsnd.c       ****         {
1147:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, NEC42_ADDRESS_LEN);
1148:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, NEC42_COMMAND_LEN);
1149:irsnd.c       **** 
1150:irsnd.c       ****             irsnd_buffer[0] = ( (address & 0x1FE0) >> 5);                                          
1151:irsnd.c       ****             irsnd_buffer[1] = ( (address & 0x001F) << 3) | ((~address & 0x1C00) >> 10);            
1152:irsnd.c       ****             irsnd_buffer[2] =                              ((~address & 0x03FC) >> 2);             
1153:irsnd.c       ****             irsnd_buffer[3] = ((~address & 0x0003) << 6) | ( (command & 0x00FC) >> 2);             
1154:irsnd.c       ****             irsnd_buffer[4] = ( (command & 0x0003) << 6) | ((~command & 0x00FC) >> 2);             
1155:irsnd.c       ****             irsnd_buffer[5] = ((~command & 0x0003) << 6);                                          
1156:irsnd.c       ****             irsnd_busy      = TRUE;
1157:irsnd.c       ****             break;
1158:irsnd.c       ****         }
1159:irsnd.c       **** #endif
1160:irsnd.c       **** #if IRSND_SUPPORT_LGAIR_PROTOCOL == 1
1161:irsnd.c       ****         case IRMP_LGAIR_PROTOCOL:
1162:irsnd.c       ****         {
1163:irsnd.c       ****             address = irmp_data_p->address;
1164:irsnd.c       ****             command = irmp_data_p->command;
1165:irsnd.c       **** 
1166:irsnd.c       ****             irsnd_buffer[0] = ( (address & 0x00FF));                                               
1167:irsnd.c       ****             irsnd_buffer[1] = ( (command & 0xFF00) >> 8);                                          
1168:irsnd.c       ****             irsnd_buffer[2] = ( (command & 0x00FF));                                               
1169:irsnd.c       ****             irsnd_buffer[3] = (( ((command & 0xF000) >> 12) +                                      
1170:irsnd.c       ****                                  ((command & 0x0F00) >> 8) +
1171:irsnd.c       ****                                  ((command & 0x00F0) >>4 ) +
1172:irsnd.c       ****                                  ((command & 0x000F))) & 0x000F) << 4;
1173:irsnd.c       ****             irsnd_busy      = TRUE;
1174:irsnd.c       ****             break;
1175:irsnd.c       ****         }
1176:irsnd.c       **** #endif
1177:irsnd.c       **** #if IRSND_SUPPORT_SAMSUNG_PROTOCOL == 1
1178:irsnd.c       ****         case IRMP_SAMSUNG_PROTOCOL:
1179:irsnd.c       ****         {
1180:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, SAMSUNG_ADDRESS_LEN);
1181:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, SAMSUNG_COMMAND_LEN);
1182:irsnd.c       **** 
1183:irsnd.c       ****             irsnd_buffer[0] =  (address & 0xFF00) >> 8;                                            
1184:irsnd.c       ****             irsnd_buffer[1] =  (address & 0x00FF);                                                 
1185:irsnd.c       ****             irsnd_buffer[2] =  (command & 0x00F0) | ((command & 0xF000) >> 12);                    
1186:irsnd.c       ****             irsnd_buffer[3] = ((command & 0x0F00) >> 4) | ((~(command & 0xF000) >> 12) & 0x0F);    
1187:irsnd.c       ****             irsnd_buffer[4] = (~(command & 0x0F00) >> 4) & 0xF0;                                   
1188:irsnd.c       ****             irsnd_busy      = TRUE;
1189:irsnd.c       ****             break;
1190:irsnd.c       ****         }
1191:irsnd.c       ****         case IRMP_SAMSUNG32_PROTOCOL:
1192:irsnd.c       ****         {
1193:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, SAMSUNG_ADDRESS_LEN);
1194:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, SAMSUNG32_COMMAND_LEN);
1195:irsnd.c       **** 
1196:irsnd.c       ****             irsnd_buffer[0] = (address & 0xFF00) >> 8;                                             
1197:irsnd.c       ****             irsnd_buffer[1] = (address & 0x00FF);                                                  
1198:irsnd.c       ****             irsnd_buffer[2] = (command & 0xFF00) >> 8;                                             
1199:irsnd.c       ****             irsnd_buffer[3] = (command & 0x00FF);                                                  
1200:irsnd.c       ****             irsnd_busy      = TRUE;
1201:irsnd.c       ****             break;
1202:irsnd.c       ****         }
1203:irsnd.c       **** #endif
1204:irsnd.c       **** #if IRSND_SUPPORT_SAMSUNG48_PROTOCOL == 1
1205:irsnd.c       ****         case IRMP_SAMSUNG48_PROTOCOL:
1206:irsnd.c       ****         {
1207:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, SAMSUNG_ADDRESS_LEN);
1208:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, 16);
1209:irsnd.c       **** 
1210:irsnd.c       ****             irsnd_buffer[0] = (address & 0xFF00) >> 8;                                             
1211:irsnd.c       ****             irsnd_buffer[1] = (address & 0x00FF);                                                  
1212:irsnd.c       ****             irsnd_buffer[2] = ((command & 0xFF00) >> 8);                                           
1213:irsnd.c       ****             irsnd_buffer[3] = ~((command & 0xFF00) >> 8);                                          
1214:irsnd.c       ****             irsnd_buffer[4] = (command & 0x00FF);                                                  
1215:irsnd.c       ****             irsnd_buffer[5] = ~(command & 0x00FF);                                                 
1216:irsnd.c       ****             irsnd_busy      = TRUE;
1217:irsnd.c       ****             break;
1218:irsnd.c       ****         }
1219:irsnd.c       **** #endif
1220:irsnd.c       **** #if IRSND_SUPPORT_MATSUSHITA_PROTOCOL == 1
1221:irsnd.c       ****         case IRMP_MATSUSHITA_PROTOCOL:
1222:irsnd.c       ****         {
1223:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, MATSUSHITA_ADDRESS_LEN);
1224:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, MATSUSHITA_COMMAND_LEN);
1225:irsnd.c       **** 
1226:irsnd.c       ****             irsnd_buffer[0] = (command & 0x0FF0) >> 4;                                             
1227:irsnd.c       ****             irsnd_buffer[1] = ((command & 0x000F) << 4) | ((address & 0x0F00) >> 8);               
1228:irsnd.c       ****             irsnd_buffer[2] = (address & 0x00FF);                                                  
1229:irsnd.c       ****             irsnd_busy      = TRUE;
1230:irsnd.c       ****             break;
1231:irsnd.c       ****         }
1232:irsnd.c       **** #endif
1233:irsnd.c       **** #if IRSND_SUPPORT_TECHNICS_PROTOCOL == 1
1234:irsnd.c       ****         case IRMP_TECHNICS_PROTOCOL:
1235:irsnd.c       ****         {
1236:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, TECHNICS_COMMAND_LEN);
1237:irsnd.c       **** 
1238:irsnd.c       ****             irsnd_buffer[0] = (command & 0x07FC) >> 3;                                             
1239:irsnd.c       ****             irsnd_buffer[1] = ((command & 0x0007) << 5) | ((~command & 0x07C0) >> 6);              
1240:irsnd.c       ****             irsnd_buffer[2] = (~command & 0x003F) << 2;                                            
1241:irsnd.c       ****             irsnd_busy      = TRUE;
1242:irsnd.c       ****             break;
1243:irsnd.c       ****         }
1244:irsnd.c       **** #endif
1245:irsnd.c       **** #if IRSND_SUPPORT_KASEIKYO_PROTOCOL == 1
1246:irsnd.c       ****         case IRMP_KASEIKYO_PROTOCOL:
1247:irsnd.c       ****         {
1248:irsnd.c       ****             uint8_t xor_value;
1249:irsnd.c       ****             uint16_t genre2;
1250:irsnd.c       **** 
1251:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, KASEIKYO_ADDRESS_LEN);
1252:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, KASEIKYO_COMMAND_LEN + 4);
1253:irsnd.c       ****             genre2 = bitsrevervse ((irmp_data_p->flags & ~IRSND_REPETITION_MASK) >> 4, 4);
1254:irsnd.c       **** 
1255:irsnd.c       ****             xor_value = ((address & 0x000F) ^ ((address & 0x00F0) >> 4) ^ ((address & 0x0F00) >> 8)
1256:irsnd.c       **** 
1257:irsnd.c       ****             irsnd_buffer[0] = (address & 0xFF00) >> 8;                                             
1258:irsnd.c       ****             irsnd_buffer[1] = (address & 0x00FF);                                                  
1259:irsnd.c       ****             irsnd_buffer[2] = xor_value << 4 | (command & 0x000F);                                 
1260:irsnd.c       ****             irsnd_buffer[3] = (genre2 << 4) | (command & 0xF000) >> 12;                            
1261:irsnd.c       ****             irsnd_buffer[4] = (command & 0x0FF0) >> 4;                                             
1262:irsnd.c       **** 
1263:irsnd.c       ****             xor_value = irsnd_buffer[2] ^ irsnd_buffer[3] ^ irsnd_buffer[4];
1264:irsnd.c       **** 
1265:irsnd.c       ****             irsnd_buffer[5] = xor_value;
1266:irsnd.c       ****             irsnd_busy      = TRUE;
1267:irsnd.c       ****             break;
1268:irsnd.c       ****         }
1269:irsnd.c       **** #endif
1270:irsnd.c       **** #if IRSND_SUPPORT_PANASONIC_PROTOCOL == 1
1271:irsnd.c       ****         case IRMP_PANASONIC_PROTOCOL:
1272:irsnd.c       ****         {
1273:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, PANASONIC_ADDRESS_LEN);
1274:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, PANASONIC_COMMAND_LEN);
1275:irsnd.c       **** 
1276:irsnd.c       ****             irsnd_buffer[0] = 0x40;                                                                
1277:irsnd.c       ****             irsnd_buffer[1] = 0x04;                                                                
1278:irsnd.c       ****             irsnd_buffer[2] = 0x01;                                                                
1279:irsnd.c       ****             irsnd_buffer[3] = (address & 0xFF00) >> 8;                                             
1280:irsnd.c       ****             irsnd_buffer[4] = (address & 0x00FF);                                                  
1281:irsnd.c       ****             irsnd_buffer[5] = (command & 0xFF00) >> 8;                                             
1282:irsnd.c       ****             irsnd_buffer[6] = (command & 0x00FF);                                                  
1283:irsnd.c       **** 
1284:irsnd.c       ****             irsnd_busy      = TRUE;
1285:irsnd.c       ****             break;
1286:irsnd.c       ****         }
1287:irsnd.c       **** #endif
1288:irsnd.c       **** #if IRSND_SUPPORT_MITSU_HEAVY_PROTOCOL == 1
1289:irsnd.c       ****         case IRMP_MITSU_HEAVY_PROTOCOL:
1290:irsnd.c       ****         {
1291:irsnd.c       ****             address = irmp_data_p->address;
1292:irsnd.c       ****             command = irmp_data_p->command;
1293:irsnd.c       **** 
1294:irsnd.c       ****             irsnd_buffer[0] = 0x4A;
1295:irsnd.c       ****             irsnd_buffer[1] = 0x75;
1296:irsnd.c       ****             irsnd_buffer[2] = 0xC3;
1297:irsnd.c       ****             irsnd_buffer[3] = 0x64;
1298:irsnd.c       ****             irsnd_buffer[4] = 0x9B;
1299:irsnd.c       ****             irsnd_buffer[5] = ~(address & 0xFF00) >> 8;
1300:irsnd.c       ****             irsnd_buffer[6] = (address & 0xFF00) >> 8;
1301:irsnd.c       ****             irsnd_buffer[7] = ~(address & 0x00FF);
1302:irsnd.c       ****             irsnd_buffer[8] = (address & 0x00FF);
1303:irsnd.c       ****             irsnd_buffer[9] = ~(command & 0x00FF);
1304:irsnd.c       ****             irsnd_buffer[10] = (command & 0x00FF);
1305:irsnd.c       **** 
1306:irsnd.c       ****             irsnd_busy      = TRUE;
1307:irsnd.c       ****             break;
1308:irsnd.c       ****         }
1309:irsnd.c       **** #endif
1310:irsnd.c       **** #if IRSND_SUPPORT_RECS80_PROTOCOL == 1
1311:irsnd.c       ****         case IRMP_RECS80_PROTOCOL:
1312:irsnd.c       ****         {
1313:irsnd.c       ****             toggle_bit_recs80 = toggle_bit_recs80 ? 0x00 : 0x80;
1314:irsnd.c       **** 
1315:irsnd.c       ****             irsnd_buffer[0] = toggle_bit_recs80 | ((irmp_data_p->address & 0x000F) << 4) |
1316:irsnd.c       ****                               ((irmp_data_p->command & 0x003C) >> 2);                              
1317:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command & 0x03) << 6;                                  
1318:irsnd.c       ****             irsnd_busy      = TRUE;
1319:irsnd.c       ****             break;
1320:irsnd.c       ****         }
1321:irsnd.c       **** #endif
1322:irsnd.c       **** #if IRSND_SUPPORT_RECS80EXT_PROTOCOL == 1
1323:irsnd.c       ****         case IRMP_RECS80EXT_PROTOCOL:
1324:irsnd.c       ****         {
1325:irsnd.c       ****             toggle_bit_recs80ext = toggle_bit_recs80ext ? 0x00 : 0x40;
1326:irsnd.c       **** 
1327:irsnd.c       ****             irsnd_buffer[0] = 0x80 | toggle_bit_recs80ext | ((irmp_data_p->address & 0x000F) << 2) 
1328:irsnd.c       ****                                 ((irmp_data_p->command & 0x0030) >> 4);                            
1329:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command & 0x0F) << 4;                                  
1330:irsnd.c       ****             irsnd_busy      = TRUE;
1331:irsnd.c       ****             break;
1332:irsnd.c       ****         }
1333:irsnd.c       **** #endif
1334:irsnd.c       **** #if IRSND_SUPPORT_RC5_PROTOCOL == 1
1335:irsnd.c       ****         case IRMP_RC5_PROTOCOL:
1336:irsnd.c       ****         {
1337:irsnd.c       ****             toggle_bit_rc5 = toggle_bit_rc5 ? 0x00 : 0x40;
 320               	.LM32:
 321 006a 8091 0000 		lds r24,toggle_bit_rc5.1688
 322 006e 20E4      		ldi r18,lo8(64)
 323 0070 8111      		cpse r24,__zero_reg__
 324 0072 20E0      		ldi r18,0
 325               	.L16:
 327               	.LM33:
 328 0074 2093 0000 		sts toggle_bit_rc5.1688,r18
1338:irsnd.c       **** 
1339:irsnd.c       ****             irsnd_buffer[0] = ((irmp_data_p->command & 0x40) ? 0x00 : 0x80) | toggle_bit_rc5 |
 330               	.LM34:
 331 0078 8381      		ldd r24,Z+3
 333               	.LM35:
 334 007a 40E8      		ldi r20,lo8(-128)
 335 007c 86FD      		sbrc r24,6
 337               	.LM36:
 338 007e 40E0      		ldi r20,0
 339               	.L17:
1340:irsnd.c       ****                                 ((irmp_data_p->address & 0x001F) << 1) | ((irmp_data_p->command & 0
 341               	.LM37:
 342 0080 9181      		ldd r25,Z+1
 343 0082 990F      		lsl r25
 344 0084 392F      		mov r19,r25
 345 0086 3E73      		andi r19,lo8(62)
 347               	.LM38:
 348 0088 85FB      		bst r24,5
 349 008a 9927      		clr r25
 350 008c 90F9      		bld r25,0
 352               	.LM39:
 353 008e 932B      		or r25,r19
1339:irsnd.c       ****                                 ((irmp_data_p->address & 0x001F) << 1) | ((irmp_data_p->command & 0
 355               	.LM40:
 356 0090 242B      		or r18,r20
 358               	.LM41:
 359 0092 922B      		or r25,r18
1339:irsnd.c       ****                                 ((irmp_data_p->address & 0x001F) << 1) | ((irmp_data_p->command & 0
 361               	.LM42:
 362 0094 9093 0000 		sts irsnd_buffer,r25
1341:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command & 0x1F) << 3;                                  
 364               	.LM43:
 365 0098 880F      		lsl r24
 366 009a 880F      		lsl r24
 367 009c 880F      		lsl r24
 369               	.LM44:
 370 009e 8093 0000 		sts irsnd_buffer+1,r24
1342:irsnd.c       ****             irsnd_busy      = TRUE;
 372               	.LM45:
 373 00a2 81E0      		ldi r24,lo8(1)
 374 00a4 8093 0000 		sts irsnd_busy,r24
 375               	.L15:
1343:irsnd.c       ****             break;
1344:irsnd.c       ****         }
1345:irsnd.c       **** #endif
1346:irsnd.c       **** #if IRSND_SUPPORT_RC6_PROTOCOL == 1
1347:irsnd.c       ****         case IRMP_RC6_PROTOCOL:
1348:irsnd.c       ****         {
1349:irsnd.c       ****             toggle_bit_rc6 = toggle_bit_rc6 ? 0x00 : 0x08;
1350:irsnd.c       **** 
1351:irsnd.c       ****             irsnd_buffer[0] = 0x80 | toggle_bit_rc6 | ((irmp_data_p->address & 0x00E0) >> 5);      
1352:irsnd.c       ****             irsnd_buffer[1] = ((irmp_data_p->address & 0x001F) << 3) | ((irmp_data_p->command & 0xE
1353:irsnd.c       ****             irsnd_buffer[2] = (irmp_data_p->command & 0x1F) << 3;                                  
1354:irsnd.c       ****             irsnd_busy      = TRUE;
1355:irsnd.c       ****             break;
1356:irsnd.c       ****         }
1357:irsnd.c       **** #endif
1358:irsnd.c       **** #if IRSND_SUPPORT_RC6A_PROTOCOL == 1
1359:irsnd.c       ****         case IRMP_RC6A_PROTOCOL:
1360:irsnd.c       ****         {
1361:irsnd.c       ****             toggle_bit_rc6 = toggle_bit_rc6 ? 0x00 : 0x08;
1362:irsnd.c       **** 
1363:irsnd.c       ****             irsnd_buffer[0] = 0x80 | 0x60 | ((irmp_data_p->address & 0x3000) >> 12);               
1364:irsnd.c       ****             irsnd_buffer[1] = ((irmp_data_p->address & 0x0FFF) >> 4) ;                             
1365:irsnd.c       ****             irsnd_buffer[2] = ((irmp_data_p->address & 0x000F) << 4) | ((irmp_data_p->command & 0xF
1366:irsnd.c       ****             irsnd_buffer[3] = (irmp_data_p->command & 0x0FF0) >> 4;                                
1367:irsnd.c       ****             irsnd_buffer[4] = (irmp_data_p->command & 0x000F) << 4;                                
1368:irsnd.c       ****             irsnd_busy      = TRUE;
1369:irsnd.c       ****             break;
1370:irsnd.c       ****         }
1371:irsnd.c       **** #endif
1372:irsnd.c       **** #if IRSND_SUPPORT_DENON_PROTOCOL == 1
1373:irsnd.c       ****         case IRMP_DENON_PROTOCOL:
1374:irsnd.c       ****         {
1375:irsnd.c       ****             irsnd_buffer[0] = ((irmp_data_p->address & 0x1F) << 3) | ((irmp_data_p->command & 0x038
1376:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command & 0x7F) << 1;                                  
1377:irsnd.c       ****             irsnd_buffer[2] = ((irmp_data_p->address & 0x1F) << 3) | (((~irmp_data_p->command) & 0x
1378:irsnd.c       ****             irsnd_buffer[3] = (~(irmp_data_p->command) & 0x7F) << 1;                               
1379:irsnd.c       ****             irsnd_busy      = TRUE;
1380:irsnd.c       ****             break;
1381:irsnd.c       ****         }
1382:irsnd.c       **** #endif
1383:irsnd.c       **** #if IRSND_SUPPORT_THOMSON_PROTOCOL == 1
1384:irsnd.c       ****         case IRMP_THOMSON_PROTOCOL:
1385:irsnd.c       ****         {
1386:irsnd.c       ****             toggle_bit_thomson = toggle_bit_thomson ? 0x00 : 0x08;
1387:irsnd.c       **** 
1388:irsnd.c       ****             irsnd_buffer[0] = ((irmp_data_p->address & 0x0F) << 4) | toggle_bit_thomson | ((irmp_da
1389:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command & 0x0F) << 4;                                  
1390:irsnd.c       ****             irsnd_busy      = TRUE;
1391:irsnd.c       ****             break;
1392:irsnd.c       ****         }
1393:irsnd.c       **** #endif
1394:irsnd.c       **** #if IRSND_SUPPORT_BOSE_PROTOCOL == 1
1395:irsnd.c       ****         case IRMP_BOSE_PROTOCOL:
1396:irsnd.c       ****         {
1397:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, BOSE_COMMAND_LEN);
1398:irsnd.c       **** 
1399:irsnd.c       ****             irsnd_buffer[0] = (command & 0xFF00) >> 8;                                             
1400:irsnd.c       ****             irsnd_buffer[1] = ~((command & 0xFF00) >> 8);                                          
1401:irsnd.c       ****             irsnd_busy      = TRUE;
1402:irsnd.c       ****             break;
1403:irsnd.c       ****         }
1404:irsnd.c       **** #endif
1405:irsnd.c       **** #if IRSND_SUPPORT_NUBERT_PROTOCOL == 1
1406:irsnd.c       ****         case IRMP_NUBERT_PROTOCOL:
1407:irsnd.c       ****         {
1408:irsnd.c       ****             irsnd_buffer[0] = irmp_data_p->command >> 2;                                           
1409:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command & 0x0003) << 6;                                
1410:irsnd.c       ****             irsnd_busy      = TRUE;
1411:irsnd.c       ****             break;
1412:irsnd.c       ****         }
1413:irsnd.c       **** #endif
1414:irsnd.c       **** #if IRSND_SUPPORT_FAN_PROTOCOL == 1
1415:irsnd.c       ****         case IRMP_FAN_PROTOCOL:
1416:irsnd.c       ****         {
1417:irsnd.c       ****             irsnd_buffer[0] = irmp_data_p->command >> 3;                                           
1418:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command & 0x0007) << 5;                                
1419:irsnd.c       ****             irsnd_busy      = TRUE;
1420:irsnd.c       ****             break;
1421:irsnd.c       ****         }
1422:irsnd.c       **** #endif
1423:irsnd.c       **** #if IRSND_SUPPORT_SPEAKER_PROTOCOL == 1
1424:irsnd.c       ****         case IRMP_SPEAKER_PROTOCOL:
1425:irsnd.c       ****         {
1426:irsnd.c       ****             irsnd_buffer[0] = irmp_data_p->command >> 2;                                           
1427:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command & 0x0003) << 6;                                
1428:irsnd.c       ****             irsnd_busy      = TRUE;
1429:irsnd.c       ****             break;
1430:irsnd.c       ****         }
1431:irsnd.c       **** #endif
1432:irsnd.c       **** #if IRSND_SUPPORT_BANG_OLUFSEN_PROTOCOL == 1
1433:irsnd.c       ****         case IRMP_BANG_OLUFSEN_PROTOCOL:
1434:irsnd.c       ****         {
1435:irsnd.c       ****             irsnd_buffer[0] = irmp_data_p->command >> 11;                                          
1436:irsnd.c       ****             irsnd_buffer[1] = irmp_data_p->command >> 3;                                           
1437:irsnd.c       ****             irsnd_buffer[2] = (irmp_data_p->command & 0x0007) << 5;                                
1438:irsnd.c       ****             irsnd_busy      = TRUE;
1439:irsnd.c       ****             break;
1440:irsnd.c       ****         }
1441:irsnd.c       **** #endif
1442:irsnd.c       **** #if IRSND_SUPPORT_GRUNDIG_PROTOCOL == 1
1443:irsnd.c       ****         case IRMP_GRUNDIG_PROTOCOL:
1444:irsnd.c       ****         {
1445:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, TELEFUNKEN_COMMAND_LEN);
1446:irsnd.c       **** 
1447:irsnd.c       ****             irsnd_buffer[0] = 0xFF;                                                                
1448:irsnd.c       ****             irsnd_buffer[1] = 0xC0;                                                                
1449:irsnd.c       ****             irsnd_buffer[2] = 0x80 | (command >> 2);                                               
1450:irsnd.c       ****             irsnd_buffer[3] = (command << 6) & 0xC0;                                               
1451:irsnd.c       **** 
1452:irsnd.c       ****             irsnd_busy      = TRUE;
1453:irsnd.c       ****             break;
1454:irsnd.c       ****         }
1455:irsnd.c       **** #endif
1456:irsnd.c       **** #if IRSND_SUPPORT_TELEFUNKEN_PROTOCOL == 1
1457:irsnd.c       ****         case IRMP_TELEFUNKEN_PROTOCOL:
1458:irsnd.c       ****         {
1459:irsnd.c       ****             irsnd_buffer[0] = irmp_data_p->command >> 7;                                           
1460:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->command << 1) & 0xff;                                  
1461:irsnd.c       **** 
1462:irsnd.c       ****             irsnd_busy      = TRUE;
1463:irsnd.c       ****             break;
1464:irsnd.c       ****         }
1465:irsnd.c       **** #endif
1466:irsnd.c       **** #if IRSND_SUPPORT_IR60_PROTOCOL == 1
1467:irsnd.c       ****         case IRMP_IR60_PROTOCOL:
1468:irsnd.c       ****         {
1469:irsnd.c       ****             command = (bitsrevervse (0x7d, IR60_COMMAND_LEN) << 7) | bitsrevervse (irmp_data_p->com
1470:irsnd.c       **** #if 0
1471:irsnd.c       ****             irsnd_buffer[0] = command >> 6 | 0x01;                                                 
1472:irsnd.c       ****             irsnd_buffer[1] = (command & 0x7F) << 1;                                               
1473:irsnd.c       **** #else
1474:irsnd.c       ****             irsnd_buffer[0] = ((command & 0x7F) << 1) | 0x01;                                      
1475:irsnd.c       ****             irsnd_buffer[1] = command >> 6;                                                        
1476:irsnd.c       **** #endif
1477:irsnd.c       **** 
1478:irsnd.c       ****             irsnd_busy      = TRUE;
1479:irsnd.c       ****             break;
1480:irsnd.c       ****         }
1481:irsnd.c       **** #endif
1482:irsnd.c       **** #if IRSND_SUPPORT_NOKIA_PROTOCOL == 1
1483:irsnd.c       ****         case IRMP_NOKIA_PROTOCOL:
1484:irsnd.c       ****         {
1485:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, NOKIA_ADDRESS_LEN);
1486:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, NOKIA_COMMAND_LEN);
1487:irsnd.c       **** 
1488:irsnd.c       ****             irsnd_buffer[0] = 0xBF;                                                                
1489:irsnd.c       ****             irsnd_buffer[1] = 0xFF;                                                                
1490:irsnd.c       ****             irsnd_buffer[2] = 0x80;                                                                
1491:irsnd.c       ****             irsnd_buffer[3] = 0x80 | command >> 1;                                                 
1492:irsnd.c       ****             irsnd_buffer[4] = (command << 7) | (address >> 1);                                     
1493:irsnd.c       ****             irsnd_buffer[5] = (address << 7);                                                      
1494:irsnd.c       **** 
1495:irsnd.c       ****             irsnd_busy      = TRUE;
1496:irsnd.c       ****             break;
1497:irsnd.c       ****         }
1498:irsnd.c       **** #endif
1499:irsnd.c       **** #if IRSND_SUPPORT_SIEMENS_PROTOCOL == 1
1500:irsnd.c       ****         case IRMP_SIEMENS_PROTOCOL:
1501:irsnd.c       ****         {
1502:irsnd.c       ****             irsnd_buffer[0] = ((irmp_data_p->address & 0x07FF) >> 3);                              
1503:irsnd.c       ****             irsnd_buffer[1] = ((irmp_data_p->address & 0x0007) << 5) | ((irmp_data_p->command >> 5)
1504:irsnd.c       ****             irsnd_buffer[2] = ((irmp_data_p->command & 0x001F) << 3) | ((~irmp_data_p->command & 0x
1505:irsnd.c       **** 
1506:irsnd.c       ****             irsnd_busy      = TRUE;
1507:irsnd.c       ****             break;
1508:irsnd.c       ****         }
1509:irsnd.c       **** #endif
1510:irsnd.c       **** #if IRSND_SUPPORT_RUWIDO_PROTOCOL == 1
1511:irsnd.c       ****         case IRMP_RUWIDO_PROTOCOL:
1512:irsnd.c       ****         {
1513:irsnd.c       ****             irsnd_buffer[0] = ((irmp_data_p->address & 0x01FF) >> 1);                              
1514:irsnd.c       ****             irsnd_buffer[1] = ((irmp_data_p->address & 0x0001) << 7) | ((irmp_data_p->command & 0x7
1515:irsnd.c       ****             irsnd_buffer[2] = ((~irmp_data_p->command & 0x01) << 7);                               
1516:irsnd.c       ****             irsnd_busy      = TRUE;
1517:irsnd.c       ****             break;
1518:irsnd.c       ****         }
1519:irsnd.c       **** #endif
1520:irsnd.c       **** #if IRSND_SUPPORT_FDC_PROTOCOL == 1
1521:irsnd.c       ****         case IRMP_FDC_PROTOCOL:
1522:irsnd.c       ****         {
1523:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, FDC_ADDRESS_LEN);
1524:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, FDC_COMMAND_LEN);
1525:irsnd.c       **** 
1526:irsnd.c       ****             irsnd_buffer[0] = (address & 0xFF);                                                    
1527:irsnd.c       ****             irsnd_buffer[1] = 0;                                                                   
1528:irsnd.c       ****             irsnd_buffer[2] = 0;                                                                   
1529:irsnd.c       ****             irsnd_buffer[3] = (command & 0xFF);                                                    
1530:irsnd.c       ****             irsnd_buffer[4] = ~(command & 0xFF);                                                   
1531:irsnd.c       ****             irsnd_busy      = TRUE;
1532:irsnd.c       ****             break;
1533:irsnd.c       ****         }
1534:irsnd.c       **** #endif
1535:irsnd.c       **** #if IRSND_SUPPORT_RCCAR_PROTOCOL == 1
1536:irsnd.c       ****         case IRMP_RCCAR_PROTOCOL:
1537:irsnd.c       ****         {
1538:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, 2);                                      
1539:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, RCCAR_COMMAND_LEN - 2);                  
1540:irsnd.c       **** 
1541:irsnd.c       ****             irsnd_buffer[0] = ((command & 0x06) << 5) | ((address & 0x0003) << 4) | ((command & 0x0
1542:irsnd.c       ****             irsnd_buffer[1] = ((command & 0x78) << 1) | ((command & 0x0001) << 3);                 
1543:irsnd.c       **** 
1544:irsnd.c       ****             irsnd_busy      = TRUE;
1545:irsnd.c       ****             break;
1546:irsnd.c       ****         }
1547:irsnd.c       **** #endif
1548:irsnd.c       **** #if IRSND_SUPPORT_JVC_PROTOCOL == 1
1549:irsnd.c       ****         case IRMP_JVC_PROTOCOL:
1550:irsnd.c       ****         {
1551:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, JVC_ADDRESS_LEN);
1552:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, JVC_COMMAND_LEN);
1553:irsnd.c       **** 
1554:irsnd.c       ****             irsnd_buffer[0] = ((address & 0x000F) << 4) | (command & 0x0F00) >> 8;                 
1555:irsnd.c       ****             irsnd_buffer[1] = (command & 0x00FF);                                                  
1556:irsnd.c       **** 
1557:irsnd.c       ****             irsnd_busy      = TRUE;
1558:irsnd.c       ****             break;
1559:irsnd.c       ****         }
1560:irsnd.c       **** #endif
1561:irsnd.c       **** #if IRSND_SUPPORT_NIKON_PROTOCOL == 1
1562:irsnd.c       ****         case IRMP_NIKON_PROTOCOL:
1563:irsnd.c       ****         {
1564:irsnd.c       ****             irsnd_buffer[0] = (irmp_data_p->command & 0x0003) << 6;                                
1565:irsnd.c       ****             irsnd_busy      = TRUE;
1566:irsnd.c       ****             break;
1567:irsnd.c       ****         }
1568:irsnd.c       **** #endif
1569:irsnd.c       **** #if IRSND_SUPPORT_LEGO_PROTOCOL == 1
1570:irsnd.c       ****         case IRMP_LEGO_PROTOCOL:
1571:irsnd.c       ****         {
1572:irsnd.c       ****             uint8_t crc = 0x0F ^ ((irmp_data_p->command & 0x0F00) >> 8) ^ ((irmp_data_p->command & 
1573:irsnd.c       **** 
1574:irsnd.c       ****             irsnd_buffer[0] = (irmp_data_p->command & 0x0FF0) >> 4;                                
1575:irsnd.c       ****             irsnd_buffer[1] = ((irmp_data_p->command & 0x000F) << 4) | crc;                        
1576:irsnd.c       ****             irsnd_busy      = TRUE;
1577:irsnd.c       ****             break;
1578:irsnd.c       ****         }
1579:irsnd.c       **** #endif
1580:irsnd.c       **** #if IRSND_SUPPORT_IRMP16_PROTOCOL == 1
1581:irsnd.c       ****         case IRMP_IRMP16_PROTOCOL:
1582:irsnd.c       ****         {
1583:irsnd.c       ****             command = bitsrevervse (irmp_data_p->command, IRMP16_COMMAND_LEN);
1584:irsnd.c       **** 
1585:irsnd.c       ****             irsnd_buffer[0] = (command & 0xFF00) >> 8;                                             
1586:irsnd.c       ****             irsnd_buffer[1] = (command & 0x00FF);                                                  
1587:irsnd.c       ****             irsnd_busy      = TRUE;
1588:irsnd.c       ****             break;
1589:irsnd.c       ****         }
1590:irsnd.c       **** #endif
1591:irsnd.c       **** #if IRSND_SUPPORT_A1TVBOX_PROTOCOL == 1
1592:irsnd.c       ****         case IRMP_A1TVBOX_PROTOCOL:
1593:irsnd.c       ****         {
1594:irsnd.c       ****             irsnd_buffer[0] = 0x80 | (irmp_data_p->address >> 2);                                  
1595:irsnd.c       ****             irsnd_buffer[1] = (irmp_data_p->address << 6) | (irmp_data_p->command >> 2);           
1596:irsnd.c       ****             irsnd_buffer[2] = (irmp_data_p->command << 6);                                         
1597:irsnd.c       **** 
1598:irsnd.c       ****             irsnd_busy      = TRUE;
1599:irsnd.c       ****             break;
1600:irsnd.c       ****         }
1601:irsnd.c       **** #endif
1602:irsnd.c       **** #if IRSND_SUPPORT_ROOMBA_PROTOCOL == 1
1603:irsnd.c       ****         case IRMP_ROOMBA_PROTOCOL:
1604:irsnd.c       ****         {
1605:irsnd.c       ****             irsnd_buffer[0] = (irmp_data_p->command & 0x7F) << 1;                                  
1606:irsnd.c       ****             irsnd_busy      = TRUE;
1607:irsnd.c       ****             break;
1608:irsnd.c       ****         }
1609:irsnd.c       **** #endif
1610:irsnd.c       **** #if IRSND_SUPPORT_PENTAX_PROTOCOL == 1
1611:irsnd.c       ****         case IRMP_PENTAX_PROTOCOL:
1612:irsnd.c       ****         {
1613:irsnd.c       ****             irsnd_buffer[0] = (irmp_data_p->command & 0x3F) << 2;                                  
1614:irsnd.c       ****             irsnd_busy      = TRUE;
1615:irsnd.c       ****             break;
1616:irsnd.c       ****         }
1617:irsnd.c       **** #endif
1618:irsnd.c       **** #if IRSND_SUPPORT_ACP24_PROTOCOL == 1
1619:irsnd.c       **** #       define ACP_SET_BIT(acp24_bitno, c, irmp_bitno)                                          \
1620:irsnd.c       ****         do                                                                                      \
1621:irsnd.c       ****         {                                                                                       \
1622:irsnd.c       ****             if ((c) & (1<<(irmp_bitno)))                                                        \
1623:irsnd.c       ****             {                                                                                   \
1624:irsnd.c       ****                 irsnd_buffer[((acp24_bitno)>>3)] |= 1 << (((7 - (acp24_bitno)) & 0x07));        \
1625:irsnd.c       ****             }                                                                                   \
1626:irsnd.c       ****         } while (0)
1627:irsnd.c       **** 
1628:irsnd.c       ****         case IRMP_ACP24_PROTOCOL:
1629:irsnd.c       ****         {
1630:irsnd.c       ****             uint16_t    cmd = irmp_data_p->command;
1631:irsnd.c       ****             uint8_t     i;
1632:irsnd.c       **** 
1633:irsnd.c       ****             address = bitsrevervse (irmp_data_p->address, ACP24_ADDRESS_LEN);
1634:irsnd.c       **** 
1635:irsnd.c       ****             for (i = 0; i < 8; i++)
1636:irsnd.c       ****             {
1637:irsnd.c       ****                 irsnd_buffer[i] = 0x00;                                                            
1638:irsnd.c       ****             }
1639:irsnd.c       **** 
1640:irsnd.c       ****             // ACP24-Frame:
1641:irsnd.c       ****             //           1         2         3         4         5         6
1642:irsnd.c       ****             // 0123456789012345678901234567890123456789012345678901234567890123456789
1643:irsnd.c       ****             // N VVMMM    ? ???    t vmA x                 y                     TTTT
1644:irsnd.c       ****             //
1645:irsnd.c       ****             // irmp_data_p->command:
1646:irsnd.c       ****             //
1647:irsnd.c       ****             //         5432109876543210
1648:irsnd.c       ****             //         NAVVvMMMmtxyTTTT
1649:irsnd.c       **** 
1650:irsnd.c       ****             ACP_SET_BIT( 0, cmd, 15);
1651:irsnd.c       ****             ACP_SET_BIT(24, cmd, 14);
1652:irsnd.c       ****             ACP_SET_BIT( 2, cmd, 13);
1653:irsnd.c       ****             ACP_SET_BIT( 3, cmd, 12);
1654:irsnd.c       ****             ACP_SET_BIT(22, cmd, 11);
1655:irsnd.c       ****             ACP_SET_BIT( 4, cmd, 10);
1656:irsnd.c       ****             ACP_SET_BIT( 5, cmd,  9);
1657:irsnd.c       ****             ACP_SET_BIT( 6, cmd,  8);
1658:irsnd.c       ****             ACP_SET_BIT(23, cmd,  7);
1659:irsnd.c       ****             ACP_SET_BIT(20, cmd,  6);
1660:irsnd.c       ****             ACP_SET_BIT(26, cmd,  5);
1661:irsnd.c       ****             ACP_SET_BIT(44, cmd,  4);
1662:irsnd.c       ****             ACP_SET_BIT(66, cmd,  3);
1663:irsnd.c       ****             ACP_SET_BIT(67, cmd,  2);
1664:irsnd.c       ****             ACP_SET_BIT(68, cmd,  1);
1665:irsnd.c       ****             ACP_SET_BIT(69, cmd,  0);
1666:irsnd.c       **** 
1667:irsnd.c       ****             irsnd_busy      = TRUE;
1668:irsnd.c       ****             break;
1669:irsnd.c       ****         }
1670:irsnd.c       **** #endif
1671:irsnd.c       **** 
1672:irsnd.c       ****         default:
1673:irsnd.c       ****         {
1674:irsnd.c       ****             break;
1675:irsnd.c       ****         }
1676:irsnd.c       ****     }
1677:irsnd.c       **** 
1678:irsnd.c       ****     return irsnd_busy;
 377               	.LM46:
 378 00a8 8091 0000 		lds r24,irsnd_busy
 379 00ac 00C0      		rjmp .L14
 380               	.L11:
1045:irsnd.c       ****     {
 382               	.LM47:
 383 00ae 9091 0000 		lds r25,irsnd_busy
1045:irsnd.c       ****     {
 385               	.LM48:
 386 00b2 9923      		tst r25
 387 00b4 01F0      		breq .L13
 388               	.L14:
 389               	/* epilogue start */
1679:irsnd.c       **** }
 391               	.LM49:
 392 00b6 0895      		ret
 397               	.Lscope5:
 399               		.stabd	78,0,0
 401               	.global	irsnd_stop
 403               	irsnd_stop:
 404               		.stabd	46,0,0
1680:irsnd.c       **** 
1681:irsnd.c       **** void
1682:irsnd.c       **** irsnd_stop (void)
1683:irsnd.c       **** {
 406               	.LM50:
 407               	.LFBB6:
 408               	/* prologue: function */
 409               	/* frame size = 0 */
 410               	/* stack size = 0 */
 411               	.L__stack_usage = 0
1684:irsnd.c       ****     irsnd_repeat = 0;
 413               	.LM51:
 414 00b8 1092 0000 		sts irsnd_repeat,__zero_reg__
 415               	/* epilogue start */
1685:irsnd.c       **** }
 417               	.LM52:
 418 00bc 0895      		ret
 420               	.Lscope6:
 422               		.stabd	78,0,0
 424               	.global	irsnd_ISR
 426               	irsnd_ISR:
 427               		.stabd	46,0,0
1686:irsnd.c       **** 
1687:irsnd.c       **** /*-------------------------------------------------------------------------------------------------
1688:irsnd.c       ****  *  ISR routine
1689:irsnd.c       ****  *  @details  ISR routine, called 10000 times per second
1690:irsnd.c       ****  *-------------------------------------------------------------------------------------------------
1691:irsnd.c       ****  */
1692:irsnd.c       **** uint8_t
1693:irsnd.c       **** irsnd_ISR (void)
1694:irsnd.c       **** {
 429               	.LM53:
 430               	.LFBB7:
 431 00be CF93      		push r28
 432 00c0 DF93      		push r29
 433               	/* prologue: function */
 434               	/* frame size = 0 */
 435               	/* stack size = 2 */
 436               	.L__stack_usage = 2
1695:irsnd.c       ****     static uint8_t              send_trailer                    = FALSE;
1696:irsnd.c       ****     static uint8_t              current_bit                     = 0xFF;
1697:irsnd.c       ****     static uint8_t              pulse_counter                   = 0;
1698:irsnd.c       ****     static IRSND_PAUSE_LEN      pause_counter                   = 0;
1699:irsnd.c       ****     static uint8_t              startbit_pulse_len              = 0;
1700:irsnd.c       ****     static IRSND_PAUSE_LEN      startbit_pause_len              = 0;
1701:irsnd.c       ****     static uint8_t              pulse_1_len                     = 0;
1702:irsnd.c       ****     static uint8_t              pause_1_len                     = 0;
1703:irsnd.c       ****     static uint8_t              pulse_0_len                     = 0;
1704:irsnd.c       ****     static uint8_t              pause_0_len                     = 0;
1705:irsnd.c       ****     static uint8_t              has_stop_bit                    = 0;
1706:irsnd.c       ****     static uint8_t              new_frame                       = TRUE;
1707:irsnd.c       ****     static uint8_t              complete_data_len               = 0;
1708:irsnd.c       ****     static uint8_t              n_repeat_frames                 = 0;                               
1709:irsnd.c       ****     static uint8_t              n_auto_repetitions              = 0;                               
1710:irsnd.c       ****     static uint8_t              auto_repetition_counter         = 0;                               
1711:irsnd.c       ****     static uint16_t             auto_repetition_pause_len       = 0;                               
1712:irsnd.c       ****     static uint16_t             auto_repetition_pause_counter   = 0;                               
1713:irsnd.c       ****     static uint8_t              repeat_counter                  = 0;                               
1714:irsnd.c       ****     static uint16_t             repeat_frame_pause_len          = 0;                               
1715:irsnd.c       ****     static uint16_t             packet_repeat_pause_counter     = 0;                               
1716:irsnd.c       **** #if IRSND_SUPPORT_BANG_OLUFSEN_PROTOCOL == 1
1717:irsnd.c       ****     static uint8_t              last_bit_value;
1718:irsnd.c       **** #endif
1719:irsnd.c       ****     static uint8_t              pulse_len = 0xFF;
1720:irsnd.c       ****     static IRSND_PAUSE_LEN      pause_len = 0xFF;
1721:irsnd.c       **** 
1722:irsnd.c       ****     if (irsnd_busy)
 438               	.LM54:
 439 00c2 8091 0000 		lds r24,irsnd_busy
 441               	.LM55:
 442 00c6 8823      		tst r24
 443 00c8 01F0      		breq .L24
1723:irsnd.c       ****     {
1724:irsnd.c       ****         if (current_bit == 0xFF && new_frame)                                       // start of tra
 445               	.LM56:
 446 00ca 2091 0000 		lds r18,current_bit.1704
 447 00ce 2F3F      		cpi r18,lo8(-1)
 448 00d0 01F0      		breq .+2
 449 00d2 00C0      		rjmp .L25
 451               	.LM57:
 452 00d4 8091 0000 		lds r24,new_frame.1714
 453 00d8 8823      		tst r24
 454 00da 01F4      		brne .+2
 455 00dc 00C0      		rjmp .L25
1725:irsnd.c       ****         {
1726:irsnd.c       ****             if (auto_repetition_counter > 0)
1727:irsnd.c       ****             {
1728:irsnd.c       ****                 auto_repetition_pause_counter++;
1729:irsnd.c       **** 
1730:irsnd.c       ****                 if (auto_repetition_pause_counter >= auto_repetition_pause_len)
1731:irsnd.c       ****                 {
1732:irsnd.c       ****                     auto_repetition_pause_counter = 0;
1733:irsnd.c       **** 
1734:irsnd.c       **** #if IRSND_SUPPORT_DENON_PROTOCOL == 1
1735:irsnd.c       ****                     if (irsnd_protocol == IRMP_DENON_PROTOCOL)                              // n'th
1736:irsnd.c       ****                     {
1737:irsnd.c       ****                         current_bit = 16;
1738:irsnd.c       ****                         complete_data_len   = 2 * DENON_COMPLETE_DATA_LEN + 1;
1739:irsnd.c       ****                     }
1740:irsnd.c       ****                     else
1741:irsnd.c       **** #endif
1742:irsnd.c       **** #if IRSND_SUPPORT_GRUNDIG_PROTOCOL == 1
1743:irsnd.c       ****                     if (irsnd_protocol == IRMP_GRUNDIG_PROTOCOL)                            // n'th
1744:irsnd.c       ****                     {
1745:irsnd.c       ****                         current_bit = 15;
1746:irsnd.c       ****                         complete_data_len   = 16 + GRUNDIG_COMPLETE_DATA_LEN;
1747:irsnd.c       ****                     }
1748:irsnd.c       ****                     else
1749:irsnd.c       **** #endif
1750:irsnd.c       **** #if IRSND_SUPPORT_IR60_PROTOCOL == 1
1751:irsnd.c       ****                     if (irsnd_protocol == IRMP_IR60_PROTOCOL)                               // n'th
1752:irsnd.c       ****                     {
1753:irsnd.c       ****                         current_bit = 7;
1754:irsnd.c       ****                         complete_data_len   = 2 * IR60_COMPLETE_DATA_LEN + 1;
1755:irsnd.c       ****                     }
1756:irsnd.c       ****                     else
1757:irsnd.c       **** #endif
1758:irsnd.c       **** #if IRSND_SUPPORT_NOKIA_PROTOCOL == 1
1759:irsnd.c       ****                     if (irsnd_protocol == IRMP_NOKIA_PROTOCOL)                              // n'th
1760:irsnd.c       ****                     {
1761:irsnd.c       ****                         if (auto_repetition_counter + 1 < n_auto_repetitions)
1762:irsnd.c       ****                         {
1763:irsnd.c       ****                             current_bit = 23;
1764:irsnd.c       ****                             complete_data_len   = 24 + NOKIA_COMPLETE_DATA_LEN;
1765:irsnd.c       ****                         }
1766:irsnd.c       ****                         else                                                                // noki
1767:irsnd.c       ****                         {
1768:irsnd.c       ****                             current_bit = 0xFF;
1769:irsnd.c       ****                             complete_data_len   = NOKIA_COMPLETE_DATA_LEN;
1770:irsnd.c       ****                         }
1771:irsnd.c       ****                     }
1772:irsnd.c       ****                     else
1773:irsnd.c       **** #endif
1774:irsnd.c       ****                     {
1775:irsnd.c       ****                         ;
1776:irsnd.c       ****                     }
1777:irsnd.c       ****                 }
1778:irsnd.c       ****                 else
1779:irsnd.c       ****                 {
1780:irsnd.c       **** #ifdef ANALYZE
1781:irsnd.c       ****                     if (irsnd_is_on)
1782:irsnd.c       ****                     {
1783:irsnd.c       ****                         putchar ('0');
1784:irsnd.c       ****                     }
1785:irsnd.c       ****                     else
1786:irsnd.c       ****                     {
1787:irsnd.c       ****                         putchar ('1');
1788:irsnd.c       ****                     }
1789:irsnd.c       **** #endif
1790:irsnd.c       ****                     return irsnd_busy;
1791:irsnd.c       ****                 }
1792:irsnd.c       ****             }
1793:irsnd.c       ****             else if (packet_repeat_pause_counter < repeat_frame_pause_len)
 457               	.LM58:
 458 00de 8091 0000 		lds r24,packet_repeat_pause_counter.1723
 459 00e2 9091 0000 		lds r25,packet_repeat_pause_counter.1723+1
 461               	.LM59:
 462 00e6 4091 0000 		lds r20,repeat_frame_pause_len.1722
 463 00ea 5091 0000 		lds r21,repeat_frame_pause_len.1722+1
 464 00ee 8417      		cp r24,r20
 465 00f0 9507      		cpc r25,r21
 466 00f2 00F4      		brsh .L26
1794:irsnd.c       ****             {
1795:irsnd.c       ****                 packet_repeat_pause_counter++;
 468               	.LM60:
 469 00f4 0196      		adiw r24,1
 470 00f6 9093 0000 		sts packet_repeat_pause_counter.1723+1,r25
 471 00fa 8093 0000 		sts packet_repeat_pause_counter.1723,r24
 472               	.L24:
1796:irsnd.c       **** #ifdef ANALYZE
1797:irsnd.c       ****                 if (irsnd_is_on)
1798:irsnd.c       ****                 {
1799:irsnd.c       ****                     putchar ('0');
1800:irsnd.c       ****                 }
1801:irsnd.c       ****                 else
1802:irsnd.c       ****                 {
1803:irsnd.c       ****                     putchar ('1');
1804:irsnd.c       ****                 }
1805:irsnd.c       **** #endif
1806:irsnd.c       ****                 return irsnd_busy;
1807:irsnd.c       ****             }
1808:irsnd.c       ****             else
1809:irsnd.c       ****             {
1810:irsnd.c       ****                 if (send_trailer)
1811:irsnd.c       ****                 {
1812:irsnd.c       ****                     irsnd_busy = FALSE;
1813:irsnd.c       ****                     send_trailer = FALSE;
1814:irsnd.c       ****                     return irsnd_busy;
1815:irsnd.c       ****                 }
1816:irsnd.c       **** 
1817:irsnd.c       ****                 n_repeat_frames             = irsnd_repeat;
1818:irsnd.c       **** 
1819:irsnd.c       ****                 if (n_repeat_frames == IRSND_ENDLESS_REPETITION)
1820:irsnd.c       ****                 {
1821:irsnd.c       ****                     n_repeat_frames = 255;
1822:irsnd.c       ****                 }
1823:irsnd.c       **** 
1824:irsnd.c       ****                 packet_repeat_pause_counter = 0;
1825:irsnd.c       ****                 pulse_counter               = 0;
1826:irsnd.c       ****                 pause_counter               = 0;
1827:irsnd.c       **** 
1828:irsnd.c       ****                 switch (irsnd_protocol)
1829:irsnd.c       ****                 {
1830:irsnd.c       **** #if IRSND_SUPPORT_SIRCS_PROTOCOL == 1
1831:irsnd.c       ****                     case IRMP_SIRCS_PROTOCOL:
1832:irsnd.c       ****                     {
1833:irsnd.c       ****                         startbit_pulse_len          = SIRCS_START_BIT_PULSE_LEN;
1834:irsnd.c       ****                         startbit_pause_len          = SIRCS_START_BIT_PAUSE_LEN - 1;
1835:irsnd.c       ****                         pulse_1_len                 = SIRCS_1_PULSE_LEN;
1836:irsnd.c       ****                         pause_1_len                 = SIRCS_PAUSE_LEN - 1;
1837:irsnd.c       ****                         pulse_0_len                 = SIRCS_0_PULSE_LEN;
1838:irsnd.c       ****                         pause_0_len                 = SIRCS_PAUSE_LEN - 1;
1839:irsnd.c       ****                         has_stop_bit                = SIRCS_STOP_BIT;
1840:irsnd.c       ****                         complete_data_len           = SIRCS_MINIMUM_DATA_LEN + sircs_additional_bit
1841:irsnd.c       ****                         n_auto_repetitions          = (repeat_counter == 0) ? SIRCS_FRAMES : 1;    
1842:irsnd.c       ****                         auto_repetition_pause_len   = SIRCS_AUTO_REPETITION_PAUSE_LEN;             
1843:irsnd.c       ****                         repeat_frame_pause_len      = SIRCS_FRAME_REPEAT_PAUSE_LEN;
1844:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_40_KHZ);
1845:irsnd.c       ****                         break;
1846:irsnd.c       ****                     }
1847:irsnd.c       **** #endif
1848:irsnd.c       **** #if IRSND_SUPPORT_NEC_PROTOCOL == 1
1849:irsnd.c       ****                     case IRMP_NEC_PROTOCOL:
1850:irsnd.c       ****                     case IRMP_ONKYO_PROTOCOL:
1851:irsnd.c       ****                     {
1852:irsnd.c       ****                         startbit_pulse_len          = NEC_START_BIT_PULSE_LEN;
1853:irsnd.c       **** 
1854:irsnd.c       ****                         if (repeat_counter > 0)
1855:irsnd.c       ****                         {
1856:irsnd.c       ****                             startbit_pause_len      = NEC_REPEAT_START_BIT_PAUSE_LEN - 1;
1857:irsnd.c       ****                             complete_data_len       = 0;
1858:irsnd.c       ****                         }
1859:irsnd.c       ****                         else
1860:irsnd.c       ****                         {
1861:irsnd.c       ****                             startbit_pause_len      = NEC_START_BIT_PAUSE_LEN - 1;
1862:irsnd.c       ****                             complete_data_len       = NEC_COMPLETE_DATA_LEN;
1863:irsnd.c       ****                         }
1864:irsnd.c       **** 
1865:irsnd.c       ****                         pulse_1_len                 = NEC_PULSE_LEN;
1866:irsnd.c       ****                         pause_1_len                 = NEC_1_PAUSE_LEN - 1;
1867:irsnd.c       ****                         pulse_0_len                 = NEC_PULSE_LEN;
1868:irsnd.c       ****                         pause_0_len                 = NEC_0_PAUSE_LEN - 1;
1869:irsnd.c       ****                         has_stop_bit                = NEC_STOP_BIT;
1870:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
1871:irsnd.c       ****                         auto_repetition_pause_len   = 0;
1872:irsnd.c       ****                         repeat_frame_pause_len      = NEC_FRAME_REPEAT_PAUSE_LEN;
1873:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
1874:irsnd.c       ****                         break;
1875:irsnd.c       ****                     }
1876:irsnd.c       **** #endif
1877:irsnd.c       **** #if IRSND_SUPPORT_NEC16_PROTOCOL == 1
1878:irsnd.c       ****                     case IRMP_NEC16_PROTOCOL:
1879:irsnd.c       ****                     {
1880:irsnd.c       ****                         startbit_pulse_len          = NEC_START_BIT_PULSE_LEN;
1881:irsnd.c       ****                         startbit_pause_len          = NEC_START_BIT_PAUSE_LEN - 1;
1882:irsnd.c       ****                         pulse_1_len                 = NEC_PULSE_LEN;
1883:irsnd.c       ****                         pause_1_len                 = NEC_1_PAUSE_LEN - 1;
1884:irsnd.c       ****                         pulse_0_len                 = NEC_PULSE_LEN;
1885:irsnd.c       ****                         pause_0_len                 = NEC_0_PAUSE_LEN - 1;
1886:irsnd.c       ****                         has_stop_bit                = NEC_STOP_BIT;
1887:irsnd.c       ****                         complete_data_len           = NEC16_COMPLETE_DATA_LEN + 1;                 
1888:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
1889:irsnd.c       ****                         auto_repetition_pause_len   = 0;
1890:irsnd.c       ****                         repeat_frame_pause_len      = NEC_FRAME_REPEAT_PAUSE_LEN;
1891:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
1892:irsnd.c       ****                         break;
1893:irsnd.c       ****                     }
1894:irsnd.c       **** #endif
1895:irsnd.c       **** #if IRSND_SUPPORT_NEC42_PROTOCOL == 1
1896:irsnd.c       ****                     case IRMP_NEC42_PROTOCOL:
1897:irsnd.c       ****                     {
1898:irsnd.c       ****                         startbit_pulse_len          = NEC_START_BIT_PULSE_LEN;
1899:irsnd.c       ****                         startbit_pause_len          = NEC_START_BIT_PAUSE_LEN - 1;
1900:irsnd.c       ****                         pulse_1_len                 = NEC_PULSE_LEN;
1901:irsnd.c       ****                         pause_1_len                 = NEC_1_PAUSE_LEN - 1;
1902:irsnd.c       ****                         pulse_0_len                 = NEC_PULSE_LEN;
1903:irsnd.c       ****                         pause_0_len                 = NEC_0_PAUSE_LEN - 1;
1904:irsnd.c       ****                         has_stop_bit                = NEC_STOP_BIT;
1905:irsnd.c       ****                         complete_data_len           = NEC42_COMPLETE_DATA_LEN;
1906:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
1907:irsnd.c       ****                         auto_repetition_pause_len   = 0;
1908:irsnd.c       ****                         repeat_frame_pause_len      = NEC_FRAME_REPEAT_PAUSE_LEN;
1909:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
1910:irsnd.c       ****                         break;
1911:irsnd.c       ****                     }
1912:irsnd.c       **** #endif
1913:irsnd.c       **** #if IRSND_SUPPORT_LGAIR_PROTOCOL == 1
1914:irsnd.c       ****                     case IRMP_LGAIR_PROTOCOL:
1915:irsnd.c       ****                     {
1916:irsnd.c       ****                         startbit_pulse_len          = NEC_START_BIT_PULSE_LEN;
1917:irsnd.c       ****                         startbit_pause_len          = NEC_START_BIT_PAUSE_LEN - 1;
1918:irsnd.c       ****                         pulse_1_len                 = NEC_PULSE_LEN;
1919:irsnd.c       ****                         pause_1_len                 = NEC_1_PAUSE_LEN - 1;
1920:irsnd.c       ****                         pulse_0_len                 = NEC_PULSE_LEN;
1921:irsnd.c       ****                         pause_0_len                 = NEC_0_PAUSE_LEN - 1;
1922:irsnd.c       ****                         has_stop_bit                = NEC_STOP_BIT;
1923:irsnd.c       ****                         complete_data_len           = LGAIR_COMPLETE_DATA_LEN;
1924:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
1925:irsnd.c       ****                         auto_repetition_pause_len   = 0;
1926:irsnd.c       ****                         repeat_frame_pause_len      = NEC_FRAME_REPEAT_PAUSE_LEN;
1927:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
1928:irsnd.c       ****                         break;
1929:irsnd.c       ****                     }
1930:irsnd.c       **** #endif
1931:irsnd.c       **** #if IRSND_SUPPORT_SAMSUNG_PROTOCOL == 1
1932:irsnd.c       ****                     case IRMP_SAMSUNG_PROTOCOL:
1933:irsnd.c       ****                     {
1934:irsnd.c       ****                         startbit_pulse_len          = SAMSUNG_START_BIT_PULSE_LEN;
1935:irsnd.c       ****                         startbit_pause_len          = SAMSUNG_START_BIT_PAUSE_LEN - 1;
1936:irsnd.c       ****                         pulse_1_len                 = SAMSUNG_PULSE_LEN;
1937:irsnd.c       ****                         pause_1_len                 = SAMSUNG_1_PAUSE_LEN - 1;
1938:irsnd.c       ****                         pulse_0_len                 = SAMSUNG_PULSE_LEN;
1939:irsnd.c       ****                         pause_0_len                 = SAMSUNG_0_PAUSE_LEN - 1;
1940:irsnd.c       ****                         has_stop_bit                = SAMSUNG_STOP_BIT;
1941:irsnd.c       ****                         complete_data_len           = SAMSUNG_COMPLETE_DATA_LEN;
1942:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
1943:irsnd.c       ****                         auto_repetition_pause_len   = 0;
1944:irsnd.c       ****                         repeat_frame_pause_len      = SAMSUNG_FRAME_REPEAT_PAUSE_LEN;
1945:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
1946:irsnd.c       ****                         break;
1947:irsnd.c       ****                     }
1948:irsnd.c       **** 
1949:irsnd.c       ****                     case IRMP_SAMSUNG32_PROTOCOL:
1950:irsnd.c       ****                     {
1951:irsnd.c       ****                         startbit_pulse_len          = SAMSUNG_START_BIT_PULSE_LEN;
1952:irsnd.c       ****                         startbit_pause_len          = SAMSUNG_START_BIT_PAUSE_LEN - 1;
1953:irsnd.c       ****                         pulse_1_len                 = SAMSUNG_PULSE_LEN;
1954:irsnd.c       ****                         pause_1_len                 = SAMSUNG_1_PAUSE_LEN - 1;
1955:irsnd.c       ****                         pulse_0_len                 = SAMSUNG_PULSE_LEN;
1956:irsnd.c       ****                         pause_0_len                 = SAMSUNG_0_PAUSE_LEN - 1;
1957:irsnd.c       ****                         has_stop_bit                = SAMSUNG_STOP_BIT;
1958:irsnd.c       ****                         complete_data_len           = SAMSUNG32_COMPLETE_DATA_LEN;
1959:irsnd.c       ****                         n_auto_repetitions          = SAMSUNG32_FRAMES;                            
1960:irsnd.c       ****                         auto_repetition_pause_len   = SAMSUNG32_AUTO_REPETITION_PAUSE_LEN;         
1961:irsnd.c       ****                         repeat_frame_pause_len      = SAMSUNG32_FRAME_REPEAT_PAUSE_LEN;
1962:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
1963:irsnd.c       ****                         break;
1964:irsnd.c       ****                     }
1965:irsnd.c       **** #endif
1966:irsnd.c       **** #if IRSND_SUPPORT_SAMSUNG48_PROTOCOL == 1
1967:irsnd.c       ****                     case IRMP_SAMSUNG48_PROTOCOL:
1968:irsnd.c       ****                     {
1969:irsnd.c       ****                         startbit_pulse_len          = SAMSUNG_START_BIT_PULSE_LEN;
1970:irsnd.c       ****                         startbit_pause_len          = SAMSUNG_START_BIT_PAUSE_LEN - 1;
1971:irsnd.c       ****                         pulse_1_len                 = SAMSUNG_PULSE_LEN;
1972:irsnd.c       ****                         pause_1_len                 = SAMSUNG_1_PAUSE_LEN - 1;
1973:irsnd.c       ****                         pulse_0_len                 = SAMSUNG_PULSE_LEN;
1974:irsnd.c       ****                         pause_0_len                 = SAMSUNG_0_PAUSE_LEN - 1;
1975:irsnd.c       ****                         has_stop_bit                = SAMSUNG_STOP_BIT;
1976:irsnd.c       ****                         complete_data_len           = SAMSUNG48_COMPLETE_DATA_LEN;
1977:irsnd.c       ****                         n_auto_repetitions          = SAMSUNG48_FRAMES;                            
1978:irsnd.c       ****                         auto_repetition_pause_len   = SAMSUNG48_AUTO_REPETITION_PAUSE_LEN;         
1979:irsnd.c       ****                         repeat_frame_pause_len      = SAMSUNG48_FRAME_REPEAT_PAUSE_LEN;
1980:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
1981:irsnd.c       ****                         break;
1982:irsnd.c       ****                     }
1983:irsnd.c       **** #endif
1984:irsnd.c       **** #if IRSND_SUPPORT_MATSUSHITA_PROTOCOL == 1
1985:irsnd.c       ****                     case IRMP_MATSUSHITA_PROTOCOL:
1986:irsnd.c       ****                     {
1987:irsnd.c       ****                         startbit_pulse_len          = MATSUSHITA_START_BIT_PULSE_LEN;
1988:irsnd.c       ****                         startbit_pause_len          = MATSUSHITA_START_BIT_PAUSE_LEN - 1;
1989:irsnd.c       ****                         pulse_1_len                 = MATSUSHITA_PULSE_LEN;
1990:irsnd.c       ****                         pause_1_len                 = MATSUSHITA_1_PAUSE_LEN - 1;
1991:irsnd.c       ****                         pulse_0_len                 = MATSUSHITA_PULSE_LEN;
1992:irsnd.c       ****                         pause_0_len                 = MATSUSHITA_0_PAUSE_LEN - 1;
1993:irsnd.c       ****                         has_stop_bit                = MATSUSHITA_STOP_BIT;
1994:irsnd.c       ****                         complete_data_len           = MATSUSHITA_COMPLETE_DATA_LEN;
1995:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
1996:irsnd.c       ****                         auto_repetition_pause_len   = 0;
1997:irsnd.c       ****                         repeat_frame_pause_len      = MATSUSHITA_FRAME_REPEAT_PAUSE_LEN;
1998:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
1999:irsnd.c       ****                         break;
2000:irsnd.c       ****                     }
2001:irsnd.c       **** #endif
2002:irsnd.c       **** #if IRSND_SUPPORT_TECHNICS_PROTOCOL == 1
2003:irsnd.c       ****                     case IRMP_TECHNICS_PROTOCOL:
2004:irsnd.c       ****                     {
2005:irsnd.c       ****                         startbit_pulse_len          = MATSUSHITA_START_BIT_PULSE_LEN;
2006:irsnd.c       ****                         startbit_pause_len          = MATSUSHITA_START_BIT_PAUSE_LEN - 1;
2007:irsnd.c       ****                         pulse_1_len                 = MATSUSHITA_PULSE_LEN;
2008:irsnd.c       ****                         pause_1_len                 = MATSUSHITA_1_PAUSE_LEN - 1;
2009:irsnd.c       ****                         pulse_0_len                 = MATSUSHITA_PULSE_LEN;
2010:irsnd.c       ****                         pause_0_len                 = MATSUSHITA_0_PAUSE_LEN - 1;
2011:irsnd.c       ****                         has_stop_bit                = MATSUSHITA_STOP_BIT;
2012:irsnd.c       ****                         complete_data_len           = TECHNICS_COMPLETE_DATA_LEN;                  
2013:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2014:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2015:irsnd.c       ****                         repeat_frame_pause_len      = MATSUSHITA_FRAME_REPEAT_PAUSE_LEN;
2016:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2017:irsnd.c       ****                         break;
2018:irsnd.c       ****                     }
2019:irsnd.c       **** #endif
2020:irsnd.c       **** #if IRSND_SUPPORT_KASEIKYO_PROTOCOL == 1
2021:irsnd.c       ****                     case IRMP_KASEIKYO_PROTOCOL:
2022:irsnd.c       ****                     {
2023:irsnd.c       ****                         startbit_pulse_len          = KASEIKYO_START_BIT_PULSE_LEN;
2024:irsnd.c       ****                         startbit_pause_len          = KASEIKYO_START_BIT_PAUSE_LEN - 1;
2025:irsnd.c       ****                         pulse_1_len                 = KASEIKYO_PULSE_LEN;
2026:irsnd.c       ****                         pause_1_len                 = KASEIKYO_1_PAUSE_LEN - 1;
2027:irsnd.c       ****                         pulse_0_len                 = KASEIKYO_PULSE_LEN;
2028:irsnd.c       ****                         pause_0_len                 = KASEIKYO_0_PAUSE_LEN - 1;
2029:irsnd.c       ****                         has_stop_bit                = KASEIKYO_STOP_BIT;
2030:irsnd.c       ****                         complete_data_len           = KASEIKYO_COMPLETE_DATA_LEN;
2031:irsnd.c       ****                         n_auto_repetitions          = (repeat_counter == 0) ? KASEIKYO_FRAMES : 1; 
2032:irsnd.c       ****                         auto_repetition_pause_len   = KASEIKYO_AUTO_REPETITION_PAUSE_LEN;          
2033:irsnd.c       ****                         repeat_frame_pause_len      = KASEIKYO_FRAME_REPEAT_PAUSE_LEN;
2034:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2035:irsnd.c       ****                         break;
2036:irsnd.c       ****                     }
2037:irsnd.c       **** #endif
2038:irsnd.c       **** #if IRSND_SUPPORT_PANASONIC_PROTOCOL == 1
2039:irsnd.c       ****                     case IRMP_PANASONIC_PROTOCOL:
2040:irsnd.c       ****                     {
2041:irsnd.c       ****                         startbit_pulse_len          = PANASONIC_START_BIT_PULSE_LEN;
2042:irsnd.c       ****                         startbit_pause_len          = PANASONIC_START_BIT_PAUSE_LEN - 1;
2043:irsnd.c       ****                         pulse_1_len                 = PANASONIC_PULSE_LEN;
2044:irsnd.c       ****                         pause_1_len                 = PANASONIC_1_PAUSE_LEN - 1;
2045:irsnd.c       ****                         pulse_0_len                 = PANASONIC_PULSE_LEN;
2046:irsnd.c       ****                         pause_0_len                 = PANASONIC_0_PAUSE_LEN - 1;
2047:irsnd.c       ****                         has_stop_bit                = PANASONIC_STOP_BIT;
2048:irsnd.c       ****                         complete_data_len           = PANASONIC_COMPLETE_DATA_LEN;
2049:irsnd.c       ****                         n_auto_repetitions          = PANASONIC_FRAMES;                            
2050:irsnd.c       ****                         auto_repetition_pause_len   = PANASONIC_AUTO_REPETITION_PAUSE_LEN;         
2051:irsnd.c       ****                         repeat_frame_pause_len      = PANASONIC_FRAME_REPEAT_PAUSE_LEN;
2052:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2053:irsnd.c       ****                         break;
2054:irsnd.c       ****                     }
2055:irsnd.c       **** #endif
2056:irsnd.c       **** #if IRSND_SUPPORT_MITSU_HEAVY_PROTOCOL == 1
2057:irsnd.c       ****                     case IRMP_MITSU_HEAVY_PROTOCOL:
2058:irsnd.c       ****                     {
2059:irsnd.c       ****                         startbit_pulse_len          = MITSU_HEAVY_START_BIT_PULSE_LEN;
2060:irsnd.c       ****                         startbit_pause_len          = MITSU_HEAVY_START_BIT_PAUSE_LEN - 1;
2061:irsnd.c       ****                         pulse_1_len                 = MITSU_HEAVY_PULSE_LEN;
2062:irsnd.c       ****                         pause_1_len                 = MITSU_HEAVY_1_PAUSE_LEN - 1;
2063:irsnd.c       ****                         pulse_0_len                 = MITSU_HEAVY_PULSE_LEN;
2064:irsnd.c       ****                         pause_0_len                 = MITSU_HEAVY_0_PAUSE_LEN - 1;
2065:irsnd.c       ****                         has_stop_bit                = MITSU_HEAVY_STOP_BIT;
2066:irsnd.c       ****                         complete_data_len           = MITSU_HEAVY_COMPLETE_DATA_LEN;
2067:irsnd.c       ****                         n_auto_repetitions          = MITSU_HEAVY_FRAMES;                          
2068:irsnd.c       ****                         auto_repetition_pause_len   = 0;;
2069:irsnd.c       ****                         repeat_frame_pause_len      = MITSU_HEAVY_FRAME_REPEAT_PAUSE_LEN;
2070:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_40_KHZ);
2071:irsnd.c       ****                         break;
2072:irsnd.c       ****                     }
2073:irsnd.c       **** #endif
2074:irsnd.c       **** #if IRSND_SUPPORT_RECS80_PROTOCOL == 1
2075:irsnd.c       ****                     case IRMP_RECS80_PROTOCOL:
2076:irsnd.c       ****                     {
2077:irsnd.c       ****                         startbit_pulse_len          = RECS80_START_BIT_PULSE_LEN;
2078:irsnd.c       ****                         startbit_pause_len          = RECS80_START_BIT_PAUSE_LEN - 1;
2079:irsnd.c       ****                         pulse_1_len                 = RECS80_PULSE_LEN;
2080:irsnd.c       ****                         pause_1_len                 = RECS80_1_PAUSE_LEN - 1;
2081:irsnd.c       ****                         pulse_0_len                 = RECS80_PULSE_LEN;
2082:irsnd.c       ****                         pause_0_len                 = RECS80_0_PAUSE_LEN - 1;
2083:irsnd.c       ****                         has_stop_bit                = RECS80_STOP_BIT;
2084:irsnd.c       ****                         complete_data_len           = RECS80_COMPLETE_DATA_LEN;
2085:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2086:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2087:irsnd.c       ****                         repeat_frame_pause_len      = RECS80_FRAME_REPEAT_PAUSE_LEN;
2088:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2089:irsnd.c       ****                         break;
2090:irsnd.c       ****                     }
2091:irsnd.c       **** #endif
2092:irsnd.c       **** #if IRSND_SUPPORT_RECS80EXT_PROTOCOL == 1
2093:irsnd.c       ****                     case IRMP_RECS80EXT_PROTOCOL:
2094:irsnd.c       ****                     {
2095:irsnd.c       ****                         startbit_pulse_len          = RECS80EXT_START_BIT_PULSE_LEN;
2096:irsnd.c       ****                         startbit_pause_len          = RECS80EXT_START_BIT_PAUSE_LEN - 1;
2097:irsnd.c       ****                         pulse_1_len                 = RECS80EXT_PULSE_LEN;
2098:irsnd.c       ****                         pause_1_len                 = RECS80EXT_1_PAUSE_LEN - 1;
2099:irsnd.c       ****                         pulse_0_len                 = RECS80EXT_PULSE_LEN;
2100:irsnd.c       ****                         pause_0_len                 = RECS80EXT_0_PAUSE_LEN - 1;
2101:irsnd.c       ****                         has_stop_bit                = RECS80EXT_STOP_BIT;
2102:irsnd.c       ****                         complete_data_len           = RECS80EXT_COMPLETE_DATA_LEN;
2103:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2104:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2105:irsnd.c       ****                         repeat_frame_pause_len      = RECS80EXT_FRAME_REPEAT_PAUSE_LEN;
2106:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2107:irsnd.c       ****                         break;
2108:irsnd.c       ****                     }
2109:irsnd.c       **** #endif
2110:irsnd.c       **** #if IRSND_SUPPORT_TELEFUNKEN_PROTOCOL == 1
2111:irsnd.c       ****                     case IRMP_TELEFUNKEN_PROTOCOL:
2112:irsnd.c       ****                     {
2113:irsnd.c       ****                         startbit_pulse_len          = TELEFUNKEN_START_BIT_PULSE_LEN;
2114:irsnd.c       ****                         startbit_pause_len          = TELEFUNKEN_START_BIT_PAUSE_LEN - 1;
2115:irsnd.c       ****                         pulse_1_len                 = TELEFUNKEN_PULSE_LEN;
2116:irsnd.c       ****                         pause_1_len                 = TELEFUNKEN_1_PAUSE_LEN - 1;
2117:irsnd.c       ****                         pulse_0_len                 = TELEFUNKEN_PULSE_LEN;
2118:irsnd.c       ****                         pause_0_len                 = TELEFUNKEN_0_PAUSE_LEN - 1;
2119:irsnd.c       ****                         has_stop_bit                = TELEFUNKEN_STOP_BIT;
2120:irsnd.c       ****                         complete_data_len           = TELEFUNKEN_COMPLETE_DATA_LEN;
2121:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2122:irsnd.c       ****                         auto_repetition_pause_len   = 0;                                           
2123:irsnd.c       ****                         repeat_frame_pause_len      = TELEFUNKEN_FRAME_REPEAT_PAUSE_LEN;           
2124:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2125:irsnd.c       ****                         break;
2126:irsnd.c       ****                     }
2127:irsnd.c       **** #endif
2128:irsnd.c       **** #if IRSND_SUPPORT_RC5_PROTOCOL == 1
2129:irsnd.c       ****                     case IRMP_RC5_PROTOCOL:
2130:irsnd.c       ****                     {
2131:irsnd.c       ****                         startbit_pulse_len          = RC5_BIT_LEN;
2132:irsnd.c       ****                         startbit_pause_len          = RC5_BIT_LEN;
2133:irsnd.c       ****                         pulse_len                   = RC5_BIT_LEN;
2134:irsnd.c       ****                         pause_len                   = RC5_BIT_LEN;
2135:irsnd.c       ****                         has_stop_bit                = RC5_STOP_BIT;
2136:irsnd.c       ****                         complete_data_len           = RC5_COMPLETE_DATA_LEN;
2137:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2138:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2139:irsnd.c       ****                         repeat_frame_pause_len      = RC5_FRAME_REPEAT_PAUSE_LEN;
2140:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2141:irsnd.c       ****                         break;
2142:irsnd.c       ****                     }
2143:irsnd.c       **** #endif
2144:irsnd.c       **** #if IRSND_SUPPORT_RC6_PROTOCOL == 1
2145:irsnd.c       ****                     case IRMP_RC6_PROTOCOL:
2146:irsnd.c       ****                     {
2147:irsnd.c       ****                         startbit_pulse_len          = RC6_START_BIT_PULSE_LEN;
2148:irsnd.c       ****                         startbit_pause_len          = RC6_START_BIT_PAUSE_LEN - 1;
2149:irsnd.c       ****                         pulse_len                   = RC6_BIT_LEN;
2150:irsnd.c       ****                         pause_len                   = RC6_BIT_LEN;
2151:irsnd.c       ****                         has_stop_bit                = RC6_STOP_BIT;
2152:irsnd.c       ****                         complete_data_len           = RC6_COMPLETE_DATA_LEN_SHORT;
2153:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2154:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2155:irsnd.c       ****                         repeat_frame_pause_len      = RC6_FRAME_REPEAT_PAUSE_LEN;
2156:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2157:irsnd.c       ****                         break;
2158:irsnd.c       ****                     }
2159:irsnd.c       **** #endif
2160:irsnd.c       **** #if IRSND_SUPPORT_RC6A_PROTOCOL == 1
2161:irsnd.c       ****                     case IRMP_RC6A_PROTOCOL:
2162:irsnd.c       ****                     {
2163:irsnd.c       ****                         startbit_pulse_len          = RC6_START_BIT_PULSE_LEN;
2164:irsnd.c       ****                         startbit_pause_len          = RC6_START_BIT_PAUSE_LEN - 1;
2165:irsnd.c       ****                         pulse_len                   = RC6_BIT_LEN;
2166:irsnd.c       ****                         pause_len                   = RC6_BIT_LEN;
2167:irsnd.c       ****                         has_stop_bit                = RC6_STOP_BIT;
2168:irsnd.c       ****                         complete_data_len           = RC6_COMPLETE_DATA_LEN_LONG;
2169:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2170:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2171:irsnd.c       ****                         repeat_frame_pause_len      = RC6_FRAME_REPEAT_PAUSE_LEN;
2172:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2173:irsnd.c       ****                         break;
2174:irsnd.c       ****                     }
2175:irsnd.c       **** #endif
2176:irsnd.c       **** #if IRSND_SUPPORT_DENON_PROTOCOL == 1
2177:irsnd.c       ****                     case IRMP_DENON_PROTOCOL:
2178:irsnd.c       ****                     {
2179:irsnd.c       ****                         startbit_pulse_len          = 0x00;
2180:irsnd.c       ****                         startbit_pause_len          = 0x00;
2181:irsnd.c       ****                         pulse_1_len                 = DENON_PULSE_LEN;
2182:irsnd.c       ****                         pause_1_len                 = DENON_1_PAUSE_LEN - 1;
2183:irsnd.c       ****                         pulse_0_len                 = DENON_PULSE_LEN;
2184:irsnd.c       ****                         pause_0_len                 = DENON_0_PAUSE_LEN - 1;
2185:irsnd.c       ****                         has_stop_bit                = DENON_STOP_BIT;
2186:irsnd.c       ****                         complete_data_len           = DENON_COMPLETE_DATA_LEN;
2187:irsnd.c       ****                         n_auto_repetitions          = DENON_FRAMES;                                
2188:irsnd.c       ****                         auto_repetition_pause_len   = DENON_AUTO_REPETITION_PAUSE_LEN;             
2189:irsnd.c       ****                         repeat_frame_pause_len      = DENON_FRAME_REPEAT_PAUSE_LEN;
2190:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);                                        
2191:irsnd.c       ****                         break;
2192:irsnd.c       ****                     }
2193:irsnd.c       **** #endif
2194:irsnd.c       **** #if IRSND_SUPPORT_THOMSON_PROTOCOL == 1
2195:irsnd.c       ****                     case IRMP_THOMSON_PROTOCOL:
2196:irsnd.c       ****                     {
2197:irsnd.c       ****                         startbit_pulse_len          = 0x00;
2198:irsnd.c       ****                         startbit_pause_len          = 0x00;
2199:irsnd.c       ****                         pulse_1_len                 = THOMSON_PULSE_LEN;
2200:irsnd.c       ****                         pause_1_len                 = THOMSON_1_PAUSE_LEN - 1;
2201:irsnd.c       ****                         pulse_0_len                 = THOMSON_PULSE_LEN;
2202:irsnd.c       ****                         pause_0_len                 = THOMSON_0_PAUSE_LEN - 1;
2203:irsnd.c       ****                         has_stop_bit                = THOMSON_STOP_BIT;
2204:irsnd.c       ****                         complete_data_len           = THOMSON_COMPLETE_DATA_LEN;
2205:irsnd.c       ****                         n_auto_repetitions          = THOMSON_FRAMES;                              
2206:irsnd.c       ****                         auto_repetition_pause_len   = THOMSON_AUTO_REPETITION_PAUSE_LEN;
2207:irsnd.c       ****                         repeat_frame_pause_len      = THOMSON_FRAME_REPEAT_PAUSE_LEN;
2208:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2209:irsnd.c       ****                         break;
2210:irsnd.c       ****                     }
2211:irsnd.c       **** #endif
2212:irsnd.c       **** #if IRSND_SUPPORT_BOSE_PROTOCOL == 1
2213:irsnd.c       ****                     case IRMP_BOSE_PROTOCOL:
2214:irsnd.c       ****                     {
2215:irsnd.c       ****                         startbit_pulse_len          = BOSE_START_BIT_PULSE_LEN;
2216:irsnd.c       ****                         startbit_pause_len          = BOSE_START_BIT_PAUSE_LEN - 1;
2217:irsnd.c       ****                         pulse_1_len                 = BOSE_PULSE_LEN;
2218:irsnd.c       ****                         pause_1_len                 = BOSE_1_PAUSE_LEN - 1;
2219:irsnd.c       ****                         pulse_0_len                 = BOSE_PULSE_LEN;
2220:irsnd.c       ****                         pause_0_len                 = BOSE_0_PAUSE_LEN - 1;
2221:irsnd.c       ****                         has_stop_bit                = BOSE_STOP_BIT;
2222:irsnd.c       ****                         complete_data_len           = BOSE_COMPLETE_DATA_LEN;
2223:irsnd.c       ****                         n_auto_repetitions          = BOSE_FRAMES;                                /
2224:irsnd.c       ****                         auto_repetition_pause_len   = BOSE_AUTO_REPETITION_PAUSE_LEN;             /
2225:irsnd.c       ****                         repeat_frame_pause_len      = BOSE_FRAME_REPEAT_PAUSE_LEN;
2226:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2227:irsnd.c       ****                         break;
2228:irsnd.c       ****                     }
2229:irsnd.c       **** #endif
2230:irsnd.c       **** #if IRSND_SUPPORT_NUBERT_PROTOCOL == 1
2231:irsnd.c       ****                     case IRMP_NUBERT_PROTOCOL:
2232:irsnd.c       ****                     {
2233:irsnd.c       ****                         startbit_pulse_len          = NUBERT_START_BIT_PULSE_LEN;
2234:irsnd.c       ****                         startbit_pause_len          = NUBERT_START_BIT_PAUSE_LEN - 1;
2235:irsnd.c       ****                         pulse_1_len                 = NUBERT_1_PULSE_LEN;
2236:irsnd.c       ****                         pause_1_len                 = NUBERT_1_PAUSE_LEN - 1;
2237:irsnd.c       ****                         pulse_0_len                 = NUBERT_0_PULSE_LEN;
2238:irsnd.c       ****                         pause_0_len                 = NUBERT_0_PAUSE_LEN - 1;
2239:irsnd.c       ****                         has_stop_bit                = NUBERT_STOP_BIT;
2240:irsnd.c       ****                         complete_data_len           = NUBERT_COMPLETE_DATA_LEN;
2241:irsnd.c       ****                         n_auto_repetitions          = NUBERT_FRAMES;                               
2242:irsnd.c       ****                         auto_repetition_pause_len   = NUBERT_AUTO_REPETITION_PAUSE_LEN;            
2243:irsnd.c       ****                         repeat_frame_pause_len      = NUBERT_FRAME_REPEAT_PAUSE_LEN;
2244:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2245:irsnd.c       ****                         break;
2246:irsnd.c       ****                     }
2247:irsnd.c       **** #endif
2248:irsnd.c       **** #if IRSND_SUPPORT_FAN_PROTOCOL == 1
2249:irsnd.c       ****                     case IRMP_FAN_PROTOCOL:
2250:irsnd.c       ****                     {
2251:irsnd.c       ****                         startbit_pulse_len          = FAN_START_BIT_PULSE_LEN;
2252:irsnd.c       ****                         startbit_pause_len          = FAN_START_BIT_PAUSE_LEN - 1;
2253:irsnd.c       ****                         pulse_1_len                 = FAN_1_PULSE_LEN;
2254:irsnd.c       ****                         pause_1_len                 = FAN_1_PAUSE_LEN - 1;
2255:irsnd.c       ****                         pulse_0_len                 = FAN_0_PULSE_LEN;
2256:irsnd.c       ****                         pause_0_len                 = FAN_0_PAUSE_LEN - 1;
2257:irsnd.c       ****                         has_stop_bit                = FAN_STOP_BIT;
2258:irsnd.c       ****                         complete_data_len           = FAN_COMPLETE_DATA_LEN;
2259:irsnd.c       ****                         n_auto_repetitions          = FAN_FRAMES;                                  
2260:irsnd.c       ****                         auto_repetition_pause_len   = FAN_AUTO_REPETITION_PAUSE_LEN;               
2261:irsnd.c       ****                         repeat_frame_pause_len      = FAN_FRAME_REPEAT_PAUSE_LEN;
2262:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2263:irsnd.c       ****                         break;
2264:irsnd.c       ****                     }
2265:irsnd.c       **** #endif
2266:irsnd.c       **** #if IRSND_SUPPORT_SPEAKER_PROTOCOL == 1
2267:irsnd.c       ****                     case IRMP_SPEAKER_PROTOCOL:
2268:irsnd.c       ****                     {
2269:irsnd.c       ****                         startbit_pulse_len          = SPEAKER_START_BIT_PULSE_LEN;
2270:irsnd.c       ****                         startbit_pause_len          = SPEAKER_START_BIT_PAUSE_LEN - 1;
2271:irsnd.c       ****                         pulse_1_len                 = SPEAKER_1_PULSE_LEN;
2272:irsnd.c       ****                         pause_1_len                 = SPEAKER_1_PAUSE_LEN - 1;
2273:irsnd.c       ****                         pulse_0_len                 = SPEAKER_0_PULSE_LEN;
2274:irsnd.c       ****                         pause_0_len                 = SPEAKER_0_PAUSE_LEN - 1;
2275:irsnd.c       ****                         has_stop_bit                = SPEAKER_STOP_BIT;
2276:irsnd.c       ****                         complete_data_len           = SPEAKER_COMPLETE_DATA_LEN;
2277:irsnd.c       ****                         n_auto_repetitions          = SPEAKER_FRAMES;                              
2278:irsnd.c       ****                         auto_repetition_pause_len   = SPEAKER_AUTO_REPETITION_PAUSE_LEN;           
2279:irsnd.c       ****                         repeat_frame_pause_len      = SPEAKER_FRAME_REPEAT_PAUSE_LEN;
2280:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2281:irsnd.c       ****                         break;
2282:irsnd.c       ****                     }
2283:irsnd.c       **** #endif
2284:irsnd.c       **** #if IRSND_SUPPORT_BANG_OLUFSEN_PROTOCOL == 1
2285:irsnd.c       ****                     case IRMP_BANG_OLUFSEN_PROTOCOL:
2286:irsnd.c       ****                     {
2287:irsnd.c       ****                         startbit_pulse_len          = BANG_OLUFSEN_START_BIT1_PULSE_LEN;
2288:irsnd.c       ****                         startbit_pause_len          = BANG_OLUFSEN_START_BIT1_PAUSE_LEN - 1;
2289:irsnd.c       ****                         pulse_1_len                 = BANG_OLUFSEN_PULSE_LEN;
2290:irsnd.c       ****                         pause_1_len                 = BANG_OLUFSEN_1_PAUSE_LEN - 1;
2291:irsnd.c       ****                         pulse_0_len                 = BANG_OLUFSEN_PULSE_LEN;
2292:irsnd.c       ****                         pause_0_len                 = BANG_OLUFSEN_0_PAUSE_LEN - 1;
2293:irsnd.c       ****                         has_stop_bit                = BANG_OLUFSEN_STOP_BIT;
2294:irsnd.c       ****                         complete_data_len           = BANG_OLUFSEN_COMPLETE_DATA_LEN;
2295:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2296:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2297:irsnd.c       ****                         repeat_frame_pause_len      = BANG_OLUFSEN_FRAME_REPEAT_PAUSE_LEN;
2298:irsnd.c       ****                         last_bit_value              = 0;
2299:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_455_KHZ);
2300:irsnd.c       ****                         break;
2301:irsnd.c       ****                     }
2302:irsnd.c       **** #endif
2303:irsnd.c       **** #if IRSND_SUPPORT_GRUNDIG_PROTOCOL == 1
2304:irsnd.c       ****                     case IRMP_GRUNDIG_PROTOCOL:
2305:irsnd.c       ****                     {
2306:irsnd.c       ****                         startbit_pulse_len          = GRUNDIG_NOKIA_IR60_BIT_LEN;
2307:irsnd.c       ****                         startbit_pause_len          = GRUNDIG_NOKIA_IR60_PRE_PAUSE_LEN - 1;
2308:irsnd.c       ****                         pulse_len                   = GRUNDIG_NOKIA_IR60_BIT_LEN;
2309:irsnd.c       ****                         pause_len                   = GRUNDIG_NOKIA_IR60_BIT_LEN;
2310:irsnd.c       ****                         has_stop_bit                = GRUNDIG_NOKIA_IR60_STOP_BIT;
2311:irsnd.c       ****                         complete_data_len           = GRUNDIG_COMPLETE_DATA_LEN;
2312:irsnd.c       ****                         n_auto_repetitions          = GRUNDIG_FRAMES;                              
2313:irsnd.c       ****                         auto_repetition_pause_len   = GRUNDIG_AUTO_REPETITION_PAUSE_LEN;           
2314:irsnd.c       ****                         repeat_frame_pause_len      = GRUNDIG_NOKIA_IR60_FRAME_REPEAT_PAUSE_LEN;   
2315:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2316:irsnd.c       ****                         break;
2317:irsnd.c       ****                     }
2318:irsnd.c       **** #endif
2319:irsnd.c       **** #if IRSND_SUPPORT_IR60_PROTOCOL == 1
2320:irsnd.c       ****                     case IRMP_IR60_PROTOCOL:
2321:irsnd.c       ****                     {
2322:irsnd.c       ****                         startbit_pulse_len          = GRUNDIG_NOKIA_IR60_BIT_LEN;
2323:irsnd.c       ****                         startbit_pause_len          = GRUNDIG_NOKIA_IR60_PRE_PAUSE_LEN - 1;
2324:irsnd.c       ****                         pulse_len                   = GRUNDIG_NOKIA_IR60_BIT_LEN;
2325:irsnd.c       ****                         pause_len                   = GRUNDIG_NOKIA_IR60_BIT_LEN;
2326:irsnd.c       ****                         has_stop_bit                = GRUNDIG_NOKIA_IR60_STOP_BIT;
2327:irsnd.c       ****                         complete_data_len           = IR60_COMPLETE_DATA_LEN;
2328:irsnd.c       ****                         n_auto_repetitions          = IR60_FRAMES;                                 
2329:irsnd.c       ****                         auto_repetition_pause_len   = IR60_AUTO_REPETITION_PAUSE_LEN;              
2330:irsnd.c       ****                         repeat_frame_pause_len      = GRUNDIG_NOKIA_IR60_FRAME_REPEAT_PAUSE_LEN;   
2331:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_30_KHZ);
2332:irsnd.c       ****                         break;
2333:irsnd.c       ****                     }
2334:irsnd.c       **** #endif
2335:irsnd.c       **** #if IRSND_SUPPORT_NOKIA_PROTOCOL == 1
2336:irsnd.c       ****                     case IRMP_NOKIA_PROTOCOL:
2337:irsnd.c       ****                     {
2338:irsnd.c       ****                         startbit_pulse_len          = GRUNDIG_NOKIA_IR60_BIT_LEN;
2339:irsnd.c       ****                         startbit_pause_len          = GRUNDIG_NOKIA_IR60_PRE_PAUSE_LEN - 1;
2340:irsnd.c       ****                         pulse_len                   = GRUNDIG_NOKIA_IR60_BIT_LEN;
2341:irsnd.c       ****                         pause_len                   = GRUNDIG_NOKIA_IR60_BIT_LEN;
2342:irsnd.c       ****                         has_stop_bit                = GRUNDIG_NOKIA_IR60_STOP_BIT;
2343:irsnd.c       ****                         complete_data_len           = NOKIA_COMPLETE_DATA_LEN;
2344:irsnd.c       ****                         n_auto_repetitions          = NOKIA_FRAMES;                                
2345:irsnd.c       ****                         auto_repetition_pause_len   = NOKIA_AUTO_REPETITION_PAUSE_LEN;             
2346:irsnd.c       ****                         repeat_frame_pause_len      = GRUNDIG_NOKIA_IR60_FRAME_REPEAT_PAUSE_LEN;   
2347:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2348:irsnd.c       ****                         break;
2349:irsnd.c       ****                     }
2350:irsnd.c       **** #endif
2351:irsnd.c       **** #if IRSND_SUPPORT_SIEMENS_PROTOCOL == 1
2352:irsnd.c       ****                     case IRMP_SIEMENS_PROTOCOL:
2353:irsnd.c       ****                     {
2354:irsnd.c       ****                         startbit_pulse_len          = SIEMENS_BIT_LEN;
2355:irsnd.c       ****                         startbit_pause_len          = SIEMENS_BIT_LEN;
2356:irsnd.c       ****                         pulse_len                   = SIEMENS_BIT_LEN;
2357:irsnd.c       ****                         pause_len                   = SIEMENS_BIT_LEN;
2358:irsnd.c       ****                         has_stop_bit                = SIEMENS_OR_RUWIDO_STOP_BIT;
2359:irsnd.c       ****                         complete_data_len           = SIEMENS_COMPLETE_DATA_LEN;
2360:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2361:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2362:irsnd.c       ****                         repeat_frame_pause_len      = SIEMENS_FRAME_REPEAT_PAUSE_LEN;
2363:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2364:irsnd.c       ****                         break;
2365:irsnd.c       ****                     }
2366:irsnd.c       **** #endif
2367:irsnd.c       **** #if IRSND_SUPPORT_RUWIDO_PROTOCOL == 1
2368:irsnd.c       ****                     case IRMP_RUWIDO_PROTOCOL:
2369:irsnd.c       ****                     {
2370:irsnd.c       ****                         startbit_pulse_len          = RUWIDO_START_BIT_PULSE_LEN;
2371:irsnd.c       ****                         startbit_pause_len          = RUWIDO_START_BIT_PAUSE_LEN;
2372:irsnd.c       ****                         pulse_len                   = RUWIDO_BIT_PULSE_LEN;
2373:irsnd.c       ****                         pause_len                   = RUWIDO_BIT_PAUSE_LEN;
2374:irsnd.c       ****                         has_stop_bit                = SIEMENS_OR_RUWIDO_STOP_BIT;
2375:irsnd.c       ****                         complete_data_len           = RUWIDO_COMPLETE_DATA_LEN;
2376:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2377:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2378:irsnd.c       ****                         repeat_frame_pause_len      = RUWIDO_FRAME_REPEAT_PAUSE_LEN;
2379:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
2380:irsnd.c       ****                         break;
2381:irsnd.c       ****                     }
2382:irsnd.c       **** #endif
2383:irsnd.c       **** #if IRSND_SUPPORT_FDC_PROTOCOL == 1
2384:irsnd.c       ****                     case IRMP_FDC_PROTOCOL:
2385:irsnd.c       ****                     {
2386:irsnd.c       ****                         startbit_pulse_len          = FDC_START_BIT_PULSE_LEN;
2387:irsnd.c       ****                         startbit_pause_len          = FDC_START_BIT_PAUSE_LEN - 1;
2388:irsnd.c       ****                         complete_data_len           = FDC_COMPLETE_DATA_LEN;
2389:irsnd.c       ****                         pulse_1_len                 = FDC_PULSE_LEN;
2390:irsnd.c       ****                         pause_1_len                 = FDC_1_PAUSE_LEN - 1;
2391:irsnd.c       ****                         pulse_0_len                 = FDC_PULSE_LEN;
2392:irsnd.c       ****                         pause_0_len                 = FDC_0_PAUSE_LEN - 1;
2393:irsnd.c       ****                         has_stop_bit                = FDC_STOP_BIT;
2394:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2395:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2396:irsnd.c       ****                         repeat_frame_pause_len      = FDC_FRAME_REPEAT_PAUSE_LEN;
2397:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2398:irsnd.c       ****                         break;
2399:irsnd.c       ****                     }
2400:irsnd.c       **** #endif
2401:irsnd.c       **** #if IRSND_SUPPORT_RCCAR_PROTOCOL == 1
2402:irsnd.c       ****                     case IRMP_RCCAR_PROTOCOL:
2403:irsnd.c       ****                     {
2404:irsnd.c       ****                         startbit_pulse_len          = RCCAR_START_BIT_PULSE_LEN;
2405:irsnd.c       ****                         startbit_pause_len          = RCCAR_START_BIT_PAUSE_LEN - 1;
2406:irsnd.c       ****                         complete_data_len           = RCCAR_COMPLETE_DATA_LEN;
2407:irsnd.c       ****                         pulse_1_len                 = RCCAR_PULSE_LEN;
2408:irsnd.c       ****                         pause_1_len                 = RCCAR_1_PAUSE_LEN - 1;
2409:irsnd.c       ****                         pulse_0_len                 = RCCAR_PULSE_LEN;
2410:irsnd.c       ****                         pause_0_len                 = RCCAR_0_PAUSE_LEN - 1;
2411:irsnd.c       ****                         has_stop_bit                = RCCAR_STOP_BIT;
2412:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2413:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2414:irsnd.c       ****                         repeat_frame_pause_len      = RCCAR_FRAME_REPEAT_PAUSE_LEN;
2415:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2416:irsnd.c       ****                         break;
2417:irsnd.c       ****                     }
2418:irsnd.c       **** #endif
2419:irsnd.c       **** #if IRSND_SUPPORT_JVC_PROTOCOL == 1
2420:irsnd.c       ****                     case IRMP_JVC_PROTOCOL:
2421:irsnd.c       ****                     {
2422:irsnd.c       ****                         if (repeat_counter != 0)                                                   
2423:irsnd.c       ****                         {
2424:irsnd.c       ****                             current_bit = 0;
2425:irsnd.c       ****                         }
2426:irsnd.c       **** 
2427:irsnd.c       ****                         startbit_pulse_len          = JVC_START_BIT_PULSE_LEN;
2428:irsnd.c       ****                         startbit_pause_len          = JVC_START_BIT_PAUSE_LEN - 1;
2429:irsnd.c       ****                         complete_data_len           = JVC_COMPLETE_DATA_LEN;
2430:irsnd.c       ****                         pulse_1_len                 = JVC_PULSE_LEN;
2431:irsnd.c       ****                         pause_1_len                 = JVC_1_PAUSE_LEN - 1;
2432:irsnd.c       ****                         pulse_0_len                 = JVC_PULSE_LEN;
2433:irsnd.c       ****                         pause_0_len                 = JVC_0_PAUSE_LEN - 1;
2434:irsnd.c       ****                         has_stop_bit                = JVC_STOP_BIT;
2435:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2436:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2437:irsnd.c       ****                         repeat_frame_pause_len      = JVC_FRAME_REPEAT_PAUSE_LEN;
2438:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2439:irsnd.c       ****                         break;
2440:irsnd.c       ****                     }
2441:irsnd.c       **** #endif
2442:irsnd.c       **** #if IRSND_SUPPORT_NIKON_PROTOCOL == 1
2443:irsnd.c       ****                     case IRMP_NIKON_PROTOCOL:
2444:irsnd.c       ****                     {
2445:irsnd.c       ****                         startbit_pulse_len          = NIKON_START_BIT_PULSE_LEN;
2446:irsnd.c       ****                         startbit_pause_len          = NIKON_START_BIT_PAUSE_LEN;
2447:irsnd.c       ****                         complete_data_len           = NIKON_COMPLETE_DATA_LEN;
2448:irsnd.c       ****                         pulse_1_len                 = NIKON_PULSE_LEN;
2449:irsnd.c       ****                         pause_1_len                 = NIKON_1_PAUSE_LEN - 1;
2450:irsnd.c       ****                         pulse_0_len                 = NIKON_PULSE_LEN;
2451:irsnd.c       ****                         pause_0_len                 = NIKON_0_PAUSE_LEN - 1;
2452:irsnd.c       ****                         has_stop_bit                = NIKON_STOP_BIT;
2453:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2454:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2455:irsnd.c       ****                         repeat_frame_pause_len      = NIKON_FRAME_REPEAT_PAUSE_LEN;
2456:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2457:irsnd.c       ****                         break;
2458:irsnd.c       ****                     }
2459:irsnd.c       **** #endif
2460:irsnd.c       **** #if IRSND_SUPPORT_LEGO_PROTOCOL == 1
2461:irsnd.c       ****                     case IRMP_LEGO_PROTOCOL:
2462:irsnd.c       ****                     {
2463:irsnd.c       ****                         startbit_pulse_len          = LEGO_START_BIT_PULSE_LEN;
2464:irsnd.c       ****                         startbit_pause_len          = LEGO_START_BIT_PAUSE_LEN - 1;
2465:irsnd.c       ****                         complete_data_len           = LEGO_COMPLETE_DATA_LEN;
2466:irsnd.c       ****                         pulse_1_len                 = LEGO_PULSE_LEN;
2467:irsnd.c       ****                         pause_1_len                 = LEGO_1_PAUSE_LEN - 1;
2468:irsnd.c       ****                         pulse_0_len                 = LEGO_PULSE_LEN;
2469:irsnd.c       ****                         pause_0_len                 = LEGO_0_PAUSE_LEN - 1;
2470:irsnd.c       ****                         has_stop_bit                = LEGO_STOP_BIT;
2471:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2472:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2473:irsnd.c       ****                         repeat_frame_pause_len      = LEGO_FRAME_REPEAT_PAUSE_LEN;
2474:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2475:irsnd.c       ****                         break;
2476:irsnd.c       ****                     }
2477:irsnd.c       **** #endif
2478:irsnd.c       **** #if IRSND_SUPPORT_IRMP16_PROTOCOL == 1
2479:irsnd.c       ****                     case IRMP_IRMP16_PROTOCOL:
2480:irsnd.c       ****                     {
2481:irsnd.c       ****                         startbit_pulse_len          = IRMP16_START_BIT_PULSE_LEN;
2482:irsnd.c       ****                         startbit_pause_len          = IRMP16_START_BIT_PAUSE_LEN - 1;
2483:irsnd.c       ****                         complete_data_len           = IRMP16_COMPLETE_DATA_LEN;
2484:irsnd.c       ****                         pulse_1_len                 = IRMP16_PULSE_LEN;
2485:irsnd.c       ****                         pause_1_len                 = IRMP16_1_PAUSE_LEN - 1;
2486:irsnd.c       ****                         pulse_0_len                 = IRMP16_PULSE_LEN;
2487:irsnd.c       ****                         pause_0_len                 = IRMP16_0_PAUSE_LEN - 1;
2488:irsnd.c       ****                         has_stop_bit                = IRMP16_STOP_BIT;
2489:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2490:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2491:irsnd.c       ****                         repeat_frame_pause_len      = IRMP16_FRAME_REPEAT_PAUSE_LEN;
2492:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2493:irsnd.c       ****                         break;
2494:irsnd.c       ****                     }
2495:irsnd.c       **** #endif
2496:irsnd.c       **** #if IRSND_SUPPORT_A1TVBOX_PROTOCOL == 1
2497:irsnd.c       ****                     case IRMP_A1TVBOX_PROTOCOL:
2498:irsnd.c       ****                     {
2499:irsnd.c       ****                         startbit_pulse_len          = A1TVBOX_BIT_PULSE_LEN;                       
2500:irsnd.c       ****                         startbit_pause_len          = A1TVBOX_BIT_PAUSE_LEN;                       
2501:irsnd.c       ****                         pulse_len                   = A1TVBOX_BIT_PULSE_LEN;
2502:irsnd.c       ****                         pause_len                   = A1TVBOX_BIT_PAUSE_LEN;
2503:irsnd.c       ****                         has_stop_bit                = A1TVBOX_STOP_BIT;
2504:irsnd.c       ****                         complete_data_len           = A1TVBOX_COMPLETE_DATA_LEN + 1;               
2505:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2506:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2507:irsnd.c       ****                         repeat_frame_pause_len      = A1TVBOX_FRAME_REPEAT_PAUSE_LEN;
2508:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2509:irsnd.c       ****                         break;
2510:irsnd.c       ****                     }
2511:irsnd.c       **** #endif
2512:irsnd.c       **** #if IRSND_SUPPORT_ROOMBA_PROTOCOL == 1
2513:irsnd.c       ****                     case IRMP_ROOMBA_PROTOCOL:
2514:irsnd.c       ****                     {
2515:irsnd.c       ****                         startbit_pulse_len          = ROOMBA_START_BIT_PULSE_LEN;
2516:irsnd.c       ****                         startbit_pause_len          = ROOMBA_START_BIT_PAUSE_LEN;
2517:irsnd.c       ****                         pulse_1_len                 = ROOMBA_1_PULSE_LEN;
2518:irsnd.c       ****                         pause_1_len                 = ROOMBA_1_PAUSE_LEN - 1;
2519:irsnd.c       ****                         pulse_0_len                 = ROOMBA_0_PULSE_LEN;
2520:irsnd.c       ****                         pause_0_len                 = ROOMBA_0_PAUSE_LEN - 1;
2521:irsnd.c       ****                         has_stop_bit                = ROOMBA_STOP_BIT;
2522:irsnd.c       ****                         complete_data_len           = ROOMBA_COMPLETE_DATA_LEN;
2523:irsnd.c       ****                         n_auto_repetitions          = ROOMBA_FRAMES;                               
2524:irsnd.c       ****                         auto_repetition_pause_len   = ROOMBA_FRAME_REPEAT_PAUSE_LEN;
2525:irsnd.c       ****                         repeat_frame_pause_len      = ROOMBA_FRAME_REPEAT_PAUSE_LEN;
2526:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2527:irsnd.c       ****                         break;
2528:irsnd.c       ****                     }
2529:irsnd.c       **** #endif
2530:irsnd.c       **** #if IRSND_SUPPORT_PENTAX_PROTOCOL == 1
2531:irsnd.c       ****                     case IRMP_PENTAX_PROTOCOL:
2532:irsnd.c       ****                     {
2533:irsnd.c       ****                         startbit_pulse_len          = PENTAX_START_BIT_PULSE_LEN;
2534:irsnd.c       ****                         startbit_pause_len          = PENTAX_START_BIT_PAUSE_LEN;
2535:irsnd.c       ****                         complete_data_len           = PENTAX_COMPLETE_DATA_LEN;
2536:irsnd.c       ****                         pulse_1_len                 = PENTAX_PULSE_LEN;
2537:irsnd.c       ****                         pause_1_len                 = PENTAX_1_PAUSE_LEN - 1;
2538:irsnd.c       ****                         pulse_0_len                 = PENTAX_PULSE_LEN;
2539:irsnd.c       ****                         pause_0_len                 = PENTAX_0_PAUSE_LEN - 1;
2540:irsnd.c       ****                         has_stop_bit                = PENTAX_STOP_BIT;
2541:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2542:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2543:irsnd.c       ****                         repeat_frame_pause_len      = PENTAX_FRAME_REPEAT_PAUSE_LEN;
2544:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2545:irsnd.c       ****                         break;
2546:irsnd.c       ****                     }
2547:irsnd.c       **** #endif
2548:irsnd.c       **** #if IRSND_SUPPORT_ACP24_PROTOCOL == 1
2549:irsnd.c       ****                     case IRMP_ACP24_PROTOCOL:
2550:irsnd.c       ****                     {
2551:irsnd.c       ****                         startbit_pulse_len          = ACP24_START_BIT_PULSE_LEN;
2552:irsnd.c       ****                         startbit_pause_len          = ACP24_START_BIT_PAUSE_LEN - 1;
2553:irsnd.c       ****                         complete_data_len           = ACP24_COMPLETE_DATA_LEN;
2554:irsnd.c       ****                         pulse_1_len                 = ACP24_PULSE_LEN;
2555:irsnd.c       ****                         pause_1_len                 = ACP24_1_PAUSE_LEN - 1;
2556:irsnd.c       ****                         pulse_0_len                 = ACP24_PULSE_LEN;
2557:irsnd.c       ****                         pause_0_len                 = ACP24_0_PAUSE_LEN - 1;
2558:irsnd.c       ****                         has_stop_bit                = ACP24_STOP_BIT;
2559:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
2560:irsnd.c       ****                         auto_repetition_pause_len   = 0;
2561:irsnd.c       ****                         repeat_frame_pause_len      = ACP24_FRAME_REPEAT_PAUSE_LEN;
2562:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_38_KHZ);
2563:irsnd.c       ****                         break;
2564:irsnd.c       ****                     }
2565:irsnd.c       **** #endif
2566:irsnd.c       ****                     default:
2567:irsnd.c       ****                     {
2568:irsnd.c       ****                         irsnd_busy = FALSE;
2569:irsnd.c       ****                         break;
2570:irsnd.c       ****                     }
2571:irsnd.c       ****                 }
2572:irsnd.c       ****             }
2573:irsnd.c       ****         }
2574:irsnd.c       **** 
2575:irsnd.c       ****         if (irsnd_busy)
2576:irsnd.c       ****         {
2577:irsnd.c       ****             new_frame = FALSE;
2578:irsnd.c       **** 
2579:irsnd.c       ****             switch (irsnd_protocol)
2580:irsnd.c       ****             {
2581:irsnd.c       **** #if IRSND_SUPPORT_SIRCS_PROTOCOL == 1
2582:irsnd.c       ****                 case IRMP_SIRCS_PROTOCOL:
2583:irsnd.c       **** #endif
2584:irsnd.c       **** #if IRSND_SUPPORT_NEC_PROTOCOL == 1
2585:irsnd.c       ****                 case IRMP_NEC_PROTOCOL:
2586:irsnd.c       ****                 case IRMP_ONKYO_PROTOCOL:
2587:irsnd.c       **** #endif
2588:irsnd.c       **** #if IRSND_SUPPORT_NEC16_PROTOCOL == 1
2589:irsnd.c       ****                 case IRMP_NEC16_PROTOCOL:
2590:irsnd.c       **** #endif
2591:irsnd.c       **** #if IRSND_SUPPORT_NEC42_PROTOCOL == 1
2592:irsnd.c       ****                 case IRMP_NEC42_PROTOCOL:
2593:irsnd.c       **** #endif
2594:irsnd.c       **** #if IRSND_SUPPORT_LGAIR_PROTOCOL == 1
2595:irsnd.c       ****                 case IRMP_LGAIR_PROTOCOL:
2596:irsnd.c       **** #endif
2597:irsnd.c       **** #if IRSND_SUPPORT_SAMSUNG_PROTOCOL == 1
2598:irsnd.c       ****                 case IRMP_SAMSUNG_PROTOCOL:
2599:irsnd.c       ****                 case IRMP_SAMSUNG32_PROTOCOL:
2600:irsnd.c       **** #endif
2601:irsnd.c       **** #if IRSND_SUPPORT_SAMSUNG48_PROTOCOL == 1
2602:irsnd.c       ****                 case IRMP_SAMSUNG48_PROTOCOL:
2603:irsnd.c       **** #endif
2604:irsnd.c       **** #if IRSND_SUPPORT_MATSUSHITA_PROTOCOL == 1
2605:irsnd.c       ****                 case IRMP_MATSUSHITA_PROTOCOL:
2606:irsnd.c       **** #endif
2607:irsnd.c       **** #if IRSND_SUPPORT_MATSUSHITA_PROTOCOL == 1
2608:irsnd.c       ****                 case IRMP_TECHNICS_PROTOCOL:
2609:irsnd.c       **** #endif
2610:irsnd.c       **** #if IRSND_SUPPORT_KASEIKYO_PROTOCOL == 1
2611:irsnd.c       ****                 case IRMP_KASEIKYO_PROTOCOL:
2612:irsnd.c       **** #endif
2613:irsnd.c       **** #if IRSND_SUPPORT_PANASONIC_PROTOCOL == 1
2614:irsnd.c       ****                 case IRMP_PANASONIC_PROTOCOL:
2615:irsnd.c       **** #endif
2616:irsnd.c       **** #if IRSND_SUPPORT_MITSU_HEAVY_PROTOCOL == 1
2617:irsnd.c       ****                 case IRMP_MITSU_HEAVY_PROTOCOL:
2618:irsnd.c       **** #endif
2619:irsnd.c       **** #if IRSND_SUPPORT_RECS80_PROTOCOL == 1
2620:irsnd.c       ****                 case IRMP_RECS80_PROTOCOL:
2621:irsnd.c       **** #endif
2622:irsnd.c       **** #if IRSND_SUPPORT_RECS80EXT_PROTOCOL == 1
2623:irsnd.c       ****                 case IRMP_RECS80EXT_PROTOCOL:
2624:irsnd.c       **** #endif
2625:irsnd.c       **** #if IRSND_SUPPORT_TELEFUNKEN_PROTOCOL == 1
2626:irsnd.c       ****                 case IRMP_TELEFUNKEN_PROTOCOL:
2627:irsnd.c       **** #endif
2628:irsnd.c       **** #if IRSND_SUPPORT_DENON_PROTOCOL == 1
2629:irsnd.c       ****                 case IRMP_DENON_PROTOCOL:
2630:irsnd.c       **** #endif
2631:irsnd.c       **** #if IRSND_SUPPORT_BOSE_PROTOCOL == 1
2632:irsnd.c       ****                 case IRMP_BOSE_PROTOCOL:
2633:irsnd.c       **** #endif
2634:irsnd.c       **** #if IRSND_SUPPORT_NUBERT_PROTOCOL == 1
2635:irsnd.c       ****                 case IRMP_NUBERT_PROTOCOL:
2636:irsnd.c       **** #endif
2637:irsnd.c       **** #if IRSND_SUPPORT_FAN_PROTOCOL == 1
2638:irsnd.c       ****                 case IRMP_FAN_PROTOCOL:
2639:irsnd.c       **** #endif
2640:irsnd.c       **** #if IRSND_SUPPORT_SPEAKER_PROTOCOL == 1
2641:irsnd.c       ****                 case IRMP_SPEAKER_PROTOCOL:
2642:irsnd.c       **** #endif
2643:irsnd.c       **** #if IRSND_SUPPORT_BANG_OLUFSEN_PROTOCOL == 1
2644:irsnd.c       ****                 case IRMP_BANG_OLUFSEN_PROTOCOL:
2645:irsnd.c       **** #endif
2646:irsnd.c       **** #if IRSND_SUPPORT_FDC_PROTOCOL == 1
2647:irsnd.c       ****                 case IRMP_FDC_PROTOCOL:
2648:irsnd.c       **** #endif
2649:irsnd.c       **** #if IRSND_SUPPORT_RCCAR_PROTOCOL == 1
2650:irsnd.c       ****                 case IRMP_RCCAR_PROTOCOL:
2651:irsnd.c       **** #endif
2652:irsnd.c       **** #if IRSND_SUPPORT_JVC_PROTOCOL == 1
2653:irsnd.c       ****                 case IRMP_JVC_PROTOCOL:
2654:irsnd.c       **** #endif
2655:irsnd.c       **** #if IRSND_SUPPORT_NIKON_PROTOCOL == 1
2656:irsnd.c       ****                 case IRMP_NIKON_PROTOCOL:
2657:irsnd.c       **** #endif
2658:irsnd.c       **** #if IRSND_SUPPORT_LEGO_PROTOCOL == 1
2659:irsnd.c       ****                 case IRMP_LEGO_PROTOCOL:
2660:irsnd.c       **** #endif
2661:irsnd.c       **** #if IRSND_SUPPORT_IRMP16_PROTOCOL == 1
2662:irsnd.c       ****                 case IRMP_IRMP16_PROTOCOL:
2663:irsnd.c       **** #endif
2664:irsnd.c       **** #if IRSND_SUPPORT_THOMSON_PROTOCOL == 1
2665:irsnd.c       ****                 case IRMP_THOMSON_PROTOCOL:
2666:irsnd.c       **** #endif
2667:irsnd.c       **** #if IRSND_SUPPORT_ROOMBA_PROTOCOL == 1
2668:irsnd.c       ****                 case IRMP_ROOMBA_PROTOCOL:
2669:irsnd.c       **** #endif
2670:irsnd.c       **** #if IRSND_SUPPORT_PENTAX_PROTOCOL == 1
2671:irsnd.c       ****                 case IRMP_PENTAX_PROTOCOL:
2672:irsnd.c       **** #endif
2673:irsnd.c       **** #if IRSND_SUPPORT_ACP24_PROTOCOL == 1
2674:irsnd.c       ****                 case IRMP_ACP24_PROTOCOL:
2675:irsnd.c       **** #endif
2676:irsnd.c       **** 
2677:irsnd.c       **** #if IRSND_SUPPORT_SIRCS_PROTOCOL == 1  || IRSND_SUPPORT_NEC_PROTOCOL == 1 || IRSND_SUPPORT_NEC16_PR
2678:irsnd.c       ****     IRSND_SUPPORT_LGAIR_PROTOCOL == 1 || IRSND_SUPPORT_SAMSUNG_PROTOCOL == 1 || IRSND_SUPPORT_MATSU
2679:irsnd.c       ****     IRSND_SUPPORT_KASEIKYO_PROTOCOL == 1 || IRSND_SUPPORT_RECS80_PROTOCOL == 1 || IRSND_SUPPORT_REC
2680:irsnd.c       ****     IRSND_SUPPORT_NUBERT_PROTOCOL == 1 || IRSND_SUPPORT_FAN_PROTOCOL == 1 || IRSND_SUPPORT_SPEAKER_
2681:irsnd.c       ****     IRSND_SUPPORT_FDC_PROTOCOL == 1 || IRSND_SUPPORT_RCCAR_PROTOCOL == 1 || IRSND_SUPPORT_JVC_PROTO
2682:irsnd.c       ****     IRSND_SUPPORT_LEGO_PROTOCOL == 1 || IRSND_SUPPORT_THOMSON_PROTOCOL == 1 || IRSND_SUPPORT_ROOMBA
2683:irsnd.c       ****     IRSND_SUPPORT_PENTAX_PROTOCOL == 1 || IRSND_SUPPORT_ACP24_PROTOCOL == 1 || IRSND_SUPPORT_PANASO
2684:irsnd.c       ****     IRSND_SUPPORT_MITSU_HEAVY_PROTOCOL == 1 || IRSND_SUPPORT_IRMP16_PROTOCOL == 1
2685:irsnd.c       ****                 {
2686:irsnd.c       ****                     if (pulse_counter == 0)
2687:irsnd.c       ****                     {
2688:irsnd.c       ****                         if (current_bit == 0xFF)                                                   
2689:irsnd.c       ****                         {
2690:irsnd.c       ****                             pulse_len = startbit_pulse_len;
2691:irsnd.c       ****                             pause_len = startbit_pause_len;
2692:irsnd.c       ****                         }
2693:irsnd.c       ****                         else if (current_bit < complete_data_len)                                  
2694:irsnd.c       ****                         {
2695:irsnd.c       **** #if IRSND_SUPPORT_SAMSUNG_PROTOCOL == 1
2696:irsnd.c       ****                             if (irsnd_protocol == IRMP_SAMSUNG_PROTOCOL)
2697:irsnd.c       ****                             {
2698:irsnd.c       ****                                 if (current_bit < SAMSUNG_ADDRESS_LEN)                             
2699:irsnd.c       ****                                 {
2700:irsnd.c       ****                                     pulse_len = SAMSUNG_PULSE_LEN;
2701:irsnd.c       ****                                     pause_len = (irsnd_buffer[current_bit >> 3] & (1<<(7-(current_b
2702:irsnd.c       ****                                                     (SAMSUNG_1_PAUSE_LEN - 1) : (SAMSUNG_0_PAUSE_LE
2703:irsnd.c       ****                                 }
2704:irsnd.c       ****                                 else if (current_bit == SAMSUNG_ADDRESS_LEN)                       
2705:irsnd.c       ****                                 {
2706:irsnd.c       ****                                     pulse_len = SAMSUNG_PULSE_LEN;
2707:irsnd.c       ****                                     pause_len = SAMSUNG_START_BIT_PAUSE_LEN - 1;
2708:irsnd.c       ****                                 }
2709:irsnd.c       ****                                 else if (current_bit < SAMSUNG_COMPLETE_DATA_LEN)                  
2710:irsnd.c       ****                                 {
2711:irsnd.c       ****                                     uint8_t cur_bit = current_bit - 1;                             
2712:irsnd.c       **** 
2713:irsnd.c       ****                                     pulse_len = SAMSUNG_PULSE_LEN;
2714:irsnd.c       ****                                     pause_len = (irsnd_buffer[cur_bit >> 3] & (1<<(7-(cur_bit & 7))
2715:irsnd.c       ****                                                     (SAMSUNG_1_PAUSE_LEN - 1) : (SAMSUNG_0_PAUSE_LE
2716:irsnd.c       ****                                 }
2717:irsnd.c       ****                             }
2718:irsnd.c       ****                             else
2719:irsnd.c       **** #endif
2720:irsnd.c       **** 
2721:irsnd.c       **** #if IRSND_SUPPORT_NEC16_PROTOCOL == 1
2722:irsnd.c       ****                             if (irsnd_protocol == IRMP_NEC16_PROTOCOL)
2723:irsnd.c       ****                             {
2724:irsnd.c       ****                                 if (current_bit < NEC16_ADDRESS_LEN)                               
2725:irsnd.c       ****                                 {
2726:irsnd.c       ****                                     pulse_len = NEC_PULSE_LEN;
2727:irsnd.c       ****                                     pause_len = (irsnd_buffer[current_bit >> 3] & (1<<(7-(current_b
2728:irsnd.c       ****                                                     (NEC_1_PAUSE_LEN - 1) : (NEC_0_PAUSE_LEN - 1);
2729:irsnd.c       ****                                 }
2730:irsnd.c       ****                                 else if (current_bit == NEC16_ADDRESS_LEN)                         
2731:irsnd.c       ****                                 {
2732:irsnd.c       ****                                     pulse_len = NEC_PULSE_LEN;
2733:irsnd.c       ****                                     pause_len = NEC_START_BIT_PAUSE_LEN - 1;
2734:irsnd.c       ****                                 }
2735:irsnd.c       ****                                 else if (current_bit < NEC16_COMPLETE_DATA_LEN + 1)                
2736:irsnd.c       ****                                 {
2737:irsnd.c       ****                                     uint8_t cur_bit = current_bit - 1;                             
2738:irsnd.c       **** 
2739:irsnd.c       ****                                     pulse_len = NEC_PULSE_LEN;
2740:irsnd.c       ****                                     pause_len = (irsnd_buffer[cur_bit >> 3] & (1<<(7-(cur_bit & 7))
2741:irsnd.c       ****                                                     (NEC_1_PAUSE_LEN - 1) : (NEC_0_PAUSE_LEN - 1);
2742:irsnd.c       ****                                 }
2743:irsnd.c       ****                             }
2744:irsnd.c       ****                             else
2745:irsnd.c       **** #endif
2746:irsnd.c       **** 
2747:irsnd.c       **** #if IRSND_SUPPORT_BANG_OLUFSEN_PROTOCOL == 1
2748:irsnd.c       ****                             if (irsnd_protocol == IRMP_BANG_OLUFSEN_PROTOCOL)
2749:irsnd.c       ****                             {
2750:irsnd.c       ****                                 if (current_bit == 0)                                              
2751:irsnd.c       ****                                 {
2752:irsnd.c       ****                                     pulse_len = BANG_OLUFSEN_START_BIT2_PULSE_LEN;
2753:irsnd.c       ****                                     pause_len = BANG_OLUFSEN_START_BIT2_PAUSE_LEN - 1;
2754:irsnd.c       ****                                 }
2755:irsnd.c       ****                                 else if (current_bit == 1)                                         
2756:irsnd.c       ****                                 {
2757:irsnd.c       ****                                     pulse_len = BANG_OLUFSEN_START_BIT3_PULSE_LEN;
2758:irsnd.c       ****                                     pause_len = BANG_OLUFSEN_START_BIT3_PAUSE_LEN - 1;
2759:irsnd.c       ****                                 }
2760:irsnd.c       ****                                 else if (current_bit == 2)                                         
2761:irsnd.c       ****                                 {
2762:irsnd.c       ****                                     pulse_len = BANG_OLUFSEN_START_BIT2_PULSE_LEN;
2763:irsnd.c       ****                                     pause_len = BANG_OLUFSEN_START_BIT2_PAUSE_LEN - 1;
2764:irsnd.c       ****                                 }
2765:irsnd.c       ****                                 else if (current_bit == 19)                                        
2766:irsnd.c       ****                                 {
2767:irsnd.c       ****                                     pulse_len = BANG_OLUFSEN_PULSE_LEN;
2768:irsnd.c       ****                                     pause_len = BANG_OLUFSEN_TRAILER_BIT_PAUSE_LEN - 1;
2769:irsnd.c       ****                                 }
2770:irsnd.c       ****                                 else if (current_bit < BANG_OLUFSEN_COMPLETE_DATA_LEN)             
2771:irsnd.c       ****                                 {
2772:irsnd.c       ****                                     uint8_t cur_bit_value = (irsnd_buffer[current_bit >> 3] & (1<<(
2773:irsnd.c       ****                                     pulse_len = BANG_OLUFSEN_PULSE_LEN;
2774:irsnd.c       **** 
2775:irsnd.c       ****                                     if (cur_bit_value == last_bit_value)
2776:irsnd.c       ****                                     {
2777:irsnd.c       ****                                         pause_len = BANG_OLUFSEN_R_PAUSE_LEN - 1;
2778:irsnd.c       ****                                     }
2779:irsnd.c       ****                                     else
2780:irsnd.c       ****                                     {
2781:irsnd.c       ****                                         pause_len = cur_bit_value ? (BANG_OLUFSEN_1_PAUSE_LEN - 1) 
2782:irsnd.c       ****                                         last_bit_value = cur_bit_value;
2783:irsnd.c       ****                                     }
2784:irsnd.c       ****                                 }
2785:irsnd.c       ****                             }
2786:irsnd.c       ****                             else
2787:irsnd.c       **** #endif
2788:irsnd.c       ****                             if (irsnd_buffer[current_bit >> 3] & (1<<(7-(current_bit & 7))))
2789:irsnd.c       ****                             {
2790:irsnd.c       ****                                 pulse_len = pulse_1_len;
2791:irsnd.c       ****                                 pause_len = pause_1_len;
2792:irsnd.c       ****                             }
2793:irsnd.c       ****                             else
2794:irsnd.c       ****                             {
2795:irsnd.c       ****                                 pulse_len = pulse_0_len;
2796:irsnd.c       ****                                 pause_len = pause_0_len;
2797:irsnd.c       ****                             }
2798:irsnd.c       ****                         }
2799:irsnd.c       ****                         else if (has_stop_bit)                                                     
2800:irsnd.c       ****                         {
2801:irsnd.c       ****                             pulse_len = pulse_0_len;
2802:irsnd.c       **** 
2803:irsnd.c       ****                             if (auto_repetition_counter < n_auto_repetitions)
2804:irsnd.c       ****                             {
2805:irsnd.c       ****                                 pause_len = pause_0_len;
2806:irsnd.c       ****                             }
2807:irsnd.c       ****                             else
2808:irsnd.c       ****                             {
2809:irsnd.c       ****                                 pause_len = 255;                                        // last fra
2810:irsnd.c       ****                             }
2811:irsnd.c       ****                         }
2812:irsnd.c       ****                     }
2813:irsnd.c       **** 
2814:irsnd.c       ****                     if (pulse_counter < pulse_len)
2815:irsnd.c       ****                     {
2816:irsnd.c       ****                         if (pulse_counter == 0)
2817:irsnd.c       ****                         {
2818:irsnd.c       ****                             irsnd_on ();
2819:irsnd.c       ****                         }
2820:irsnd.c       ****                         pulse_counter++;
2821:irsnd.c       ****                     }
2822:irsnd.c       ****                     else if (pause_counter < pause_len)
2823:irsnd.c       ****                     {
2824:irsnd.c       ****                         if (pause_counter == 0)
2825:irsnd.c       ****                         {
2826:irsnd.c       ****                             irsnd_off ();
2827:irsnd.c       ****                         }
2828:irsnd.c       ****                         pause_counter++;
2829:irsnd.c       ****                     }
2830:irsnd.c       ****                     else
2831:irsnd.c       ****                     {
2832:irsnd.c       ****                         current_bit++;
2833:irsnd.c       **** 
2834:irsnd.c       ****                         if (current_bit >= complete_data_len + has_stop_bit)
2835:irsnd.c       ****                         {
2836:irsnd.c       ****                             current_bit = 0xFF;
2837:irsnd.c       ****                             auto_repetition_counter++;
2838:irsnd.c       **** 
2839:irsnd.c       ****                             if (auto_repetition_counter == n_auto_repetitions)
2840:irsnd.c       ****                             {
2841:irsnd.c       ****                                 irsnd_busy = FALSE;
2842:irsnd.c       ****                                 auto_repetition_counter = 0;
2843:irsnd.c       ****                             }
2844:irsnd.c       ****                             new_frame = TRUE;
2845:irsnd.c       ****                         }
2846:irsnd.c       **** 
2847:irsnd.c       ****                         pulse_counter = 0;
2848:irsnd.c       ****                         pause_counter = 0;
2849:irsnd.c       ****                     }
2850:irsnd.c       ****                     break;
2851:irsnd.c       ****                 }
2852:irsnd.c       **** #endif
2853:irsnd.c       **** 
2854:irsnd.c       **** #if IRSND_SUPPORT_RC5_PROTOCOL == 1
2855:irsnd.c       ****                 case IRMP_RC5_PROTOCOL:
2856:irsnd.c       **** #endif
2857:irsnd.c       **** #if IRSND_SUPPORT_RC6_PROTOCOL == 1
2858:irsnd.c       ****                 case IRMP_RC6_PROTOCOL:
2859:irsnd.c       **** #endif
2860:irsnd.c       **** #if IRSND_SUPPORT_RC6A_PROTOCOL == 1
2861:irsnd.c       ****                 case IRMP_RC6A_PROTOCOL:
2862:irsnd.c       **** #endif
2863:irsnd.c       **** #if IRSND_SUPPORT_SIEMENS_PROTOCOL == 1
2864:irsnd.c       ****                 case IRMP_SIEMENS_PROTOCOL:
2865:irsnd.c       **** #endif
2866:irsnd.c       **** #if IRSND_SUPPORT_RUWIDO_PROTOCOL == 1
2867:irsnd.c       ****                 case IRMP_RUWIDO_PROTOCOL:
2868:irsnd.c       **** #endif
2869:irsnd.c       **** #if IRSND_SUPPORT_GRUNDIG_PROTOCOL == 1
2870:irsnd.c       ****                 case IRMP_GRUNDIG_PROTOCOL:
2871:irsnd.c       **** #endif
2872:irsnd.c       **** #if IRSND_SUPPORT_IR60_PROTOCOL == 1
2873:irsnd.c       ****                 case IRMP_IR60_PROTOCOL:
2874:irsnd.c       **** #endif
2875:irsnd.c       **** #if IRSND_SUPPORT_NOKIA_PROTOCOL == 1
2876:irsnd.c       ****                 case IRMP_NOKIA_PROTOCOL:
2877:irsnd.c       **** #endif
2878:irsnd.c       **** #if IRSND_SUPPORT_A1TVBOX_PROTOCOL == 1
2879:irsnd.c       ****                 case IRMP_A1TVBOX_PROTOCOL:
2880:irsnd.c       **** #endif
2881:irsnd.c       **** 
2882:irsnd.c       **** #if IRSND_SUPPORT_RC5_PROTOCOL      == 1 || \
2883:irsnd.c       ****     IRSND_SUPPORT_RC6_PROTOCOL      == 1 || \
2884:irsnd.c       ****     IRSND_SUPPORT_RC6A_PROTOCOL     == 1 || \
2885:irsnd.c       ****     IRSND_SUPPORT_RUWIDO_PROTOCOL   == 1 || \
2886:irsnd.c       ****     IRSND_SUPPORT_SIEMENS_PROTOCOL  == 1 || \
2887:irsnd.c       ****     IRSND_SUPPORT_GRUNDIG_PROTOCOL  == 1 || \
2888:irsnd.c       ****     IRSND_SUPPORT_IR60_PROTOCOL     == 1 || \
2889:irsnd.c       ****     IRSND_SUPPORT_NOKIA_PROTOCOL    == 1 || \
2890:irsnd.c       ****     IRSND_SUPPORT_A1TVBOX_PROTOCOL  == 1
2891:irsnd.c       ****                 {
2892:irsnd.c       ****                     if (pulse_counter == pulse_len && pause_counter == pause_len)
2893:irsnd.c       ****                     {
2894:irsnd.c       ****                         current_bit++;
2895:irsnd.c       **** 
2896:irsnd.c       ****                         if (current_bit >= complete_data_len)
2897:irsnd.c       ****                         {
2898:irsnd.c       ****                             current_bit = 0xFF;
2899:irsnd.c       **** 
2900:irsnd.c       **** #if IRSND_SUPPORT_GRUNDIG_PROTOCOL == 1 || IRSND_SUPPORT_IR60_PROTOCOL == 1 || IRSND_SUPPORT_NOKIA_
2901:irsnd.c       ****                             if (irsnd_protocol == IRMP_GRUNDIG_PROTOCOL || irsnd_protocol == IRMP_I
2902:irsnd.c       ****                             {
2903:irsnd.c       ****                                 auto_repetition_counter++;
2904:irsnd.c       **** 
2905:irsnd.c       ****                                 if (repeat_counter > 0)
2906:irsnd.c       ****                                 {                                       // set 117 msec pause time
2907:irsnd.c       ****                                     auto_repetition_pause_len = GRUNDIG_NOKIA_IR60_FRAME_REPEAT_PAU
2908:irsnd.c       ****                                 }
2909:irsnd.c       **** 
2910:irsnd.c       ****                                 if (repeat_counter < n_repeat_frames)       // tricky: repeat n inf
2911:irsnd.c       ****                                 {
2912:irsnd.c       ****                                     n_auto_repetitions++;                   // increment number of 
2913:irsnd.c       ****                                     repeat_counter++;
2914:irsnd.c       ****                                 }
2915:irsnd.c       ****                                 else if (auto_repetition_counter == n_auto_repetitions)
2916:irsnd.c       ****                                 {
2917:irsnd.c       ****                                     irsnd_busy = FALSE;
2918:irsnd.c       ****                                     auto_repetition_counter = 0;
2919:irsnd.c       ****                                 }
2920:irsnd.c       ****                             }
2921:irsnd.c       ****                             else
2922:irsnd.c       **** #endif
2923:irsnd.c       ****                             {
2924:irsnd.c       ****                                 irsnd_busy  = FALSE;
2925:irsnd.c       ****                             }
2926:irsnd.c       **** 
2927:irsnd.c       ****                             new_frame = TRUE;
2928:irsnd.c       ****                             irsnd_off ();
2929:irsnd.c       ****                         }
2930:irsnd.c       **** 
2931:irsnd.c       ****                         pulse_counter = 0;
2932:irsnd.c       ****                         pause_counter = 0;
2933:irsnd.c       ****                     }
2934:irsnd.c       **** 
2935:irsnd.c       ****                     if (! new_frame)
2936:irsnd.c       ****                     {
2937:irsnd.c       ****                         uint8_t first_pulse;
2938:irsnd.c       **** 
2939:irsnd.c       **** #if IRSND_SUPPORT_GRUNDIG_PROTOCOL == 1 || IRSND_SUPPORT_IR60_PROTOCOL == 1 || IRSND_SUPPORT_NOKIA_
2940:irsnd.c       ****                         if (irsnd_protocol == IRMP_GRUNDIG_PROTOCOL || irsnd_protocol == IRMP_IR60_
2941:irsnd.c       ****                         {
2942:irsnd.c       ****                             if (current_bit == 0xFF ||                                             
2943:irsnd.c       ****                                 (irsnd_protocol == IRMP_GRUNDIG_PROTOCOL && current_bit == 15) ||  
2944:irsnd.c       ****                                 (irsnd_protocol == IRMP_IR60_PROTOCOL && current_bit == 7) ||      
2945:irsnd.c       ****                                 (irsnd_protocol == IRMP_NOKIA_PROTOCOL && (current_bit == 23 || cur
2946:irsnd.c       ****                             {
2947:irsnd.c       ****                                 pulse_len = startbit_pulse_len;
2948:irsnd.c       ****                                 pause_len = startbit_pause_len;
2949:irsnd.c       ****                                 first_pulse = TRUE;
2950:irsnd.c       ****                             }
2951:irsnd.c       ****                             else                                                                   
2952:irsnd.c       ****                             {
2953:irsnd.c       ****                                 pulse_len = GRUNDIG_NOKIA_IR60_BIT_LEN;
2954:irsnd.c       ****                                 pause_len = GRUNDIG_NOKIA_IR60_BIT_LEN;
2955:irsnd.c       ****                                 first_pulse = (irsnd_buffer[current_bit >> 3] & (1<<(7-(current_bit
2956:irsnd.c       ****                             }
2957:irsnd.c       ****                         }
2958:irsnd.c       ****                         else // if (irsnd_protocol == IRMP_RC5_PROTOCOL || irsnd_protocol == IRMP_R
2959:irsnd.c       ****                              //     irsnd_protocol == IRMP_SIEMENS_PROTOCOL || irsnd_protocol == IR
2960:irsnd.c       **** #endif
2961:irsnd.c       ****                         {
2962:irsnd.c       ****                             if (current_bit == 0xFF)                                               
2963:irsnd.c       ****                             {
2964:irsnd.c       **** #if IRSND_SUPPORT_RC6_PROTOCOL == 1 || IRSND_SUPPORT_RC6A_PROTOCOL == 1
2965:irsnd.c       ****                                 if (irsnd_protocol == IRMP_RC6_PROTOCOL || irsnd_protocol == IRMP_R
2966:irsnd.c       ****                                 {
2967:irsnd.c       ****                                     pulse_len = startbit_pulse_len;
2968:irsnd.c       ****                                     pause_len = startbit_pause_len;
2969:irsnd.c       ****                                 }
2970:irsnd.c       ****                                 else
2971:irsnd.c       **** #endif
2972:irsnd.c       **** #if IRSND_SUPPORT_A1TVBOX_PROTOCOL == 1
2973:irsnd.c       ****                                 if (irsnd_protocol == IRMP_A1TVBOX_PROTOCOL)
2974:irsnd.c       ****                                 {
2975:irsnd.c       ****                                     current_bit = 0;
2976:irsnd.c       ****                                 }
2977:irsnd.c       ****                                 else
2978:irsnd.c       **** #endif
2979:irsnd.c       ****                                 {
2980:irsnd.c       ****                                     ;
2981:irsnd.c       ****                                 }
2982:irsnd.c       **** 
2983:irsnd.c       ****                                 first_pulse = TRUE;
2984:irsnd.c       ****                             }
2985:irsnd.c       ****                             else                                                                   
2986:irsnd.c       ****                             {
2987:irsnd.c       **** #if IRSND_SUPPORT_RC6_PROTOCOL == 1 || IRSND_SUPPORT_RC6A_PROTOCOL == 1
2988:irsnd.c       ****                                 if (irsnd_protocol == IRMP_RC6_PROTOCOL || irsnd_protocol == IRMP_R
2989:irsnd.c       ****                                 {
2990:irsnd.c       ****                                     pulse_len = RC6_BIT_LEN;
2991:irsnd.c       ****                                     pause_len = RC6_BIT_LEN;
2992:irsnd.c       **** 
2993:irsnd.c       ****                                     if (irsnd_protocol == IRMP_RC6_PROTOCOL)
2994:irsnd.c       ****                                     {
2995:irsnd.c       ****                                         if (current_bit == 4)                                      
2996:irsnd.c       ****                                         {
2997:irsnd.c       ****                                             pulse_len = RC6_BIT_2_LEN;                             
2998:irsnd.c       ****                                             pause_len = RC6_BIT_2_LEN;                             
2999:irsnd.c       ****                                         }
3000:irsnd.c       ****                                     }
3001:irsnd.c       ****                                     else // if (irsnd_protocol == IRMP_RC6A_PROTOCOL)
3002:irsnd.c       ****                                     {
3003:irsnd.c       ****                                         if (current_bit == 4)                                      
3004:irsnd.c       ****                                         {
3005:irsnd.c       ****                                             pulse_len = RC6_BIT_3_LEN;                             
3006:irsnd.c       ****                                             pause_len = RC6_BIT_2_LEN;                             
3007:irsnd.c       ****                                         }
3008:irsnd.c       ****                                         else if (current_bit == 5)                                 
3009:irsnd.c       ****                                         {
3010:irsnd.c       ****                                             pause_len = RC6_BIT_2_LEN;                             
3011:irsnd.c       ****                                         }
3012:irsnd.c       ****                                     }
3013:irsnd.c       ****                                 }
3014:irsnd.c       **** #endif
3015:irsnd.c       ****                                 first_pulse = (irsnd_buffer[current_bit >> 3] & (1<<(7-(current_bit
3016:irsnd.c       ****                             }
3017:irsnd.c       **** 
3018:irsnd.c       ****                             if (irsnd_protocol == IRMP_RC5_PROTOCOL)
3019:irsnd.c       ****                             {
3020:irsnd.c       ****                                 first_pulse = first_pulse ? FALSE : TRUE;
3021:irsnd.c       ****                             }
3022:irsnd.c       ****                         }
3023:irsnd.c       **** 
3024:irsnd.c       ****                         if (first_pulse)
3025:irsnd.c       ****                         {
3026:irsnd.c       ****                             // printf ("first_pulse: current_bit: %d  %d < %d  %d < %d\n", current_
3027:irsnd.c       **** 
3028:irsnd.c       ****                             if (pulse_counter < pulse_len)
3029:irsnd.c       ****                             {
3030:irsnd.c       ****                                 if (pulse_counter == 0)
3031:irsnd.c       ****                                 {
3032:irsnd.c       ****                                     irsnd_on ();
3033:irsnd.c       ****                                 }
3034:irsnd.c       ****                                 pulse_counter++;
3035:irsnd.c       ****                             }
3036:irsnd.c       ****                             else // if (pause_counter < pause_len)
3037:irsnd.c       ****                             {
3038:irsnd.c       ****                                 if (pause_counter == 0)
3039:irsnd.c       ****                                 {
3040:irsnd.c       ****                                     irsnd_off ();
3041:irsnd.c       ****                                 }
3042:irsnd.c       ****                                 pause_counter++;
3043:irsnd.c       ****                             }
3044:irsnd.c       ****                         }
3045:irsnd.c       ****                         else
3046:irsnd.c       ****                         {
3047:irsnd.c       ****                             // printf ("first_pause: current_bit: %d  %d < %d  %d < %d\n", current_
3048:irsnd.c       **** 
3049:irsnd.c       ****                             if (pause_counter < pause_len)
3050:irsnd.c       ****                             {
3051:irsnd.c       ****                                 if (pause_counter == 0)
3052:irsnd.c       ****                                 {
3053:irsnd.c       ****                                     irsnd_off ();
3054:irsnd.c       ****                                 }
3055:irsnd.c       ****                                 pause_counter++;
3056:irsnd.c       ****                             }
3057:irsnd.c       ****                             else // if (pulse_counter < pulse_len)
3058:irsnd.c       ****                             {
3059:irsnd.c       ****                                 if (pulse_counter == 0)
3060:irsnd.c       ****                                 {
3061:irsnd.c       ****                                     irsnd_on ();
3062:irsnd.c       ****                                 }
3063:irsnd.c       ****                                 pulse_counter++;
3064:irsnd.c       ****                             }
3065:irsnd.c       ****                         }
3066:irsnd.c       ****                     }
3067:irsnd.c       ****                     break;
3068:irsnd.c       ****                 }
3069:irsnd.c       **** #endif // IRSND_SUPPORT_RC5_PROTOCOL == 1 || IRSND_SUPPORT_RC6_PROTOCOL == 1 || || IRSND_SUPPORT_RC
3070:irsnd.c       ****        // IRSND_SUPPORT_RUWIDO_PROTOCOL == 1 || IRSND_SUPPORT_GRUNDIG_PROTOCOL == 1 || IRSND_SUPPOR
3071:irsnd.c       **** 
3072:irsnd.c       ****                 default:
3073:irsnd.c       ****                 {
3074:irsnd.c       ****                     irsnd_busy = FALSE;
3075:irsnd.c       ****                     break;
3076:irsnd.c       ****                 }
3077:irsnd.c       ****             }
3078:irsnd.c       ****         }
3079:irsnd.c       **** 
3080:irsnd.c       ****         if (! irsnd_busy)
3081:irsnd.c       ****         {
3082:irsnd.c       ****             if (repeat_counter < n_repeat_frames)
3083:irsnd.c       ****             {
3084:irsnd.c       **** #if IRSND_SUPPORT_FDC_PROTOCOL == 1
3085:irsnd.c       ****                 if (irsnd_protocol == IRMP_FDC_PROTOCOL)
3086:irsnd.c       ****                 {
3087:irsnd.c       ****                     irsnd_buffer[2] |= 0x0F;
3088:irsnd.c       ****                 }
3089:irsnd.c       **** #endif
3090:irsnd.c       ****                 repeat_counter++;
3091:irsnd.c       ****                 irsnd_busy = TRUE;
3092:irsnd.c       ****             }
3093:irsnd.c       ****             else
3094:irsnd.c       ****             {
3095:irsnd.c       ****                 irsnd_busy = TRUE; //Rainer
3096:irsnd.c       ****                 send_trailer = TRUE;
3097:irsnd.c       ****                 n_repeat_frames = 0;
3098:irsnd.c       ****                 repeat_counter = 0;
3099:irsnd.c       ****             }
3100:irsnd.c       ****         }
3101:irsnd.c       ****     }
3102:irsnd.c       **** 
3103:irsnd.c       **** #ifdef ANALYZE
3104:irsnd.c       ****     if (irsnd_is_on)
3105:irsnd.c       ****     {
3106:irsnd.c       ****         putchar ('0');
3107:irsnd.c       ****     }
3108:irsnd.c       ****     else
3109:irsnd.c       ****     {
3110:irsnd.c       ****         putchar ('1');
3111:irsnd.c       ****     }
3112:irsnd.c       **** #endif
3113:irsnd.c       **** 
3114:irsnd.c       ****     return irsnd_busy;
 474               	.LM61:
 475 00fe 8091 0000 		lds r24,irsnd_busy
 476               	/* epilogue start */
3115:irsnd.c       **** }
 478               	.LM62:
 479 0102 DF91      		pop r29
 480 0104 CF91      		pop r28
 481 0106 0895      		ret
 482               	.L26:
1810:irsnd.c       ****                 {
 484               	.LM63:
 485 0108 8091 0000 		lds r24,send_trailer.1703
 486 010c 8823      		tst r24
 487 010e 01F0      		breq .L28
1812:irsnd.c       ****                     send_trailer = FALSE;
 489               	.LM64:
 490 0110 1092 0000 		sts irsnd_busy,__zero_reg__
1813:irsnd.c       ****                     return irsnd_busy;
 492               	.LM65:
 493 0114 1092 0000 		sts send_trailer.1703,__zero_reg__
 494 0118 00C0      		rjmp .L24
 495               	.L28:
1817:irsnd.c       **** 
 497               	.LM66:
 498 011a 8091 0000 		lds r24,irsnd_repeat
1819:irsnd.c       ****                 {
 500               	.LM67:
 501 011e 8F30      		cpi r24,lo8(15)
 502 0120 01F0      		breq .L29
1817:irsnd.c       **** 
 504               	.LM68:
 505 0122 8093 0000 		sts n_repeat_frames.1716,r24
 506               	.L30:
1824:irsnd.c       ****                 pulse_counter               = 0;
 508               	.LM69:
 509 0126 1092 0000 		sts packet_repeat_pause_counter.1723+1,__zero_reg__
 510 012a 1092 0000 		sts packet_repeat_pause_counter.1723,__zero_reg__
1825:irsnd.c       ****                 pause_counter               = 0;
 512               	.LM70:
 513 012e 1092 0000 		sts pulse_counter.1705,__zero_reg__
1826:irsnd.c       **** 
 515               	.LM71:
 516 0132 1092 0000 		sts pause_counter.1706,__zero_reg__
1828:irsnd.c       ****                 {
 518               	.LM72:
 519 0136 8091 0000 		lds r24,irsnd_protocol
 520 013a 8730      		cpi r24,lo8(7)
 521 013c 01F4      		brne .L31
2133:irsnd.c       ****                         pause_len                   = RC5_BIT_LEN;
 523               	.LM73:
 524 013e 82E1      		ldi r24,lo8(18)
 525 0140 8093 0000 		sts pulse_len.1724,r24
2134:irsnd.c       ****                         has_stop_bit                = RC5_STOP_BIT;
 527               	.LM74:
 528 0144 8093 0000 		sts pause_len.1725,r24
2136:irsnd.c       ****                         n_auto_repetitions          = 1;                                           
 530               	.LM75:
 531 0148 8DE0      		ldi r24,lo8(13)
 532 014a 8093 0000 		sts complete_data_len.1715,r24
2138:irsnd.c       ****                         repeat_frame_pause_len      = RC5_FRAME_REPEAT_PAUSE_LEN;
 534               	.LM76:
 535 014e 1092 0000 		sts auto_repetition_pause_len.1719+1,__zero_reg__
 536 0152 1092 0000 		sts auto_repetition_pause_len.1719,__zero_reg__
2139:irsnd.c       ****                         irsnd_set_freq (IRSND_FREQ_36_KHZ);
 538               	.LM77:
 539 0156 82EF      		ldi r24,lo8(-14)
 540 0158 96E0      		ldi r25,lo8(6)
 541 015a 9093 0000 		sts repeat_frame_pause_len.1722+1,r25
 542 015e 8093 0000 		sts repeat_frame_pause_len.1722,r24
 543               	.LBB17:
 544               	.LBB18:
 830:irsnd.c       **** #    elif IRSND_OCx == IRSND_OC0B                                                           // use 
 546               	.LM78:
 547 0162 85E6      		ldi r24,lo8(101)
 548 0164 86BF      		out 0x36,r24
 549               	.L25:
 550               	.LBE18:
 551               	.LBE17:
2575:irsnd.c       ****         {
 553               	.LM79:
 554 0166 8091 0000 		lds r24,irsnd_busy
2575:irsnd.c       ****         {
 556               	.LM80:
 557 016a 8823      		tst r24
 558 016c 01F0      		breq .L33
2577:irsnd.c       **** 
 560               	.LM81:
 561 016e 1092 0000 		sts new_frame.1714,__zero_reg__
2579:irsnd.c       ****             {
 563               	.LM82:
 564 0172 8091 0000 		lds r24,irsnd_protocol
 565 0176 8730      		cpi r24,lo8(7)
 566 0178 01F0      		breq .+2
 567 017a 00C0      		rjmp .L34
2892:irsnd.c       ****                     {
 569               	.LM83:
 570 017c D091 0000 		lds r29,pulse_len.1724
2892:irsnd.c       ****                     {
 572               	.LM84:
 573 0180 8091 0000 		lds r24,pulse_counter.1705
 574 0184 8D17      		cp r24,r29
 575 0186 01F0      		breq .L35
 576               	.L38:
 577               	.LBB19:
2962:irsnd.c       ****                             {
 579               	.LM85:
 580 0188 2091 0000 		lds r18,current_bit.1704
2962:irsnd.c       ****                             {
 582               	.LM86:
 583 018c 2F3F      		cpi r18,lo8(-1)
 584 018e 01F4      		brne .L58
2983:irsnd.c       ****                             }
 586               	.LM87:
 587 0190 81E0      		ldi r24,lo8(1)
 588 0192 00C0      		rjmp .L36
 589               	.L29:
 590               	.LBE19:
1821:irsnd.c       ****                 }
 592               	.LM88:
 593 0194 2093 0000 		sts n_repeat_frames.1716,r18
 594 0198 00C0      		rjmp .L30
 595               	.L31:
2568:irsnd.c       ****                         break;
 597               	.LM89:
 598 019a 1092 0000 		sts irsnd_busy,__zero_reg__
2569:irsnd.c       ****                     }
 600               	.LM90:
 601 019e 00C0      		rjmp .L25
 602               	.L35:
2892:irsnd.c       ****                     {
 604               	.LM91:
 605 01a0 9091 0000 		lds r25,pause_counter.1706
 606 01a4 8091 0000 		lds r24,pause_len.1725
 607 01a8 9813      		cpse r25,r24
 608 01aa 00C0      		rjmp .L38
2894:irsnd.c       **** 
 610               	.LM92:
 611 01ac 8091 0000 		lds r24,current_bit.1704
 612 01b0 8F5F      		subi r24,lo8(-(1))
 613 01b2 8093 0000 		sts current_bit.1704,r24
2896:irsnd.c       ****                         {
 615               	.LM93:
 616 01b6 9091 0000 		lds r25,complete_data_len.1715
 617 01ba 8917      		cp r24,r25
 618 01bc 00F0      		brlo .L39
2898:irsnd.c       **** 
 620               	.LM94:
 621 01be 8FEF      		ldi r24,lo8(-1)
 622 01c0 8093 0000 		sts current_bit.1704,r24
2924:irsnd.c       ****                             }
 624               	.LM95:
 625 01c4 1092 0000 		sts irsnd_busy,__zero_reg__
2927:irsnd.c       ****                             irsnd_off ();
 627               	.LM96:
 628 01c8 81E0      		ldi r24,lo8(1)
 629 01ca 8093 0000 		sts new_frame.1714,r24
2928:irsnd.c       ****                         }
 631               	.LM97:
 632 01ce 00D0      		rcall irsnd_off
 633               	.L39:
2931:irsnd.c       ****                         pause_counter = 0;
 635               	.LM98:
 636 01d0 1092 0000 		sts pulse_counter.1705,__zero_reg__
2932:irsnd.c       ****                     }
 638               	.LM99:
 639 01d4 1092 0000 		sts pause_counter.1706,__zero_reg__
2935:irsnd.c       ****                     {
 641               	.LM100:
 642 01d8 8091 0000 		lds r24,new_frame.1714
 643 01dc 8823      		tst r24
 644 01de 01F0      		breq .L38
 645               	.L33:
3080:irsnd.c       ****         {
 647               	.LM101:
 648 01e0 8091 0000 		lds r24,irsnd_busy
3080:irsnd.c       ****         {
 650               	.LM102:
 651 01e4 8111      		cpse r24,__zero_reg__
 652 01e6 00C0      		rjmp .L24
3082:irsnd.c       ****             {
 654               	.LM103:
 655 01e8 8091 0000 		lds r24,repeat_counter.1721
3082:irsnd.c       ****             {
 657               	.LM104:
 658 01ec 9091 0000 		lds r25,n_repeat_frames.1716
 659 01f0 8917      		cp r24,r25
 660 01f2 00F0      		brlo .+2
 661 01f4 00C0      		rjmp .L50
3090:irsnd.c       ****                 irsnd_busy = TRUE;
 663               	.LM105:
 664 01f6 8F5F      		subi r24,lo8(-(1))
 665 01f8 8093 0000 		sts repeat_counter.1721,r24
3091:irsnd.c       ****             }
 667               	.LM106:
 668 01fc 81E0      		ldi r24,lo8(1)
 669 01fe 8093 0000 		sts irsnd_busy,r24
 670 0202 00C0      		rjmp .L24
 671               	.L58:
 672               	.LBB20:
3015:irsnd.c       ****                             }
 674               	.LM107:
 675 0204 E22F      		mov r30,r18
 676 0206 E695      		lsr r30
 677 0208 E695      		lsr r30
 678 020a E695      		lsr r30
 679 020c F0E0      		ldi r31,0
3015:irsnd.c       ****                             }
 681               	.LM108:
 682 020e E050      		subi r30,lo8(-(irsnd_buffer))
 683 0210 F040      		sbci r31,hi8(-(irsnd_buffer))
 684 0212 8081      		ld r24,Z
 685 0214 90E0      		ldi r25,0
3015:irsnd.c       ****                             }
 687               	.LM109:
 688 0216 30E0      		ldi r19,0
 689 0218 2095      		com r18
 690 021a 3095      		com r19
 691 021c 2770      		andi r18,7
 692 021e 3327      		clr r19
3015:irsnd.c       ****                             }
 694               	.LM110:
 695 0220 00C0      		rjmp 2f
 696               		1:
 697 0222 9595      		asr r25
 698 0224 8795      		ror r24
 699               		2:
 700 0226 2A95      		dec r18
 701 0228 02F4      		brpl 1b
3015:irsnd.c       ****                             }
 703               	.LM111:
 704 022a 8170      		andi r24,lo8(1)
 705               	.L36:
3018:irsnd.c       ****                             {
 707               	.LM112:
 708 022c 9091 0000 		lds r25,irsnd_protocol
3018:irsnd.c       ****                             {
 710               	.LM113:
 711 0230 9730      		cpi r25,lo8(7)
 712 0232 01F4      		brne .L41
 713 0234 91E0      		ldi r25,lo8(1)
 714 0236 8927      		eor r24,r25
 715               	.L41:
3024:irsnd.c       ****                         {
 717               	.LM114:
 718 0238 8823      		tst r24
 719 023a 01F0      		breq .L42
3028:irsnd.c       ****                             {
 721               	.LM115:
 722 023c C091 0000 		lds r28,pulse_counter.1705
3028:irsnd.c       ****                             {
 724               	.LM116:
 725 0240 CD17      		cp r28,r29
 726 0242 00F4      		brsh .L43
 727               	.L64:
3059:irsnd.c       ****                                 {
 729               	.LM117:
 730 0244 C111      		cpse r28,__zero_reg__
 731 0246 00C0      		rjmp .L48
3061:irsnd.c       ****                                 }
 733               	.LM118:
 734 0248 00D0      		rcall irsnd_on
 735               	.L48:
3063:irsnd.c       ****                             }
 737               	.LM119:
 738 024a CF5F      		subi r28,lo8(-(1))
 739 024c C093 0000 		sts pulse_counter.1705,r28
 740 0250 00C0      		rjmp .L33
 741               	.L43:
3038:irsnd.c       ****                                 {
 743               	.LM120:
 744 0252 C091 0000 		lds r28,pause_counter.1706
 745               	.L62:
3051:irsnd.c       ****                                 {
 747               	.LM121:
 748 0256 C111      		cpse r28,__zero_reg__
 749 0258 00C0      		rjmp .L47
3053:irsnd.c       ****                                 }
 751               	.LM122:
 752 025a 00D0      		rcall irsnd_off
 753               	.L47:
3055:irsnd.c       ****                             }
 755               	.LM123:
 756 025c CF5F      		subi r28,lo8(-(1))
 757 025e C093 0000 		sts pause_counter.1706,r28
 758 0262 00C0      		rjmp .L33
 759               	.L42:
3049:irsnd.c       ****                             {
 761               	.LM124:
 762 0264 C091 0000 		lds r28,pause_counter.1706
3049:irsnd.c       ****                             {
 764               	.LM125:
 765 0268 8091 0000 		lds r24,pause_len.1725
 766 026c C817      		cp r28,r24
 767 026e 00F0      		brlo .L62
3059:irsnd.c       ****                                 {
 769               	.LM126:
 770 0270 C091 0000 		lds r28,pulse_counter.1705
 771 0274 00C0      		rjmp .L64
 772               	.L34:
 773               	.LBE20:
3074:irsnd.c       ****                     break;
 775               	.LM127:
 776 0276 1092 0000 		sts irsnd_busy,__zero_reg__
3075:irsnd.c       ****                 }
 778               	.LM128:
 779 027a 00C0      		rjmp .L33
 780               	.L50:
3095:irsnd.c       ****                 send_trailer = TRUE;
 782               	.LM129:
 783 027c 81E0      		ldi r24,lo8(1)
 784 027e 8093 0000 		sts irsnd_busy,r24
3096:irsnd.c       ****                 n_repeat_frames = 0;
 786               	.LM130:
 787 0282 8093 0000 		sts send_trailer.1703,r24
3097:irsnd.c       ****                 repeat_counter = 0;
 789               	.LM131:
 790 0286 1092 0000 		sts n_repeat_frames.1716,__zero_reg__
3098:irsnd.c       ****             }
 792               	.LM132:
 793 028a 1092 0000 		sts repeat_counter.1721,__zero_reg__
 794 028e 00C0      		rjmp .L24
 817               	.Lscope7:
 819               		.stabd	78,0,0
 820               		.local	repeat_counter.1721
 821               		.comm	repeat_counter.1721,1,1
 823               		.local	complete_data_len.1715
 824               		.comm	complete_data_len.1715,1,1
 826               		.data
 829               	pause_len.1725:
 830 0000 FF        		.byte	-1
 834               	pulse_len.1724:
 835 0001 FF        		.byte	-1
 837               		.local	pause_counter.1706
 838               		.comm	pause_counter.1706,1,1
 840               		.local	pulse_counter.1705
 841               		.comm	pulse_counter.1705,1,1
 843               		.local	n_repeat_frames.1716
 844               		.comm	n_repeat_frames.1716,1,1
 846               		.local	send_trailer.1703
 847               		.comm	send_trailer.1703,1,1
 849               		.local	repeat_frame_pause_len.1722
 850               		.comm	repeat_frame_pause_len.1722,2,1
 852               		.local	packet_repeat_pause_counter.1723
 853               		.comm	packet_repeat_pause_counter.1723,2,1
 855               		.local	auto_repetition_pause_len.1719
 856               		.comm	auto_repetition_pause_len.1719,2,1
 860               	new_frame.1714:
 861 0002 01        		.byte	1
 865               	current_bit.1704:
 866 0003 FF        		.byte	-1
 868               		.local	toggle_bit_rc5.1688
 869               		.comm	toggle_bit_rc5.1688,1,1
 871               		.local	irsnd_is_on
 872               		.comm	irsnd_is_on,1,1
 874               		.local	irsnd_repeat
 875               		.comm	irsnd_repeat,1,1
 877               		.local	irsnd_buffer
 878               		.comm	irsnd_buffer,11,1
 880               		.local	irsnd_protocol
 881               		.comm	irsnd_protocol,1,1
 883               		.local	irsnd_busy
 884               		.comm	irsnd_busy,1,1
 886               		.text
 888               	.Letext0:
 889               		.ident	"GCC: (GNU) 9.2.0"
 890               	.global __do_copy_data
 891               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 irsnd.c
     /tmp/ccMigTVY.s:2      *ABS*:000000000000003d __SP_L__
     /tmp/ccMigTVY.s:3      *ABS*:000000000000003f __SREG__
     /tmp/ccMigTVY.s:4      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccMigTVY.s:5      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccMigTVY.s:127    .text:0000000000000000 irsnd_on
     /tmp/ccMigTVY.s:869    .bss:000000000000000d irsnd_is_on
     /tmp/ccMigTVY.s:167    .text:0000000000000016 irsnd_off
     /tmp/ccMigTVY.s:210    .text:000000000000002c irsnd_init
     /tmp/ccMigTVY.s:252    .text:000000000000003e irsnd_is_busy
     /tmp/ccMigTVY.s:881    .bss:000000000000001b irsnd_busy
     /tmp/ccMigTVY.s:277    .text:0000000000000044 irsnd_send_data
     /tmp/ccMigTVY.s:878    .bss:000000000000001a irsnd_protocol
     /tmp/ccMigTVY.s:872    .bss:000000000000000e irsnd_repeat
     /tmp/ccMigTVY.s:856    .bss:000000000000000c toggle_bit_rc5.1688
     /tmp/ccMigTVY.s:875    .bss:000000000000000f irsnd_buffer
     /tmp/ccMigTVY.s:403    .text:00000000000000b8 irsnd_stop
     /tmp/ccMigTVY.s:426    .text:00000000000000be irsnd_ISR
     /tmp/ccMigTVY.s:865    .data:0000000000000003 current_bit.1704
     /tmp/ccMigTVY.s:860    .data:0000000000000002 new_frame.1714
     /tmp/ccMigTVY.s:850    .bss:0000000000000008 packet_repeat_pause_counter.1723
     /tmp/ccMigTVY.s:847    .bss:0000000000000006 repeat_frame_pause_len.1722
     /tmp/ccMigTVY.s:844    .bss:0000000000000005 send_trailer.1703
     /tmp/ccMigTVY.s:841    .bss:0000000000000004 n_repeat_frames.1716
     /tmp/ccMigTVY.s:838    .bss:0000000000000003 pulse_counter.1705
     /tmp/ccMigTVY.s:824    .bss:0000000000000002 pause_counter.1706
     /tmp/ccMigTVY.s:834    .data:0000000000000001 pulse_len.1724
     /tmp/ccMigTVY.s:829    .data:0000000000000000 pause_len.1725
     /tmp/ccMigTVY.s:821    .bss:0000000000000001 complete_data_len.1715
     /tmp/ccMigTVY.s:853    .bss:000000000000000a auto_repetition_pause_len.1719
                             .bss:0000000000000000 repeat_counter.1721

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
